"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/neo4j-driver-core";
exports.ids = ["vendor-chunks/neo4j-driver-core"];
exports.modules = {

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/auth-token-manager.js":
/*!******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/auth-token-manager.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.staticAuthTokenManager = exports.authTokenManagers = exports.AuthTokenAndExpiration = void 0;\nvar auth_1 = __importDefault(__webpack_require__(/*! ./auth */ \"(ssr)/./node_modules/neo4j-driver-core/lib/auth.js\"));\nvar internal_1 = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/index.js\");\n/**\n * Interface for the piece of software responsible for keeping track of current active {@link AuthToken} across the driver.\n * @interface\n * @since 5.14\n */\nvar AuthTokenManager = /** @class */ (function () {\n    function AuthTokenManager() {\n    }\n    /**\n     * Returns a valid token.\n     *\n     * **Warning**: This method must only ever return auth information belonging to the same identity.\n     * Switching identities using the `AuthTokenManager` is undefined behavior.\n     *\n     * @returns {Promise<AuthToken>|AuthToken} The valid auth token or a promise for a valid auth token\n     */\n    AuthTokenManager.prototype.getToken = function () {\n        throw new Error('Not Implemented');\n    };\n    /**\n     * Handles an error notification emitted by the server if a security error happened.\n     *\n     * @param {AuthToken} token The expired token.\n     * @param {`Neo.ClientError.Security.${string}`} securityErrorCode the security error code returned by the server\n     * @return {boolean} whether the exception was handled by the manager, so the driver knows if it can be retried..\n     */\n    AuthTokenManager.prototype.handleSecurityException = function (token, securityErrorCode) {\n        throw new Error('Not implemented');\n    };\n    return AuthTokenManager;\n}());\nexports[\"default\"] = AuthTokenManager;\n/**\n * Interface which defines an {@link AuthToken} with an expiration data time associated\n * @interface\n * @since 5.14\n */\nvar AuthTokenAndExpiration = /** @class */ (function () {\n    function AuthTokenAndExpiration() {\n        /**\n         * The {@link AuthToken} used for authenticate connections.\n         *\n         * @type {AuthToken}\n         * @see {auth}\n         */\n        this.token = auth_1.default.none();\n        /**\n         * The expected expiration date of the auth token.\n         *\n         * This information will be used for triggering the auth token refresh\n         * in managers created with {@link authTokenManagers#bearer}.\n         *\n         * If this value is not defined, the {@link AuthToken} will be considered valid\n         * until a `Neo.ClientError.Security.TokenExpired` error happens.\n         *\n         * @type {Date|undefined}\n         */\n        this.expiration = undefined;\n    }\n    return AuthTokenAndExpiration;\n}());\nexports.AuthTokenAndExpiration = AuthTokenAndExpiration;\n/**\n * Defines the object which holds the common {@link AuthTokenManager} used in the Driver\n */\nvar AuthTokenManagers = /** @class */ (function () {\n    function AuthTokenManagers() {\n    }\n    /**\n     * Creates a {@link AuthTokenManager} for handle {@link AuthToken} which is expires.\n     *\n     * **Warning**: `tokenProvider` must only ever return auth information belonging to the same identity.\n     * Switching identities using the `AuthTokenManager` is undefined behavior.\n     *\n     * @param {object} param0 - The params\n     * @param {function(): Promise<AuthTokenAndExpiration>} param0.tokenProvider - Retrieves a new valid auth token.\n     * Must only ever return auth information belonging to the same identity.\n     * @returns {AuthTokenManager} The temporal auth data manager.\n     */\n    AuthTokenManagers.prototype.bearer = function (_a) {\n        var tokenProvider = _a.tokenProvider;\n        if (typeof tokenProvider !== 'function') {\n            throw new TypeError(\"tokenProvider should be function, but got: \".concat(typeof tokenProvider));\n        }\n        return new ExpirationBasedAuthTokenManager(tokenProvider, [\n            'Neo.ClientError.Security.Unauthorized',\n            'Neo.ClientError.Security.TokenExpired'\n        ]);\n    };\n    /**\n     * Creates a {@link AuthTokenManager} for handle {@link AuthToken} and password rotation.\n     *\n     * **Warning**: `tokenProvider` must only ever return auth information belonging to the same identity.\n     * Switching identities using the `AuthTokenManager` is undefined behavior.\n     *\n     * @param {object} param0 - The params\n     * @param {function(): Promise<AuthToken>} param0.tokenProvider - Retrieves a new valid auth token.\n     * Must only ever return auth information belonging to the same identity.\n     * @returns {AuthTokenManager} The basic auth data manager.\n     */\n    AuthTokenManagers.prototype.basic = function (_a) {\n        var _this = this;\n        var tokenProvider = _a.tokenProvider;\n        if (typeof tokenProvider !== 'function') {\n            throw new TypeError(\"tokenProvider should be function, but got: \".concat(typeof tokenProvider));\n        }\n        return new ExpirationBasedAuthTokenManager(function () { return __awaiter(_this, void 0, void 0, function () {\n            var _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = {};\n                        return [4 /*yield*/, tokenProvider()];\n                    case 1: return [2 /*return*/, (_a.token = _b.sent(), _a)];\n                }\n            });\n        }); }, ['Neo.ClientError.Security.Unauthorized']);\n    };\n    return AuthTokenManagers;\n}());\n/**\n * Holds the common {@link AuthTokenManagers} used in the Driver.\n */\nvar authTokenManagers = new AuthTokenManagers();\nexports.authTokenManagers = authTokenManagers;\nObject.freeze(authTokenManagers);\n/**\n * Create a {@link AuthTokenManager} for handle static {@link AuthToken}\n *\n * @private\n * @param {param} args - The args\n * @param {AuthToken} args.authToken - The static auth token which will always used in the driver.\n * @returns {AuthTokenManager} The temporal auth data manager.\n */\nfunction staticAuthTokenManager(_a) {\n    var authToken = _a.authToken;\n    return new StaticAuthTokenManager(authToken);\n}\nexports.staticAuthTokenManager = staticAuthTokenManager;\nvar TokenRefreshObservable = /** @class */ (function () {\n    function TokenRefreshObservable(_subscribers) {\n        if (_subscribers === void 0) { _subscribers = []; }\n        this._subscribers = _subscribers;\n    }\n    TokenRefreshObservable.prototype.subscribe = function (sub) {\n        this._subscribers.push(sub);\n    };\n    TokenRefreshObservable.prototype.onCompleted = function (data) {\n        this._subscribers.forEach(function (sub) { return sub.onCompleted(data); });\n    };\n    TokenRefreshObservable.prototype.onError = function (error) {\n        this._subscribers.forEach(function (sub) { return sub.onError(error); });\n    };\n    return TokenRefreshObservable;\n}());\nvar ExpirationBasedAuthTokenManager = /** @class */ (function () {\n    function ExpirationBasedAuthTokenManager(_tokenProvider, _handledSecurityCodes, _currentAuthData, _refreshObservable) {\n        this._tokenProvider = _tokenProvider;\n        this._handledSecurityCodes = _handledSecurityCodes;\n        this._currentAuthData = _currentAuthData;\n        this._refreshObservable = _refreshObservable;\n    }\n    ExpirationBasedAuthTokenManager.prototype.getToken = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (!(this._currentAuthData === undefined ||\n                            (this._currentAuthData.expiration !== undefined &&\n                                this._currentAuthData.expiration < new Date()))) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._refreshAuthToken()];\n                    case 1:\n                        _b.sent();\n                        _b.label = 2;\n                    case 2: return [2 /*return*/, (_a = this._currentAuthData) === null || _a === void 0 ? void 0 : _a.token];\n                }\n            });\n        });\n    };\n    ExpirationBasedAuthTokenManager.prototype.handleSecurityException = function (token, securityErrorCode) {\n        var _a;\n        if (this._handledSecurityCodes.includes(securityErrorCode)) {\n            if (internal_1.util.equals(token, (_a = this._currentAuthData) === null || _a === void 0 ? void 0 : _a.token)) {\n                this._scheduleRefreshAuthToken();\n            }\n            return true;\n        }\n        return false;\n    };\n    ExpirationBasedAuthTokenManager.prototype._scheduleRefreshAuthToken = function (observer) {\n        var _this = this;\n        if (this._refreshObservable === undefined) {\n            this._currentAuthData = undefined;\n            this._refreshObservable = new TokenRefreshObservable();\n            Promise.resolve(this._tokenProvider())\n                .then(function (data) {\n                var _a;\n                _this._currentAuthData = data;\n                (_a = _this._refreshObservable) === null || _a === void 0 ? void 0 : _a.onCompleted(data);\n            })\n                .catch(function (error) {\n                var _a;\n                (_a = _this._refreshObservable) === null || _a === void 0 ? void 0 : _a.onError(error);\n            })\n                .finally(function () {\n                _this._refreshObservable = undefined;\n            });\n        }\n        if (observer !== undefined) {\n            this._refreshObservable.subscribe(observer);\n        }\n    };\n    ExpirationBasedAuthTokenManager.prototype._refreshAuthToken = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {\n                            _this._scheduleRefreshAuthToken({\n                                onCompleted: resolve,\n                                onError: reject\n                            });\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    return ExpirationBasedAuthTokenManager;\n}());\nvar StaticAuthTokenManager = /** @class */ (function () {\n    function StaticAuthTokenManager(_authToken) {\n        this._authToken = _authToken;\n    }\n    StaticAuthTokenManager.prototype.getToken = function () {\n        return this._authToken;\n    };\n    StaticAuthTokenManager.prototype.handleSecurityException = function (_, __) {\n        return false;\n    };\n    return StaticAuthTokenManager;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/auth-token-manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/auth.js":
/*!****************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/auth.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * @property {function(username: string, password: string, realm: ?string)} basic the function to create a\n * basic authentication token.\n * @property {function(base64EncodedTicket: string)} kerberos the function to create a Kerberos authentication token.\n * Accepts a single string argument - base64 encoded Kerberos ticket.\n * @property {function(base64EncodedTicket: string)} bearer the function to create a Bearer authentication token.\n * Accepts a single string argument - base64 encoded Bearer ticket.\n * @property {function(principal: string, credentials: string, realm: string, scheme: string, parameters: ?object)} custom\n * the function to create a custom authentication token.\n */\nvar auth = {\n    basic: function (username, password, realm) {\n        if (realm != null) {\n            return {\n                scheme: 'basic',\n                principal: username,\n                credentials: password,\n                realm: realm\n            };\n        }\n        else {\n            return { scheme: 'basic', principal: username, credentials: password };\n        }\n    },\n    kerberos: function (base64EncodedTicket) {\n        return {\n            scheme: 'kerberos',\n            principal: '',\n            credentials: base64EncodedTicket\n        };\n    },\n    bearer: function (base64EncodedToken) {\n        return {\n            scheme: 'bearer',\n            credentials: base64EncodedToken\n        };\n    },\n    none: function () {\n        return {\n            scheme: 'none'\n        };\n    },\n    custom: function (principal, credentials, realm, scheme, parameters) {\n        var output = {\n            scheme: scheme,\n            principal: principal\n        };\n        if (isNotEmpty(credentials)) {\n            output.credentials = credentials;\n        }\n        if (isNotEmpty(realm)) {\n            output.realm = realm;\n        }\n        if (isNotEmpty(parameters)) {\n            output.parameters = parameters;\n        }\n        return output;\n    }\n};\nfunction isNotEmpty(value) {\n    return !(value === null ||\n        value === undefined ||\n        value === '' ||\n        (Object.getPrototypeOf(value) === Object.prototype && Object.keys(value).length === 0));\n}\nexports[\"default\"] = auth;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2F1dGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBLGNBQWMsOERBQThEO0FBQzVFO0FBQ0EsY0FBYyx1Q0FBdUM7QUFDckQ7QUFDQSxjQUFjLHVDQUF1QztBQUNyRDtBQUNBLGNBQWMsc0dBQXNHO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZSIsInNvdXJjZXMiOlsiL2hvbWUvanBpY2M4NjgxL3Byb2Qtc3lzdGVtL2RvY2tlci1kZXYvbGVnYWwtcGxhdGZvcm0tYmFja2VuZC9sZWdhbC1zb2Z0d2FyZS1wbGF0Zm9ybS9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2F1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgXCJOZW80alwiXG4gKiBOZW80aiBTd2VkZW4gQUIgW2h0dHBzOi8vbmVvNGouY29tXVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKHVzZXJuYW1lOiBzdHJpbmcsIHBhc3N3b3JkOiBzdHJpbmcsIHJlYWxtOiA/c3RyaW5nKX0gYmFzaWMgdGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhXG4gKiBiYXNpYyBhdXRoZW50aWNhdGlvbiB0b2tlbi5cbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb24oYmFzZTY0RW5jb2RlZFRpY2tldDogc3RyaW5nKX0ga2VyYmVyb3MgdGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSBhIEtlcmJlcm9zIGF1dGhlbnRpY2F0aW9uIHRva2VuLlxuICogQWNjZXB0cyBhIHNpbmdsZSBzdHJpbmcgYXJndW1lbnQgLSBiYXNlNjQgZW5jb2RlZCBLZXJiZXJvcyB0aWNrZXQuXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKGJhc2U2NEVuY29kZWRUaWNrZXQ6IHN0cmluZyl9IGJlYXJlciB0aGUgZnVuY3Rpb24gdG8gY3JlYXRlIGEgQmVhcmVyIGF1dGhlbnRpY2F0aW9uIHRva2VuLlxuICogQWNjZXB0cyBhIHNpbmdsZSBzdHJpbmcgYXJndW1lbnQgLSBiYXNlNjQgZW5jb2RlZCBCZWFyZXIgdGlja2V0LlxuICogQHByb3BlcnR5IHtmdW5jdGlvbihwcmluY2lwYWw6IHN0cmluZywgY3JlZGVudGlhbHM6IHN0cmluZywgcmVhbG06IHN0cmluZywgc2NoZW1lOiBzdHJpbmcsIHBhcmFtZXRlcnM6ID9vYmplY3QpfSBjdXN0b21cbiAqIHRoZSBmdW5jdGlvbiB0byBjcmVhdGUgYSBjdXN0b20gYXV0aGVudGljYXRpb24gdG9rZW4uXG4gKi9cbnZhciBhdXRoID0ge1xuICAgIGJhc2ljOiBmdW5jdGlvbiAodXNlcm5hbWUsIHBhc3N3b3JkLCByZWFsbSkge1xuICAgICAgICBpZiAocmVhbG0gIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzY2hlbWU6ICdiYXNpYycsXG4gICAgICAgICAgICAgICAgcHJpbmNpcGFsOiB1c2VybmFtZSxcbiAgICAgICAgICAgICAgICBjcmVkZW50aWFsczogcGFzc3dvcmQsXG4gICAgICAgICAgICAgICAgcmVhbG06IHJlYWxtXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHsgc2NoZW1lOiAnYmFzaWMnLCBwcmluY2lwYWw6IHVzZXJuYW1lLCBjcmVkZW50aWFsczogcGFzc3dvcmQgfTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAga2VyYmVyb3M6IGZ1bmN0aW9uIChiYXNlNjRFbmNvZGVkVGlja2V0KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzY2hlbWU6ICdrZXJiZXJvcycsXG4gICAgICAgICAgICBwcmluY2lwYWw6ICcnLFxuICAgICAgICAgICAgY3JlZGVudGlhbHM6IGJhc2U2NEVuY29kZWRUaWNrZXRcbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGJlYXJlcjogZnVuY3Rpb24gKGJhc2U2NEVuY29kZWRUb2tlbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc2NoZW1lOiAnYmVhcmVyJyxcbiAgICAgICAgICAgIGNyZWRlbnRpYWxzOiBiYXNlNjRFbmNvZGVkVG9rZW5cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIG5vbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjaGVtZTogJ25vbmUnXG4gICAgICAgIH07XG4gICAgfSxcbiAgICBjdXN0b206IGZ1bmN0aW9uIChwcmluY2lwYWwsIGNyZWRlbnRpYWxzLCByZWFsbSwgc2NoZW1lLCBwYXJhbWV0ZXJzKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB7XG4gICAgICAgICAgICBzY2hlbWU6IHNjaGVtZSxcbiAgICAgICAgICAgIHByaW5jaXBhbDogcHJpbmNpcGFsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpc05vdEVtcHR5KGNyZWRlbnRpYWxzKSkge1xuICAgICAgICAgICAgb3V0cHV0LmNyZWRlbnRpYWxzID0gY3JlZGVudGlhbHM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTm90RW1wdHkocmVhbG0pKSB7XG4gICAgICAgICAgICBvdXRwdXQucmVhbG0gPSByZWFsbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOb3RFbXB0eShwYXJhbWV0ZXJzKSkge1xuICAgICAgICAgICAgb3V0cHV0LnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgfVxufTtcbmZ1bmN0aW9uIGlzTm90RW1wdHkodmFsdWUpIHtcbiAgICByZXR1cm4gISh2YWx1ZSA9PT0gbnVsbCB8fFxuICAgICAgICB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgIHZhbHVlID09PSAnJyB8fFxuICAgICAgICAoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSA9PT0gT2JqZWN0LnByb3RvdHlwZSAmJiBPYmplY3Qua2V5cyh2YWx1ZSkubGVuZ3RoID09PSAwKSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBhdXRoO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/auth.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/bookmark-manager.js":
/*!****************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/bookmark-manager.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.bookmarkManager = void 0;\n/**\n * Interface for the piece of software responsible for keeping track of current active bookmarks accross the driver.\n * @interface\n * @since 5.0\n */\nvar BookmarkManager = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function BookmarkManager() {\n        throw new Error('Not implemented');\n    }\n    /**\n     * Method called when the bookmarks get updated when a transaction finished.\n     *\n     * This method will be called when auto-commit queries finish and when explicit transactions\n     * get committed.\n     *\n     * @param {Iterable<string>} previousBookmarks The bookmarks used when starting the transaction\n     * @param {Iterable<string>} newBookmarks The new bookmarks received at the end of the transaction.\n     * @returns {void}\n    */\n    BookmarkManager.prototype.updateBookmarks = function (previousBookmarks, newBookmarks) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw new Error('Not implemented');\n            });\n        });\n    };\n    /**\n     * Method called by the driver to get the bookmarks.\n     *\n     * @returns {Iterable<string>} The set of bookmarks\n     */\n    BookmarkManager.prototype.getBookmarks = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                throw new Error('Not implemented');\n            });\n        });\n    };\n    return BookmarkManager;\n}());\nexports[\"default\"] = BookmarkManager;\n/**\n * @typedef {Object} BookmarkManagerConfig\n *\n * @since 5.0\n * @property {Iterable<string>} [initialBookmarks] Defines the initial set of bookmarks. The key is the database name and the values are the bookmarks.\n * @property {function():Promise<Iterable<string>>} [bookmarksSupplier] Called for supplying extra bookmarks to the BookmarkManager\n * @property {function(bookmarks: Iterable<string>): Promise<void>} [bookmarksConsumer] Called when the set of bookmarks  get updated\n */\n/**\n * Provides an configured {@link BookmarkManager} instance.\n *\n * @since 5.0\n * @param {BookmarkManagerConfig} [config={}]\n * @returns {BookmarkManager}\n */\nfunction bookmarkManager(config) {\n    if (config === void 0) { config = {}; }\n    var initialBookmarks = new Set(config.initialBookmarks);\n    return new Neo4jBookmarkManager(initialBookmarks, config.bookmarksSupplier, config.bookmarksConsumer);\n}\nexports.bookmarkManager = bookmarkManager;\nvar Neo4jBookmarkManager = /** @class */ (function () {\n    function Neo4jBookmarkManager(_bookmarks, _bookmarksSupplier, _bookmarksConsumer) {\n        this._bookmarks = _bookmarks;\n        this._bookmarksSupplier = _bookmarksSupplier;\n        this._bookmarksConsumer = _bookmarksConsumer;\n    }\n    Neo4jBookmarkManager.prototype.updateBookmarks = function (previousBookmarks, newBookmarks) {\n        return __awaiter(this, void 0, void 0, function () {\n            var bookmarks, previousBookmarks_1, previousBookmarks_1_1, bm, newBookmarks_1, newBookmarks_1_1, bm;\n            var e_1, _a, e_2, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        bookmarks = this._bookmarks;\n                        try {\n                            for (previousBookmarks_1 = __values(previousBookmarks), previousBookmarks_1_1 = previousBookmarks_1.next(); !previousBookmarks_1_1.done; previousBookmarks_1_1 = previousBookmarks_1.next()) {\n                                bm = previousBookmarks_1_1.value;\n                                bookmarks.delete(bm);\n                            }\n                        }\n                        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                        finally {\n                            try {\n                                if (previousBookmarks_1_1 && !previousBookmarks_1_1.done && (_a = previousBookmarks_1.return)) _a.call(previousBookmarks_1);\n                            }\n                            finally { if (e_1) throw e_1.error; }\n                        }\n                        try {\n                            for (newBookmarks_1 = __values(newBookmarks), newBookmarks_1_1 = newBookmarks_1.next(); !newBookmarks_1_1.done; newBookmarks_1_1 = newBookmarks_1.next()) {\n                                bm = newBookmarks_1_1.value;\n                                bookmarks.add(bm);\n                            }\n                        }\n                        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                        finally {\n                            try {\n                                if (newBookmarks_1_1 && !newBookmarks_1_1.done && (_b = newBookmarks_1.return)) _b.call(newBookmarks_1);\n                            }\n                            finally { if (e_2) throw e_2.error; }\n                        }\n                        if (!(typeof this._bookmarksConsumer === 'function')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._bookmarksConsumer(__spreadArray([], __read(bookmarks), false))];\n                    case 1:\n                        _c.sent();\n                        _c.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Neo4jBookmarkManager.prototype.getBookmarks = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var bookmarks, suppliedBookmarks, suppliedBookmarks_1, suppliedBookmarks_1_1, bm;\n            var e_3, _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        bookmarks = new Set(this._bookmarks);\n                        if (!(typeof this._bookmarksSupplier === 'function')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._bookmarksSupplier()];\n                    case 1:\n                        suppliedBookmarks = (_a = _c.sent()) !== null && _a !== void 0 ? _a : [];\n                        try {\n                            for (suppliedBookmarks_1 = __values(suppliedBookmarks), suppliedBookmarks_1_1 = suppliedBookmarks_1.next(); !suppliedBookmarks_1_1.done; suppliedBookmarks_1_1 = suppliedBookmarks_1.next()) {\n                                bm = suppliedBookmarks_1_1.value;\n                                bookmarks.add(bm);\n                            }\n                        }\n                        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                        finally {\n                            try {\n                                if (suppliedBookmarks_1_1 && !suppliedBookmarks_1_1.done && (_b = suppliedBookmarks_1.return)) _b.call(suppliedBookmarks_1);\n                            }\n                            finally { if (e_3) throw e_3.error; }\n                        }\n                        _c.label = 2;\n                    case 2: return [2 /*return*/, __spreadArray([], __read(bookmarks), false)];\n                }\n            });\n        });\n    };\n    return Neo4jBookmarkManager;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/bookmark-manager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/client-certificate.js":
/*!******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/client-certificate.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.resolveCertificateProvider = exports.clientCertificateProviders = exports.RotatingClientCertificateProvider = exports.ClientCertificateProvider = void 0;\nvar json = __importStar(__webpack_require__(/*! ./json */ \"(ssr)/./node_modules/neo4j-driver-core/lib/json.js\"));\n/**\n * Represents KeyFile represented as file.\n *\n * @typedef {object} KeyFileObject\n * @property {string} path - The path of the file\n * @property {string|undefined} password - the password of the key. If none,\n * the password defined at {@link ClientCertificate} will be used.\n */\n/**\n * Holds the Client TLS certificate information.\n *\n * Browser instances of the driver should configure the certificate\n * in the system.\n *\n * Files defined in the {@link ClientCertificate#certfile}\n * and {@link ClientCertificate#keyfile} will read and loaded to\n * memory to fill the fields `cert` and `key` in security context.\n *\n * @interface\n * @see https://nodejs.org/api/tls.html#tlscreatesecurecontextoptions\n * @experimental Exposed as preview feature.\n * @since 5.19\n */\nvar ClientCertificate = /** @class */ (function () {\n    function ClientCertificate() {\n        /**\n         * The path to client certificate file.\n         *\n         * @type {string|string[]}\n         */\n        this.certfile = '';\n        /**\n         * The path to the key file.\n         *\n         * @type {string|string[]|KeyFileObject|KeyFileObject[]}\n         */\n        this.keyfile = '';\n        /**\n         * The key's password.\n         *\n         * @type {string|undefined}\n         */\n        this.password = undefined;\n    }\n    return ClientCertificate;\n}());\nexports[\"default\"] = ClientCertificate;\n/**\n * Provides a client certificate to the driver for mutual TLS.\n *\n * The driver will call {@link ClientCertificateProvider#hasUpdate()} to check if the client wants to update the certificate.\n * If so, it will call {@link ClientCertificateProvider#getCertificate()} to get the new certificate.\n *\n * The certificate is only used as a second factor for authentication authenticating the client.\n * The DMBS user still needs to authenticate with an authentication token.\n *\n * All implementations of this interface must be thread-safe and non-blocking for caller threads.\n * For instance, IO operations must not be done on the calling thread.\n *\n * Note that the work done in the methods of this interface count towards the connectionAcquisition.\n * Should fetching the certificate be particularly slow, it might be necessary to increase the timeout.\n *\n * @interface\n * @experimental Exposed as preview feature.\n * @since 5.19\n */\nvar ClientCertificateProvider = /** @class */ (function () {\n    function ClientCertificateProvider() {\n    }\n    /**\n     * Indicates whether the client wants the driver to update the certificate.\n     *\n     * @returns {Promise<boolean>|boolean} true if the client wants the driver to update the certificate\n     */\n    ClientCertificateProvider.prototype.hasUpdate = function () {\n        throw new Error('Not Implemented');\n    };\n    /**\n     * Returns the certificate to use for new connections.\n     *\n     * Will be called by the driver after {@link ClientCertificateProvider#hasUpdate()} returned true\n     * or when the driver establishes the first connection.\n     *\n     * @returns {Promise<ClientCertificate>|ClientCertificate} the certificate to use for new connections\n     */\n    ClientCertificateProvider.prototype.getClientCertificate = function () {\n        throw new Error('Not Implemented');\n    };\n    return ClientCertificateProvider;\n}());\nexports.ClientCertificateProvider = ClientCertificateProvider;\n/**\n * Interface for  {@link ClientCertificateProvider} which provides update certificate function.\n * @interface\n * @experimental Exposed as preview feature.\n * @since 5.19\n */\nvar RotatingClientCertificateProvider = /** @class */ (function (_super) {\n    __extends(RotatingClientCertificateProvider, _super);\n    function RotatingClientCertificateProvider() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Updates the certificate stored in the provider.\n     *\n     * To be called by user-code when a new client certificate is available.\n     *\n     * @param {ClientCertificate} certificate - the new certificate\n     * @throws {TypeError} If initialCertificate is not a ClientCertificate.\n     */\n    RotatingClientCertificateProvider.prototype.updateCertificate = function (certificate) {\n        throw new Error('Not implemented');\n    };\n    return RotatingClientCertificateProvider;\n}(ClientCertificateProvider));\nexports.RotatingClientCertificateProvider = RotatingClientCertificateProvider;\n/**\n * Defines the object which holds the common {@link ClientCertificateProviders} used in the Driver\n *\n * @experimental Exposed as preview feature.\n * @since 5.19\n */\nvar ClientCertificateProviders = /** @class */ (function () {\n    function ClientCertificateProviders() {\n    }\n    /**\n     *\n     * @param {object} param0 - The params\n     * @param {ClientCertificate} param0.initialCertificate - The certificated used by the driver until {@link RotatingClientCertificateProvider#updateCertificate} get called.\n     *\n     * @returns {RotatingClientCertificateProvider} The rotating client certificate provider\n     * @throws {TypeError} If initialCertificate is not a ClientCertificate.\n     */\n    ClientCertificateProviders.prototype.rotating = function (_a) {\n        var initialCertificate = _a.initialCertificate;\n        if (initialCertificate == null || !isClientClientCertificate(initialCertificate)) {\n            throw new TypeError(\"initialCertificate should be ClientCertificate, but got \".concat(json.stringify(initialCertificate)));\n        }\n        var certificate = __assign({}, initialCertificate);\n        return new InternalRotatingClientCertificateProvider(certificate);\n    };\n    return ClientCertificateProviders;\n}());\n/**\n * Holds the common {@link ClientCertificateProviders} used in the Driver.\n *\n * @experimental Exposed as preview feature.\n * @since 5.19\n */\nvar clientCertificateProviders = new ClientCertificateProviders();\nexports.clientCertificateProviders = clientCertificateProviders;\nObject.freeze(clientCertificateProviders);\n/**\n * Resolves ClientCertificate or ClientCertificateProvider to a ClientCertificateProvider\n *\n * Method validates the input.\n *\n * @private\n * @param input\n * @returns {ClientCertificateProvider?} A client certificate provider if provided a ClientCertificate or a ClientCertificateProvider\n * @throws {TypeError} If input is not a ClientCertificate, ClientCertificateProvider, undefined or null.\n */\nfunction resolveCertificateProvider(input) {\n    if (input == null) {\n        return undefined;\n    }\n    if (typeof input === 'object' && 'hasUpdate' in input && 'getClientCertificate' in input &&\n        typeof input.getClientCertificate === 'function' && typeof input.hasUpdate === 'function') {\n        return input;\n    }\n    if (isClientClientCertificate(input)) {\n        var certificate_1 = __assign({}, input);\n        return {\n            getClientCertificate: function () { return certificate_1; },\n            hasUpdate: function () { return false; }\n        };\n    }\n    throw new TypeError(\"clientCertificate should be configured with ClientCertificate or ClientCertificateProvider, but got \".concat(json.stringify(input)));\n}\nexports.resolveCertificateProvider = resolveCertificateProvider;\n/**\n * Verify if object is a client certificate\n * @private\n * @param maybeClientCertificate - Maybe the certificate\n * @returns {boolean} if maybeClientCertificate is a client certificate object\n */\nfunction isClientClientCertificate(maybeClientCertificate) {\n    return maybeClientCertificate != null &&\n        typeof maybeClientCertificate === 'object' &&\n        'certfile' in maybeClientCertificate && isCertFile(maybeClientCertificate.certfile) &&\n        'keyfile' in maybeClientCertificate && isKeyFile(maybeClientCertificate.keyfile) &&\n        isStringOrNotPresent('password', maybeClientCertificate);\n}\n/**\n * Check value is a cert file\n * @private\n * @param {any} value the value\n * @returns {boolean} is a cert file\n */\nfunction isCertFile(value) {\n    return isString(value) || isArrayOf(value, isString);\n}\n/**\n * Check if the value is a keyfile.\n *\n * @private\n * @param {any} maybeKeyFile might be a keyfile value\n * @returns {boolean} the value is a KeyFile\n */\nfunction isKeyFile(maybeKeyFile) {\n    function check(obj) {\n        return typeof obj === 'string' ||\n            (obj != null &&\n                typeof obj === 'object' &&\n                'path' in obj && typeof obj.path === 'string' &&\n                isStringOrNotPresent('password', obj));\n    }\n    return check(maybeKeyFile) || isArrayOf(maybeKeyFile, check);\n}\n/**\n * Verify if value is string\n *\n * @private\n * @param {any} value the value\n * @returns {boolean} is string\n */\nfunction isString(value) {\n    return typeof value === 'string';\n}\n/**\n * Verifies if value is a array of type\n *\n * @private\n * @param {any} value the value\n * @param {function} isType the type checker\n * @returns {boolean} value is array of type\n */\nfunction isArrayOf(value, isType, allowEmpty) {\n    if (allowEmpty === void 0) { allowEmpty = false; }\n    return Array.isArray(value) &&\n        (allowEmpty || value.length > 0) &&\n        value.filter(isType).length === value.length;\n}\n/**\n * Verify if valueName is present in the object and is a string, or not present at all.\n *\n * @private\n * @param {string} valueName The value in the object\n * @param {object} obj The object\n * @returns {boolean} if the value is present in object as string or not present\n */\nfunction isStringOrNotPresent(valueName, obj) {\n    return !(valueName in obj) || obj[valueName] == null || typeof obj[valueName] === 'string';\n}\n/**\n * Internal implementation\n *\n * @private\n */\nvar InternalRotatingClientCertificateProvider = /** @class */ (function () {\n    function InternalRotatingClientCertificateProvider(_certificate, _updated) {\n        if (_updated === void 0) { _updated = false; }\n        this._certificate = _certificate;\n        this._updated = _updated;\n    }\n    /**\n     *\n     * @returns {boolean|Promise<boolean>}\n     */\n    InternalRotatingClientCertificateProvider.prototype.hasUpdate = function () {\n        try {\n            return this._updated;\n        }\n        finally {\n            this._updated = false;\n        }\n    };\n    /**\n     *\n     * @returns {ClientCertificate|Promise<ClientCertificate>}\n     */\n    InternalRotatingClientCertificateProvider.prototype.getClientCertificate = function () {\n        return this._certificate;\n    };\n    /**\n     *\n     * @param certificate\n     * @returns {void}\n     */\n    InternalRotatingClientCertificateProvider.prototype.updateCertificate = function (certificate) {\n        if (!isClientClientCertificate(certificate)) {\n            throw new TypeError(\"certificate should be ClientCertificate, but got \".concat(json.stringify(certificate)));\n        }\n        this._certificate = __assign({}, certificate);\n        this._updated = true;\n    };\n    return InternalRotatingClientCertificateProvider;\n}());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/client-certificate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/connection-provider.js":
/*!*******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/connection-provider.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/promise-function-async */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Releasable = void 0;\n/**\n * Interface define a releasable resource shape\n *\n * @private\n * @interface\n */\nvar Releasable = /** @class */ (function () {\n    function Releasable() {\n    }\n    /**\n     * @returns {Promise<void>}\n     */\n    Releasable.prototype.release = function () {\n        throw new Error('Not implemented');\n    };\n    return Releasable;\n}());\nexports.Releasable = Releasable;\n/**\n * Interface define a common way to acquire a connection\n *\n * @private\n */\nvar ConnectionProvider = /** @class */ (function () {\n    function ConnectionProvider() {\n    }\n    /**\n     * This method acquires a connection against the specified database.\n     *\n     * Access mode and Bookmarks only applies to routing driver. Access mode only\n     * differentiates the target server for the connection, where WRITE selects a\n     * WRITER server, whereas READ selects a READ server. Bookmarks, when specified,\n     * is only passed to the routing discovery procedure, for the system database to\n     * synchronize on creation of databases and is never used in direct drivers.\n     *\n     * @param {object} param - object parameter\n     * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n     * @property {string} param.database - the target database for the to-be-acquired connection\n     * @property {Bookmarks} param.bookmarks - the bookmarks to send to routing discovery\n     * @property {string} param.impersonatedUser - the impersonated user\n     * @property {function (databaseName:string?)} param.onDatabaseNameResolved - Callback called when the database name get resolved\n     * @returns {Promise<Connection>}\n     */\n    ConnectionProvider.prototype.acquireConnection = function (param) {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the backend database supports multi database functionality\n     * by checking protocol handshake result.\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsMultiDb = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the backend database supports transaction config functionality\n     * by checking protocol handshake result.\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsTransactionConfig = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the backend database supports transaction config functionality\n     * by checking protocol handshake result.\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsUserImpersonation = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method checks whether the driver session re-auth functionality\n     * by checking protocol handshake result\n     *\n     * @returns {Promise<boolean>}\n     */\n    ConnectionProvider.prototype.supportsSessionAuth = function () {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method verifies the connectivity of the database by trying to acquire a connection\n     * for each server available in the cluster.\n     *\n     * @param {object} param - object parameter\n     * @property {string} param.database - the target database for the to-be-acquired connection\n     * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n     *\n     * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.\n     */\n    ConnectionProvider.prototype.verifyConnectivityAndGetServerInfo = function (param) {\n        throw Error('Not implemented');\n    };\n    /**\n     * This method verifies the authorization credentials work by trying to acquire a connection\n     * to one of the servers with the given credentials.\n     *\n     * @param {object} param - object parameter\n     * @property {AuthToken} param.auth - the target auth for the to-be-acquired connection\n     * @property {string} param.database - the target database for the to-be-acquired connection\n     * @property {string} param.accessMode - the access mode for the to-be-acquired connection\n     *\n     * @returns {Promise<boolean>} promise resolved with true if succeed, false if failed with\n     *  authentication issue and rejected with error if non-authentication error happens.\n     */\n    ConnectionProvider.prototype.verifyAuthentication = function (param) {\n        throw Error('Not implemented');\n    };\n    /**\n     * Returns the protocol version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<number>} the protocol version negotiated via handshake.\n     * @throws {Error} When protocol negotiation fails\n     */\n    ConnectionProvider.prototype.getNegotiatedProtocolVersion = function () {\n        throw Error('Not Implemented');\n    };\n    /**\n     * Closes this connection provider along with its internals (connections, pools, etc.)\n     *\n     * @returns {Promise<void>}\n     */\n    ConnectionProvider.prototype.close = function () {\n        throw Error('Not implemented');\n    };\n    return ConnectionProvider;\n}());\nexports[\"default\"] = ConnectionProvider;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/connection-provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/connection.js":
/*!**********************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/connection.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n*/\n/* eslint-disable @typescript-eslint/promise-function-async */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Interface which defines a connection for the core driver object.\n *\n *\n * This connection exposes only methods used by the code module.\n * Methods with connection implementation details can be defined and used\n * by the implementation layer.\n *\n * @private\n * @interface\n */\nvar Connection = /** @class */ (function () {\n    function Connection() {\n    }\n    /**\n     *\n     * @param config\n     * @returns {ResultStreamObserver}\n     */\n    Connection.prototype.beginTransaction = function (config) {\n        throw new Error('Not implemented');\n    };\n    /**\n     *\n     * @param query\n     * @param parameters\n     * @param config\n     * @returns {ResultStreamObserver}\n     */\n    Connection.prototype.run = function (query, parameters, config) {\n        throw new Error('Not implemented');\n    };\n    /**\n     *\n     * @param config\n     * @returns {ResultStreamObserver}\n     */\n    Connection.prototype.commitTransaction = function (config) {\n        throw new Error('Not implemented');\n    };\n    /**\n     *\n     * @param config\n     * @returns {ResultStreamObserver}\n     */\n    Connection.prototype.rollbackTransaction = function (config) {\n        throw new Error('Not implemented');\n    };\n    /**\n     *\n     * @returns {Promise<void>}\n     */\n    Connection.prototype.resetAndFlush = function () {\n        throw new Error('Not implemented');\n    };\n    /**\n     *\n     * @returns {boolean}\n     */\n    Connection.prototype.isOpen = function () {\n        throw new Error('Not implemented');\n    };\n    /**\n     *\n     * @returns {number}\n     */\n    Connection.prototype.getProtocolVersion = function () {\n        throw new Error('Not implemented');\n    };\n    /**\n     *\n     * @returns {boolean}\n     */\n    Connection.prototype.hasOngoingObservableRequests = function () {\n        throw new Error('Not implemented');\n    };\n    return Connection;\n}());\nexports[\"default\"] = Connection;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2Nvbm5lY3Rpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFlIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvY29ubmVjdGlvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBcIk5lbzRqXCJcbiAqIE5lbzRqIFN3ZWRlbiBBQiBbaHR0cHM6Ly9uZW80ai5jb21dXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9wcm9taXNlLWZ1bmN0aW9uLWFzeW5jICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEludGVyZmFjZSB3aGljaCBkZWZpbmVzIGEgY29ubmVjdGlvbiBmb3IgdGhlIGNvcmUgZHJpdmVyIG9iamVjdC5cbiAqXG4gKlxuICogVGhpcyBjb25uZWN0aW9uIGV4cG9zZXMgb25seSBtZXRob2RzIHVzZWQgYnkgdGhlIGNvZGUgbW9kdWxlLlxuICogTWV0aG9kcyB3aXRoIGNvbm5lY3Rpb24gaW1wbGVtZW50YXRpb24gZGV0YWlscyBjYW4gYmUgZGVmaW5lZCBhbmQgdXNlZFxuICogYnkgdGhlIGltcGxlbWVudGF0aW9uIGxheWVyLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAaW50ZXJmYWNlXG4gKi9cbnZhciBDb25uZWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbm5lY3Rpb24oKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZ1xuICAgICAqIEByZXR1cm5zIHtSZXN1bHRTdHJlYW1PYnNlcnZlcn1cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5iZWdpblRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcXVlcnlcbiAgICAgKiBAcGFyYW0gcGFyYW1ldGVyc1xuICAgICAqIEBwYXJhbSBjb25maWdcbiAgICAgKiBAcmV0dXJucyB7UmVzdWx0U3RyZWFtT2JzZXJ2ZXJ9XG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKHF1ZXJ5LCBwYXJhbWV0ZXJzLCBjb25maWcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZ1xuICAgICAqIEByZXR1cm5zIHtSZXN1bHRTdHJlYW1PYnNlcnZlcn1cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5jb21taXRUcmFuc2FjdGlvbiA9IGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGNvbmZpZ1xuICAgICAqIEByZXR1cm5zIHtSZXN1bHRTdHJlYW1PYnNlcnZlcn1cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5yb2xsYmFja1RyYW5zYWN0aW9uID0gZnVuY3Rpb24gKGNvbmZpZykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx2b2lkPn1cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5yZXNldEFuZEZsdXNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5pc09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgQ29ubmVjdGlvbi5wcm90b3R5cGUuZ2V0UHJvdG9jb2xWZXJzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBDb25uZWN0aW9uLnByb3RvdHlwZS5oYXNPbmdvaW5nT2JzZXJ2YWJsZVJlcXVlc3RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH07XG4gICAgcmV0dXJuIENvbm5lY3Rpb247XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ29ubmVjdGlvbjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/connection.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/driver.js":
/*!******************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/driver.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueryConfig = exports.SessionConfig = exports.routing = exports.WRITE = exports.READ = exports.Driver = void 0;\nvar bookmarks_1 = __webpack_require__(/*! ./internal/bookmarks */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/bookmarks.js\");\nvar configured_custom_resolver_1 = __importDefault(__webpack_require__(/*! ./internal/resolver/configured-custom-resolver */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/configured-custom-resolver.js\"));\nvar constants_1 = __webpack_require__(/*! ./internal/constants */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/constants.js\");\nvar logger_1 = __webpack_require__(/*! ./internal/logger */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/logger.js\");\nvar session_1 = __importDefault(__webpack_require__(/*! ./session */ \"(ssr)/./node_modules/neo4j-driver-core/lib/session.js\"));\nvar util_1 = __webpack_require__(/*! ./internal/util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\");\nvar bookmark_manager_1 = __webpack_require__(/*! ./bookmark-manager */ \"(ssr)/./node_modules/neo4j-driver-core/lib/bookmark-manager.js\");\nvar result_transformers_1 = __importDefault(__webpack_require__(/*! ./result-transformers */ \"(ssr)/./node_modules/neo4j-driver-core/lib/result-transformers.js\"));\nvar query_executor_1 = __importDefault(__webpack_require__(/*! ./internal/query-executor */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/query-executor.js\"));\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar DEFAULT_MAX_CONNECTION_LIFETIME = 60 * 60 * 1000; // 1 hour\n/**\n * The default record fetch size. This is used in Bolt V4 protocol to pull query execution result in batches.\n * @type {number}\n */\nvar DEFAULT_FETCH_SIZE = 1000;\n/**\n * Constant that represents read session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.READ })`.\n * @type {string}\n */\nvar READ = constants_1.ACCESS_MODE_READ;\nexports.READ = READ;\n/**\n * Constant that represents write session access mode.\n * Should be used like this: `driver.session({ defaultAccessMode: neo4j.session.WRITE })`.\n * @type {string}\n */\nvar WRITE = constants_1.ACCESS_MODE_WRITE;\nexports.WRITE = WRITE;\nvar idGenerator = 0;\n/**\n * The session configuration\n *\n * @interface\n */\nvar SessionConfig = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function SessionConfig() {\n        /**\n         * The access mode of this session, allowed values are {@link READ} and {@link WRITE}.\n         * **Default**: {@link WRITE}\n         * @type {string}\n         */\n        this.defaultAccessMode = WRITE;\n        /**\n         * The initial reference or references to some previous\n         * transactions. Value is optional and absence indicates that that the bookmarks do not exist or are unknown.\n         * @type {string|string[]|undefined}\n         */\n        this.bookmarks = [];\n        /**\n         * The database this session will operate on.\n         *\n         * This option has no explicit value by default, but it is recommended to set\n         * one if the target database is known in advance. This has the benefit of\n         * ensuring a consistent target database name throughout the session in a\n         * straightforward way and potentially simplifies driver logic as well as\n         * reduces network communication resulting in better performance.\n         *\n         * Usage of Cypher clauses like USE is not a replacement for this option.\n         * The driver does not parse any Cypher.\n         *\n         * When no explicit name is set, the driver behavior depends on the connection\n         * URI scheme supplied to the driver on instantiation and Bolt protocol\n         * version.\n         *\n         * Specifically, the following applies:\n         *\n         * - **bolt schemes** - queries are dispatched to the server for execution\n         *   without explicit database name supplied, meaning that the target database\n         *   name for query execution is determined by the server. It is important to\n         *   note that the target database may change (even within the same session),\n         *   for instance if the user's home database is changed on the server.\n         *\n         * - **neo4j schemes** - providing that Bolt protocol version 4.4, which was\n         *   introduced with Neo4j server 4.4, or above is available, the driver\n         *   fetches the user's home database name from the server on first query\n         *   execution within the session and uses the fetched database name\n         *   explicitly for all queries executed within the session. This ensures that\n         *   the database name remains consistent within the given session. For\n         *   instance, if the user's home database name is 'movies' and the server\n         *   supplies it to the driver upon database name fetching for the session,\n         *   all queries within that session are executed with the explicit database\n         *   name 'movies' supplied. Any change to the user’s home database is\n         *   reflected only in sessions created after such change takes effect. This\n         *   behavior requires additional network communication. In clustered\n         *   environments, it is strongly recommended to avoid a single point of\n         *   failure. For instance, by ensuring that the connection URI resolves to\n         *   multiple endpoints. For older Bolt protocol versions the behavior is the\n         *   same as described for the **bolt schemes** above.\n         *\n         * @type {string|undefined}\n         */\n        this.database = '';\n        /**\n         * The username which the user wants to impersonate for the duration of the session.\n         *\n         * @type {string|undefined}\n         */\n        this.impersonatedUser = undefined;\n        /**\n         * The {@link AuthToken} which will be used for the duration of the session.\n         *\n         * By default, the session will use connections authenticated with the {@link AuthToken} configured on\n         * driver creation. This configuration allows switching user and/or authorization information for the\n         * session lifetime.\n         *\n         * **Warning**: This option is only available when the driver is connected to Neo4j Database servers\n         * which supports Bolt 5.1 or newer.\n         *\n         * @type {AuthToken|undefined}\n         * @see {@link driver}\n         */\n        this.auth = undefined;\n        /**\n         * The record fetch size of each batch of this session.\n         *\n         * Use {@link FETCH_ALL} to always pull all records in one batch. This will override the config value set on driver config.\n         *\n         * @type {number|undefined}\n         */\n        this.fetchSize = undefined;\n        /**\n         * Configure a BookmarkManager for the session to use\n         *\n         * A BookmarkManager is a piece of software responsible for keeping casual consistency between different sessions by sharing bookmarks\n         * between the them.\n         * Enabling it is done by supplying an BookmarkManager implementation instance to this param.\n         * A default implementation could be acquired by calling the factory function {@link bookmarkManager}.\n         *\n         * **Warning**: Sharing the same BookmarkManager instance across multiple sessions can have a negative impact\n         * on performance since all the queries will wait for the latest changes being propagated across the cluster.\n         * For keeping consistency between a group of queries, use {@link Session} for grouping them.\n         * For keeping consistency between a group of sessions, use {@link BookmarkManager} instance for grouping them.\n         *\n         * @example\n         * const bookmarkManager = neo4j.bookmarkManager()\n         * const linkedSession1 = driver.session({ database:'neo4j', bookmarkManager })\n         * const linkedSession2 = driver.session({ database:'neo4j', bookmarkManager })\n         * const unlinkedSession = driver.session({ database:'neo4j' })\n         *\n         * // Creating Driver User\n         * const createUserQueryResult = await linkedSession1.run('CREATE (p:Person {name: $name})', { name: 'Driver User'})\n         *\n         * // Reading Driver User will *NOT* wait of the changes being propagated to the server before RUN the query\n         * // So the 'Driver User' person might not exist in the Result\n         * const unlinkedReadResult = await unlinkedSession.run('CREATE (p:Person {name: $name}) RETURN p', { name: 'Driver User'})\n         *\n         * // Reading Driver User will wait of the changes being propagated to the server before RUN the query\n         * // So the 'Driver User' person should exist in the Result, unless deleted.\n         * const linkedResult = await linkedSession2.run('CREATE (p:Person {name: $name}) RETURN p', { name: 'Driver User'})\n         *\n         * await linkedSession1.close()\n         * await linkedSession2.close()\n         * await unlinkedSession.close()\n         *\n         * @type {BookmarkManager|undefined}\n         * @since 5.0\n         */\n        this.bookmarkManager = undefined;\n        /**\n         * Configure filter for {@link Notification} objects returned in {@link ResultSummary#notifications}.\n         *\n         * This configuration enables filter notifications by:\n         *\n         * * the minimum severity level ({@link NotificationFilterMinimumSeverityLevel})\n         * * disabling notification categories ({@link NotificationFilterDisabledCategory})\n         *\n         *\n         * Disabling notifications can be done by defining the minimum severity level to 'OFF'.\n         * At driver level, when omitted, uses the server's default.\n         * At session level, when omitted, defaults to what filters have been configured at driver level.\n         *\n         * Disabling categories or severities allows the server to skip analysis for those, which can speed up query\n         * execution.\n         *\n         * @example\n         * // enabling warning notification, but disabling `HINT` and `DEPRECATION` notifications.\n         * const session = driver.session({\n         *     database: 'neo4j',\n         *     notificationFilter: {\n         *         minimumSeverityLevel: neo4j.notificationFilterMinimumSeverityLevel.WARNING, // or 'WARNING\n         *         disabledCategories: [\n         *             neo4j.notificationFilterDisabledCategory.HINT, // or 'HINT'\n         *             neo4j.notificationFilterDisabledCategory.DEPRECATION // or 'DEPRECATION'\n         *        ]\n         *     }\n         * })\n         *\n         * @example\n         * // disabling notifications for a session\n         * const session = driver.session({\n         *     database: 'neo4j',\n         *     notificationFilter: {\n         *         minimumSeverityLevel: neo4j.notificationFilterMinimumSeverityLevel.OFF // or 'OFF'\n         *     }\n         * })\n         *\n         * @example\n         * // using default values configured in the driver\n         * const sessionWithDefaultValues = driver.session({ database: 'neo4j' })\n         * // or driver.session({ database: 'neo4j', notificationFilter: undefined })\n         *\n         * // using default minimum severity level, but disabling 'HINT' and 'UNRECOGNIZED'\n         * // notification categories\n         * const sessionWithDefaultSeverityLevel = driver.session({\n         *     database: 'neo4j',\n         *     notificationFilter: {\n         *         disabledCategories: [\n         *             neo4j.notificationFilterDisabledCategory.HINT, // or 'HINT'\n         *             neo4j.notificationFilterDisabledCategory.UNRECOGNIZED // or 'UNRECOGNIZED'\n         *        ]\n         *     }\n         * })\n         *\n         * // using default disabled categories, but configuring minimum severity level to 'WARNING'\n         * const sessionWithDefaultSeverityLevel = driver.session({\n         *     database: 'neo4j',\n         *     notificationFilter: {\n         *         minimumSeverityLevel: neo4j.notificationFilterMinimumSeverityLevel.WARNING // or 'WARNING'\n         *     }\n         * })\n         *\n         * @type {NotificationFilter|undefined}\n         * @since 5.7\n         */\n        this.notificationFilter = undefined;\n    }\n    return SessionConfig;\n}());\nexports.SessionConfig = SessionConfig;\nvar ROUTING_WRITE = 'WRITE';\nvar ROUTING_READ = 'READ';\n/**\n * @typedef {'WRITE'|'READ'} RoutingControl\n */\n/**\n * Constants that represents routing modes.\n *\n * @example\n * driver.executeQuery(\"<QUERY>\", <PARAMETERS>, { routing: neo4j.routing.WRITE })\n */\nvar routing = {\n    WRITE: ROUTING_WRITE,\n    READ: ROUTING_READ\n};\nexports.routing = routing;\nObject.freeze(routing);\n/**\n * The query configuration\n * @interface\n */\nvar QueryConfig = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function QueryConfig() {\n        /**\n         * Define the type of cluster member the query will be routed to.\n         *\n         * @type {RoutingControl}\n         */\n        this.routing = routing.WRITE;\n        /**\n         * Define the transformation will be applied to the Result before return from the\n         * query method.\n         *\n         * @type {ResultTransformer}\n         * @see {@link resultTransformers} for provided implementations.\n         */\n        this.resultTransformer = undefined;\n        /**\n         * The database this session will operate on.\n         *\n         * @type {string|undefined}\n         */\n        this.database = '';\n        /**\n         * The username which the user wants to impersonate for the duration of the query.\n         *\n         * @type {string|undefined}\n         */\n        this.impersonatedUser = undefined;\n        /**\n         * Configure a BookmarkManager for the session to use\n         *\n         * A BookmarkManager is a piece of software responsible for keeping casual consistency between different pieces of work by sharing bookmarks\n         * between the them.\n         *\n         * By default, it uses the driver's non mutable driver level bookmark manager. See, {@link Driver.executeQueryBookmarkManager}\n         *\n         * Can be set to null to disable causal chaining.\n         * @type {BookmarkManager|undefined|null}\n         */\n        this.bookmarkManager = undefined;\n        /**\n         * Configuration for all transactions started to execute the query.\n         *\n         * @type {TransactionConfig|undefined}\n         *\n         */\n        this.transactionConfig = undefined;\n        /**\n         * The {@link AuthToken} which will be used for executing the query.\n         *\n         * By default, the query executor will use connections authenticated with the {@link AuthToken} configured on\n         * driver creation. This configuration allows switching user and/or authorization information for the\n         * underlying transaction's lifetime.\n         *\n         * **Warning**: This option is only available when the driver is connected to Neo4j Database servers\n         * which support Bolt 5.1 or newer.\n         *\n         * @type {AuthToken|undefined}\n         * @see {@link driver}\n         */\n        this.auth = undefined;\n        /**\n         * The {@link AbortSignal} for aborting query execution.\n         *\n         * When aborted, the signal triggers the result consumption cancelation and\n         * transactions are reset. However, due to race conditions,\n         * there is no guarantee the transaction will be rolled back.\n         * Equivalent to {@link Session.close}\n         *\n         * **Warning**: This option is only available in runtime which supports AbortSignal.addEventListener.\n         *\n         * @since 5.22.0\n         * @type {AbortSignal|undefined}\n         * @experimental\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n         */\n        this.signal = undefined;\n    }\n    return QueryConfig;\n}());\nexports.QueryConfig = QueryConfig;\n/**\n * A driver maintains one or more {@link Session}s with a remote\n * Neo4j instance. Through the {@link Session}s you can send queries\n * and retrieve results from the database.\n *\n * Drivers are reasonably expensive to create - you should strive to keep one\n * driver instance around per Neo4j Instance you connect to.\n *\n * @access public\n */\nvar Driver = /** @class */ (function () {\n    /**\n     * You should not be calling this directly, instead use {@link driver}.\n     * @constructor\n     * @protected\n     * @param {Object} meta Metainformation about the driver\n     * @param {Object} config\n     * @param {function(id: number, config:Object, log:Logger, hostNameResolver: ConfiguredCustomResolver): ConnectionProvider } createConnectionProvider Creates the connection provider\n     * @param {function(args): Session } createSession Creates the a session\n    */\n    function Driver(meta, config, createConnectionProvider, createSession, createQueryExecutor) {\n        if (config === void 0) { config = {}; }\n        if (createSession === void 0) { createSession = function (args) { return new session_1.default(args); }; }\n        if (createQueryExecutor === void 0) { createQueryExecutor = function (createSession) { return new query_executor_1.default(createSession); }; }\n        sanitizeConfig(config);\n        var log = logger_1.Logger.create(config);\n        validateConfig(config, log);\n        this._id = idGenerator++;\n        this._meta = meta;\n        this._config = config;\n        this._log = log;\n        this._createConnectionProvider = createConnectionProvider;\n        this._createSession = createSession;\n        this._defaultExecuteQueryBookmarkManager = (0, bookmark_manager_1.bookmarkManager)();\n        this._queryExecutor = createQueryExecutor(this.session.bind(this));\n        /**\n         * Reference to the connection provider. Initialized lazily by {@link _getOrCreateConnectionProvider}.\n         * @type {ConnectionProvider}\n         * @protected\n         */\n        this._connectionProvider = null;\n        this._afterConstruction();\n    }\n    Object.defineProperty(Driver.prototype, \"executeQueryBookmarkManager\", {\n        /**\n         * The bookmark managed used by {@link Driver.executeQuery}\n         *\n         * @type {BookmarkManager}\n         */\n        get: function () {\n            return this._defaultExecuteQueryBookmarkManager;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Executes a query in a retriable context and returns a {@link EagerResult}.\n     *\n     * This method is a shortcut for a {@link Session#executeRead} and {@link Session#executeWrite}.\n     *\n     * NOTE: Because it is an explicit transaction from the server point of view, Cypher queries using\n     * \"CALL {} IN TRANSACTIONS\" or the older \"USING PERIODIC COMMIT\" construct will not work (call\n     * {@link Session#run} for these).\n     *\n     * @example\n     * // Run a simple write query\n     * const { keys, records, summary } = await driver.executeQuery('CREATE (p:Person{ name: $name }) RETURN p', { name: 'Person1'})\n     *\n     * @example\n     * // Run a read query\n     * const { keys, records, summary } = await driver.executeQuery(\n     *    'MATCH (p:Person{ name: $name }) RETURN p',\n     *    { name: 'Person1'},\n     *    { routing: neo4j.routing.READ})\n     *\n     * @example\n     * // Run a read query returning a Person Nodes per elementId\n     * const peopleMappedById = await driver.executeQuery(\n     *    'MATCH (p:Person{ name: $name }) RETURN p',\n     *    { name: 'Person1'},\n     *    {\n     *      resultTransformer: neo4j.resultTransformers.mappedResultTransformer({\n     *        map(record) {\n     *          const p = record.get('p')\n     *          return [p.elementId, p]\n     *        },\n     *        collect(elementIdPersonPairArray) {\n     *          return new Map(elementIdPersonPairArray)\n     *        }\n     *      })\n     *    }\n     * )\n     *\n     * const person = peopleMappedById.get(\"<ELEMENT_ID>\")\n     *\n     * @example\n     * // these lines\n     * const transformedResult = await driver.executeQuery(\n     *    \"<QUERY>\",\n     *    <PARAMETERS>,\n     *    {\n     *       routing: neo4j.routing.WRITE,\n     *       resultTransformer: transformer,\n     *       database: \"<DATABASE>\",\n     *       impersonatedUser: \"<USER>\",\n     *       bookmarkManager: bookmarkManager\n     *    })\n     * // are equivalent to those\n     * const session = driver.session({\n     *    database: \"<DATABASE>\",\n     *    impersonatedUser: \"<USER>\",\n     *    bookmarkManager: bookmarkManager\n     * })\n     *\n     * try {\n     *    const transformedResult = await session.executeWrite(tx => {\n     *        const result = tx.run(\"<QUERY>\", <PARAMETERS>)\n     *        return transformer(result)\n     *    })\n     * } finally {\n     *    await session.close()\n     * }\n     *\n     * @public\n     * @param {string | {text: string, parameters?: object}} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in the query\n     * @param {QueryConfig<T>} config - The query configuration\n     * @returns {Promise<T>}\n     *\n     * @see {@link resultTransformers} for provided result transformers.\n     */\n    Driver.prototype.executeQuery = function (query, parameters, config) {\n        var _a, _b, _c;\n        if (config === void 0) { config = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            var bookmarkManager, resultTransformer, routingConfig;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        bookmarkManager = config.bookmarkManager === null ? undefined : ((_a = config.bookmarkManager) !== null && _a !== void 0 ? _a : this.executeQueryBookmarkManager);\n                        resultTransformer = ((_b = config.resultTransformer) !== null && _b !== void 0 ? _b : result_transformers_1.default.eagerResultTransformer());\n                        routingConfig = (_c = config.routing) !== null && _c !== void 0 ? _c : routing.WRITE;\n                        if (routingConfig !== routing.READ && routingConfig !== routing.WRITE) {\n                            throw (0, error_1.newError)(\"Illegal query routing config: \\\"\".concat(routingConfig, \"\\\"\"));\n                        }\n                        return [4 /*yield*/, this._queryExecutor.execute({\n                                resultTransformer: resultTransformer,\n                                bookmarkManager: bookmarkManager,\n                                routing: routingConfig,\n                                database: config.database,\n                                impersonatedUser: config.impersonatedUser,\n                                transactionConfig: config.transactionConfig,\n                                auth: config.auth,\n                                signal: config.signal\n                            }, query, parameters)];\n                    case 1: return [2 /*return*/, _d.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Verifies connectivity of this driver by trying to open a connection with the provided driver options.\n     *\n     * @deprecated This return of this method will change in 6.0.0 to not async return the {@link ServerInfo} and\n     * async return {@link void} instead. If you need to use the server info, use {@link getServerInfo} instead.\n     *\n     * @public\n     * @param {Object} param - The object parameter\n     * @param {string} param.database - The target database to verify connectivity for.\n     * @returns {Promise<ServerInfo>} promise resolved with server info or rejected with error.\n     */\n    Driver.prototype.verifyConnectivity = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? '' : _c;\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.verifyConnectivityAndGetServerInfo({ database: database, accessMode: READ });\n    };\n    /**\n     * This method verifies the authorization credentials work by trying to acquire a connection\n     * to one of the servers with the given credentials.\n     *\n     * @param {object} param - object parameter\n     * @property {AuthToken} param.auth - the target auth for the to-be-acquired connection\n     * @property {string} param.database - the target database for the to-be-acquired connection\n     *\n     * @returns {Promise<boolean>} promise resolved with true if succeed, false if failed with\n     *  authentication issue and rejected with error if non-authentication error happens.\n     */\n    Driver.prototype.verifyAuthentication = function (_a) {\n        var _b = _a === void 0 ? {} : _a, database = _b.database, auth = _b.auth;\n        return __awaiter(this, void 0, void 0, function () {\n            var connectionProvider;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        connectionProvider = this._getOrCreateConnectionProvider();\n                        return [4 /*yield*/, connectionProvider.verifyAuthentication({\n                                database: database !== null && database !== void 0 ? database : 'system',\n                                auth: auth,\n                                accessMode: READ\n                            })];\n                    case 1: return [2 /*return*/, _c.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Get ServerInfo for the giver database.\n     *\n     * @param {Object} param - The object parameter\n     * @param {string} param.database - The target database to verify connectivity for.\n     * @returns {Promise<ServerInfo>} promise resolved with the ServerInfo or rejected with error.\n     */\n    Driver.prototype.getServerInfo = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.database, database = _c === void 0 ? '' : _c;\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.verifyConnectivityAndGetServerInfo({ database: database, accessMode: READ });\n    };\n    /**\n     * Returns whether the server supports multi database capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsMultiDb = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsMultiDb();\n    };\n    /**\n     * Returns whether the server supports transaction config capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsTransactionConfig = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsTransactionConfig();\n    };\n    /**\n     * Returns whether the server supports user impersonation capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsUserImpersonation = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsUserImpersonation();\n    };\n    /**\n     * Returns whether the driver session re-auth functionality capabilities based on the protocol\n     * version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<boolean>} promise resolved with a boolean or rejected with error.\n     */\n    Driver.prototype.supportsSessionAuth = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.supportsSessionAuth();\n    };\n    /**\n     * Returns the protocol version negotiated via handshake.\n     *\n     * Note that this function call _always_ causes a round-trip to the server.\n     *\n     * @returns {Promise<number>} the protocol version negotiated via handshake.\n     * @throws {Error} When protocol negotiation fails\n     */\n    Driver.prototype.getNegotiatedProtocolVersion = function () {\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        return connectionProvider.getNegotiatedProtocolVersion();\n    };\n    /**\n     * Returns boolean to indicate if driver has been configured with encryption enabled.\n     *\n     * @returns {boolean}\n     */\n    Driver.prototype.isEncrypted = function () {\n        return this._isEncrypted();\n    };\n    /**\n     * @protected\n     * @returns {boolean}\n     */\n    Driver.prototype._supportsRouting = function () {\n        return this._meta.routing;\n    };\n    /**\n     * Returns boolean to indicate if driver has been configured with encryption enabled.\n     *\n     * @protected\n     * @returns {boolean}\n     */\n    Driver.prototype._isEncrypted = function () {\n        return this._config.encrypted === util_1.ENCRYPTION_ON || this._config.encrypted === true;\n    };\n    /**\n     * Returns the configured trust strategy that the driver has been configured with.\n     *\n     * @protected\n     * @returns {TrustStrategy}\n     */\n    Driver.prototype._getTrust = function () {\n        return this._config.trust;\n    };\n    /**\n     * Acquire a session to communicate with the database. The session will\n     * borrow connections from the underlying connection pool as required and\n     * should be considered lightweight and disposable.\n     *\n     * This comes with some responsibility - make sure you always call\n     * {@link close} when you are done using a session, and likewise,\n     * make sure you don't close your session before you are done using it. Once\n     * it is closed, the underlying connection will be released to the connection\n     * pool and made available for others to use.\n     *\n     * @public\n     * @param {SessionConfig} param - The session configuration\n     * @return {Session} new session.\n     */\n    Driver.prototype.session = function (_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.defaultAccessMode, defaultAccessMode = _c === void 0 ? WRITE : _c, bookmarkOrBookmarks = _b.bookmarks, _d = _b.database, database = _d === void 0 ? '' : _d, impersonatedUser = _b.impersonatedUser, fetchSize = _b.fetchSize, bookmarkManager = _b.bookmarkManager, notificationFilter = _b.notificationFilter, auth = _b.auth;\n        return this._newSession({\n            defaultAccessMode: defaultAccessMode,\n            bookmarkOrBookmarks: bookmarkOrBookmarks,\n            database: database,\n            reactive: false,\n            impersonatedUser: impersonatedUser,\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            fetchSize: validateFetchSizeValue(fetchSize, this._config.fetchSize),\n            bookmarkManager: bookmarkManager,\n            notificationFilter: notificationFilter,\n            auth: auth\n        });\n    };\n    /**\n     * Close all open sessions and other associated resources. You should\n     * make sure to use this when you are done with this driver instance.\n     * @public\n     * @return {Promise<void>} promise resolved when the driver is closed.\n     */\n    Driver.prototype.close = function () {\n        this._log.info(\"Driver \".concat(this._id, \" closing\"));\n        if (this._connectionProvider != null) {\n            return this._connectionProvider.close();\n        }\n        return Promise.resolve();\n    };\n    // eslint-disable-next-line\n    // @ts-ignore\n    Driver.prototype[Symbol.asyncDispose] = function () {\n        return this.close();\n    };\n    /**\n     * @protected\n     * @returns {void}\n     */\n    Driver.prototype._afterConstruction = function () {\n        this._log.info(\"\".concat(this._meta.typename, \" driver \").concat(this._id, \" created for server address \").concat(this._meta.address.toString()));\n    };\n    /**\n     * @private\n     */\n    Driver.prototype._newSession = function (_a) {\n        var defaultAccessMode = _a.defaultAccessMode, bookmarkOrBookmarks = _a.bookmarkOrBookmarks, database = _a.database, reactive = _a.reactive, impersonatedUser = _a.impersonatedUser, fetchSize = _a.fetchSize, bookmarkManager = _a.bookmarkManager, notificationFilter = _a.notificationFilter, auth = _a.auth;\n        var sessionMode = session_1.default._validateSessionMode(defaultAccessMode);\n        var connectionProvider = this._getOrCreateConnectionProvider();\n        var bookmarks = bookmarkOrBookmarks != null\n            ? new bookmarks_1.Bookmarks(bookmarkOrBookmarks)\n            : bookmarks_1.Bookmarks.empty();\n        return this._createSession({\n            mode: sessionMode,\n            database: database !== null && database !== void 0 ? database : '',\n            connectionProvider: connectionProvider,\n            bookmarks: bookmarks,\n            config: this._config,\n            reactive: reactive,\n            impersonatedUser: impersonatedUser,\n            fetchSize: fetchSize,\n            bookmarkManager: bookmarkManager,\n            notificationFilter: notificationFilter,\n            auth: auth,\n            log: this._log\n        });\n    };\n    /**\n     * @private\n     */\n    Driver.prototype._getOrCreateConnectionProvider = function () {\n        if (this._connectionProvider == null) {\n            this._connectionProvider = this._createConnectionProvider(this._id, this._config, this._log, createHostNameResolver(this._config));\n        }\n        return this._connectionProvider;\n    };\n    return Driver;\n}());\nexports.Driver = Driver;\n/**\n * @private\n * @returns {Object} the given config.\n */\nfunction validateConfig(config, log) {\n    var _a, _b;\n    var resolver = config.resolver;\n    if (resolver !== null && resolver !== undefined && typeof resolver !== 'function') {\n        throw new TypeError(\"Configured resolver should be a function. Got: \".concat(typeof resolver));\n    }\n    if (config.connectionAcquisitionTimeout < config.connectionTimeout) {\n        log.warn('Configuration for \"connectionAcquisitionTimeout\" should be greater than ' +\n            'or equal to \"connectionTimeout\". Otherwise, the connection acquisition ' +\n            'timeout will take precedence for over the connection timeout in scenarios ' +\n            'where a new connection is created while it is acquired');\n    }\n    if (((_a = config.notificationFilter) === null || _a === void 0 ? void 0 : _a.disabledCategories) != null && ((_b = config.notificationFilter) === null || _b === void 0 ? void 0 : _b.disabledClassifications) != null) {\n        throw new Error('The notificationFilter can\\'t have both \"disabledCategories\" and  \"disabledClassifications\" configured at the same time.');\n    }\n    return config;\n}\n/**\n * @private\n * @returns {void}\n */\nfunction sanitizeConfig(config) {\n    config.maxConnectionLifetime = sanitizeIntValue(config.maxConnectionLifetime, DEFAULT_MAX_CONNECTION_LIFETIME);\n    config.maxConnectionPoolSize = sanitizeIntValue(config.maxConnectionPoolSize, constants_1.DEFAULT_POOL_MAX_SIZE);\n    config.connectionAcquisitionTimeout = sanitizeIntValue(config.connectionAcquisitionTimeout, constants_1.DEFAULT_POOL_ACQUISITION_TIMEOUT);\n    config.fetchSize = validateFetchSizeValue(config.fetchSize, DEFAULT_FETCH_SIZE);\n    config.connectionTimeout = extractConnectionTimeout(config);\n    config.connectionLivenessCheckTimeout =\n        validateConnectionLivenessCheckTimeoutSizeValue(config.connectionLivenessCheckTimeout);\n}\n/**\n * @private\n * @returns {number}\n */\nfunction sanitizeIntValue(rawValue, defaultWhenAbsent) {\n    var sanitizedValue = parseInt(rawValue, 10);\n    if (sanitizedValue > 0 || sanitizedValue === 0) {\n        return sanitizedValue;\n    }\n    else if (sanitizedValue < 0) {\n        return Number.MAX_SAFE_INTEGER;\n    }\n    else {\n        return defaultWhenAbsent;\n    }\n}\n/**\n * @private\n */\nfunction validateFetchSizeValue(rawValue, defaultWhenAbsent) {\n    var fetchSize = parseInt(rawValue, 10);\n    if (fetchSize > 0 || fetchSize === constants_1.FETCH_ALL) {\n        return fetchSize;\n    }\n    else if (fetchSize === 0 || fetchSize < 0) {\n        throw new Error(\"The fetch size can only be a positive value or \".concat(constants_1.FETCH_ALL, \" for ALL. However fetchSize = \").concat(fetchSize));\n    }\n    else {\n        return defaultWhenAbsent;\n    }\n}\n/**\n * @private\n */\nfunction extractConnectionTimeout(config) {\n    var configuredTimeout = parseInt(config.connectionTimeout, 10);\n    if (configuredTimeout === 0) {\n        // timeout explicitly configured to 0\n        return null;\n    }\n    else if (!isNaN(configuredTimeout) && configuredTimeout < 0) {\n        // timeout explicitly configured to a negative value\n        return null;\n    }\n    else if (isNaN(configuredTimeout)) {\n        // timeout not configured, use default value\n        return constants_1.DEFAULT_CONNECTION_TIMEOUT_MILLIS;\n    }\n    else {\n        // timeout configured, use the provided value\n        return configuredTimeout;\n    }\n}\n/**\n * @private\n */\nfunction validateConnectionLivenessCheckTimeoutSizeValue(rawValue) {\n    if (rawValue == null) {\n        return undefined;\n    }\n    var connectionLivenessCheckTimeout = parseInt(rawValue, 10);\n    if (connectionLivenessCheckTimeout < 0 || Number.isNaN(connectionLivenessCheckTimeout)) {\n        throw new Error(\"The connectionLivenessCheckTimeout can only be a positive value or 0 for always. However connectionLivenessCheckTimeout = \".concat(connectionLivenessCheckTimeout));\n    }\n    return connectionLivenessCheckTimeout;\n}\n/**\n * @private\n * @returns {ConfiguredCustomResolver} new custom resolver that wraps the passed-in resolver function.\n *              If resolved function is not specified, it defaults to an identity resolver.\n */\nfunction createHostNameResolver(config) {\n    return new configured_custom_resolver_1.default(config.resolver);\n}\nexports[\"default\"] = Driver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/driver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/error.js":
/*!*****************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/error.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PROTOCOL_ERROR = exports.SESSION_EXPIRED = exports.SERVICE_UNAVAILABLE = exports.GQLError = exports.Neo4jError = exports.isRetriableError = exports.newGQLError = exports.newError = void 0;\n// A common place for constructing error objects, to keep them\n// uniform across the driver surface.\nvar json = __importStar(__webpack_require__(/*! ./json */ \"(ssr)/./node_modules/neo4j-driver-core/lib/json.js\"));\nvar gql_constants_1 = __webpack_require__(/*! ./gql-constants */ \"(ssr)/./node_modules/neo4j-driver-core/lib/gql-constants.js\");\n/**\n * @typedef { 'DATABASE_ERROR' | 'CLIENT_ERROR' | 'TRANSIENT_ERROR' | 'UNKNOWN' } ErrorClassification\n * @experimental this is part of the preview of GQL-compliant errors\n */\nvar errorClassification = {\n    DATABASE_ERROR: 'DATABASE_ERROR',\n    CLIENT_ERROR: 'CLIENT_ERROR',\n    TRANSIENT_ERROR: 'TRANSIENT_ERROR',\n    UNKNOWN: 'UNKNOWN'\n};\nObject.freeze(errorClassification);\nvar classifications = Object.values(errorClassification);\n/**\n * Error code representing complete loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar SERVICE_UNAVAILABLE = 'ServiceUnavailable';\nexports.SERVICE_UNAVAILABLE = SERVICE_UNAVAILABLE;\n/**\n * Error code representing transient loss of service. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar SESSION_EXPIRED = 'SessionExpired';\nexports.SESSION_EXPIRED = SESSION_EXPIRED;\n/**\n * Error code representing serialization/deserialization issue in the Bolt protocol. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar PROTOCOL_ERROR = 'ProtocolError';\nexports.PROTOCOL_ERROR = PROTOCOL_ERROR;\n/**\n * Error code representing an no classified error. Used by {@link Neo4jError#code}.\n * @type {string}\n */\nvar NOT_AVAILABLE = 'N/A';\n/// TODO: Remove definitions of this.constructor and this.__proto__\n/**\n * Class for nested errors, to be used as causes in {@link Neo4jError}\n * @experimental this class is part of the preview of GQL-compliant errors\n */\nvar GQLError = /** @class */ (function (_super) {\n    __extends(GQLError, _super);\n    /**\n     * @constructor\n     * @param {string} message - the error message\n     * @param {string} gqlStatus - the GQL status code of the error\n     * @param {string} gqlStatusDescription - the GQL status description of the error\n     * @param {ErrorDiagnosticRecord} diagnosticRecord - the error diagnostic record\n     * @param {Error} cause - Optional nested error, the cause of the error\n     */\n    function GQLError(message, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) {\n        var _this = this;\n        var _a;\n        // eslint-disable-next-line\n        // @ts-ignore: not available in ES6 yet\n        _this = _super.call(this, message, cause != null ? { cause: cause } : undefined) || this;\n        _this.constructor = GQLError;\n        // eslint-disable-next-line no-proto\n        _this.__proto__ = GQLError.prototype;\n        /**\n         * Optional, nested error which caused the error\n         *\n         * @type {Error?}\n         * @public\n         */\n        _this.cause = cause != null ? cause : undefined;\n        /**\n         * The GQL Status code\n         *\n         * @type {string}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.gqlStatus = gqlStatus;\n        /**\n         * The GQL Status Description\n         *\n         * @type {string}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.gqlStatusDescription = gqlStatusDescription;\n        /**\n         * The GQL diagnostic record\n         *\n         * @type {DiagnosticRecord}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.diagnosticRecord = diagnosticRecord;\n        /**\n         * The GQL error classification, extracted from the diagnostic record\n         *\n         * @type {ErrorClassification}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.classification = _extractClassification(_this.diagnosticRecord);\n        /**\n         * The GQL error classification, extracted from the diagnostic record as a raw string\n         *\n         * @type {string}\n         * @experimental this property is part of the preview of GQL-compliant errors\n         * @public\n         */\n        _this.rawClassification = (_a = diagnosticRecord === null || diagnosticRecord === void 0 ? void 0 : diagnosticRecord._classification) !== null && _a !== void 0 ? _a : undefined;\n        _this.name = 'GQLError';\n        return _this;\n    }\n    Object.defineProperty(GQLError.prototype, \"diagnosticRecordAsJsonString\", {\n        /**\n         * The json string representation of the diagnostic record.\n         * The goal of this method is provide a serialized object for human inspection.\n         *\n         * @type {string}\n         * @experimental this is part of the preview of GQL-compliant errors\n         * @public\n         */\n        get: function () {\n            return json.stringify(this.diagnosticRecord, { useCustomToString: true });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return GQLError;\n}(Error));\nexports.GQLError = GQLError;\n/**\n * Class for all errors thrown/returned by the driver.\n */\nvar Neo4jError = /** @class */ (function (_super) {\n    __extends(Neo4jError, _super);\n    /**\n     * @constructor\n     * @param {string} message - the error message\n     * @param {string} code - Optional error code. Will be populated when error originates in the database.\n     * @param {string} gqlStatus - the GQL status code of the error\n     * @param {string} gqlStatusDescription - the GQL status description of the error\n     * @param {DiagnosticRecord} diagnosticRecord - the error diagnostic record\n     * @param {Error} cause - Optional nested error, the cause of the error\n     */\n    function Neo4jError(message, code, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) {\n        var _this = _super.call(this, message, gqlStatus, gqlStatusDescription, diagnosticRecord, cause) || this;\n        _this.constructor = Neo4jError;\n        // eslint-disable-next-line no-proto\n        _this.__proto__ = Neo4jError.prototype;\n        /**\n         * The Neo4j Error code\n         *\n         * @type {string}\n         * @public\n         */\n        _this.code = code;\n        _this.name = 'Neo4jError';\n        _this.retriable = _isRetriableCode(code);\n        return _this;\n    }\n    /**\n     * Verifies if the given error is retriable.\n     *\n     * @param {object|undefined|null} error the error object\n     * @returns {boolean} true if the error is retriable\n     */\n    Neo4jError.isRetriable = function (error) {\n        return error !== null &&\n            error !== undefined &&\n            error instanceof Neo4jError &&\n            error.retriable;\n    };\n    return Neo4jError;\n}(GQLError));\nexports.Neo4jError = Neo4jError;\n/**\n * Create a new error from a message and optional data\n * @param message the error message\n * @param {Neo4jErrorCode} [code] the error code\n * @param {Neo4jError} [cause]\n * @param {String} [gqlStatus]\n * @param {String} [gqlStatusDescription]\n * @param {DiagnosticRecord} diagnosticRecord - the error message\n * @return {Neo4jError} an {@link Neo4jError}\n * @private\n */\nfunction newError(message, code, cause, gqlStatus, gqlStatusDescription, diagnosticRecord) {\n    return new Neo4jError(message, code !== null && code !== void 0 ? code : NOT_AVAILABLE, gqlStatus !== null && gqlStatus !== void 0 ? gqlStatus : '50N42', gqlStatusDescription !== null && gqlStatusDescription !== void 0 ? gqlStatusDescription : 'error: general processing exception - unexpected error. ' + message, diagnosticRecord !== null && diagnosticRecord !== void 0 ? diagnosticRecord : gql_constants_1.rawPolyfilledDiagnosticRecord, cause);\n}\nexports.newError = newError;\n/**\n * Create a new GQL error from a message and optional data\n * @param message the error message\n * @param {Neo4jError} [cause]\n * @param {String} [gqlStatus]\n * @param {String} [gqlStatusDescription]\n * @param {DiagnosticRecord} diagnosticRecord - the error message\n * @return {Neo4jError} an {@link Neo4jError}\n * @experimental this is part of the preview of GQL-compliant errors\n * @private\n */\nfunction newGQLError(message, cause, gqlStatus, gqlStatusDescription, diagnosticRecord) {\n    return new GQLError(message, gqlStatus !== null && gqlStatus !== void 0 ? gqlStatus : '50N42', gqlStatusDescription !== null && gqlStatusDescription !== void 0 ? gqlStatusDescription : 'error: general processing exception - unexpected error. ' + message, diagnosticRecord !== null && diagnosticRecord !== void 0 ? diagnosticRecord : gql_constants_1.rawPolyfilledDiagnosticRecord, cause);\n}\nexports.newGQLError = newGQLError;\n/**\n * Verifies if the given error is retriable.\n *\n * @public\n * @param {object|undefined|null} error the error object\n * @returns {boolean} true if the error is retriable\n */\nvar isRetriableError = Neo4jError.isRetriable;\nexports.isRetriableError = isRetriableError;\n/**\n * @private\n * @param {string} code the error code\n * @returns {boolean} true if the error is a retriable error\n */\nfunction _isRetriableCode(code) {\n    return code === SERVICE_UNAVAILABLE ||\n        code === SESSION_EXPIRED ||\n        _isAuthorizationExpired(code) ||\n        _isTransientError(code);\n}\n/**\n * @private\n * @param {string} code the error to check\n * @return {boolean} true if the error is a transient error\n */\nfunction _isTransientError(code) {\n    return (code === null || code === void 0 ? void 0 : code.includes('TransientError')) === true;\n}\n/**\n * @private\n * @param {string} code the error to check\n * @returns {boolean} true if the error is a service unavailable error\n */\nfunction _isAuthorizationExpired(code) {\n    return code === 'Neo.ClientError.Security.AuthorizationExpired';\n}\n/**\n * extracts a typed classification from the diagnostic record.\n */\nfunction _extractClassification(diagnosticRecord) {\n    if (diagnosticRecord === undefined || diagnosticRecord._classification === undefined) {\n        return 'UNKNOWN';\n    }\n    return classifications.includes(diagnosticRecord._classification) ? diagnosticRecord === null || diagnosticRecord === void 0 ? void 0 : diagnosticRecord._classification : 'UNKNOWN';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/error.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/gql-constants.js":
/*!*************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/gql-constants.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.rawPolyfilledDiagnosticRecord = void 0;\nexports.rawPolyfilledDiagnosticRecord = {\n    OPERATION: '',\n    OPERATION_CODE: '0',\n    CURRENT_SCHEMA: '/'\n};\nObject.freeze(exports.rawPolyfilledDiagnosticRecord);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2dxbC1jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUNBQXFDO0FBQ3JDLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvZ3FsLWNvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmF3UG9seWZpbGxlZERpYWdub3N0aWNSZWNvcmQgPSB2b2lkIDA7XG5leHBvcnRzLnJhd1BvbHlmaWxsZWREaWFnbm9zdGljUmVjb3JkID0ge1xuICAgIE9QRVJBVElPTjogJycsXG4gICAgT1BFUkFUSU9OX0NPREU6ICcwJyxcbiAgICBDVVJSRU5UX1NDSEVNQTogJy8nXG59O1xuT2JqZWN0LmZyZWV6ZShleHBvcnRzLnJhd1BvbHlmaWxsZWREaWFnbm9zdGljUmVjb3JkKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/gql-constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/graph-types.js":
/*!***********************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/graph-types.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isPathSegment = exports.PathSegment = exports.isPath = exports.Path = exports.isUnboundRelationship = exports.UnboundRelationship = exports.isRelationship = exports.Relationship = exports.isNode = exports.Node = void 0;\nvar json_1 = __webpack_require__(/*! ./json */ \"(ssr)/./node_modules/neo4j-driver-core/lib/json.js\");\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n    value: true,\n    enumerable: false,\n    configurable: false,\n    writable: false\n};\nvar NODE_IDENTIFIER_PROPERTY = '__isNode__';\nvar RELATIONSHIP_IDENTIFIER_PROPERTY = '__isRelationship__';\nvar UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY = '__isUnboundRelationship__';\nvar PATH_IDENTIFIER_PROPERTY = '__isPath__';\nvar PATH_SEGMENT_IDENTIFIER_PROPERTY = '__isPathSegment__';\nfunction hasIdentifierProperty(obj, property) {\n    return obj != null && obj[property] === true;\n}\n/**\n * Class for Node Type.\n */\nvar Node = /** @class */ (function () {\n    /**\n     * @constructor\n     * @protected\n     * @param {NumberOrInteger} identity - Unique identity\n     * @param {Array<string>} labels - Array for all labels\n     * @param {Properties} properties - Map with node properties\n     * @param {string} elementId - Node element identifier\n     */\n    function Node(identity, labels, properties, elementId) {\n        /**\n         * Identity of the node.\n         * @type {NumberOrInteger}\n         * @deprecated use {@link Node#elementId} instead\n         */\n        this.identity = identity;\n        /**\n         * Labels of the node.\n         * @type {string[]}\n         */\n        this.labels = labels;\n        /**\n         * Properties of the node.\n         * @type {Properties}\n         */\n        this.properties = properties;\n        /**\n         * The Node element identifier.\n         * @type {string}\n         */\n        this.elementId = _valueOrGetDefault(elementId, function () { return identity.toString(); });\n    }\n    /**\n     * @ignore\n     */\n    Node.prototype.toString = function () {\n        var s = '(' + this.elementId;\n        for (var i = 0; i < this.labels.length; i++) {\n            s += ':' + this.labels[i];\n        }\n        var keys = Object.keys(this.properties);\n        if (keys.length > 0) {\n            s += ' {';\n            for (var i = 0; i < keys.length; i++) {\n                if (i > 0)\n                    s += ',';\n                s += keys[i] + ':' + (0, json_1.stringify)(this.properties[keys[i]]);\n            }\n            s += '}';\n        }\n        s += ')';\n        return s;\n    };\n    return Node;\n}());\nexports.Node = Node;\nObject.defineProperty(Node.prototype, NODE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Node} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Node}, `false` otherwise.\n */\nfunction isNode(obj) {\n    return hasIdentifierProperty(obj, NODE_IDENTIFIER_PROPERTY);\n}\nexports.isNode = isNode;\n/**\n * Class for Relationship Type.\n */\nvar Relationship = /** @class */ (function () {\n    /**\n     * @constructor\n     * @protected\n     * @param {NumberOrInteger} identity - Unique identity\n     * @param {NumberOrInteger} start - Identity of start Node\n     * @param {NumberOrInteger} end - Identity of end Node\n     * @param {string} type - Relationship type\n     * @param {Properties} properties - Map with relationship properties\n     * @param {string} elementId - Relationship element identifier\n     * @param {string} startNodeElementId - Start Node element identifier\n     * @param {string} endNodeElementId - End Node element identifier\n     */\n    function Relationship(identity, start, end, type, properties, elementId, startNodeElementId, endNodeElementId) {\n        /**\n         * Identity of the relationship.\n         * @type {NumberOrInteger}\n         * @deprecated use {@link Relationship#elementId} instead\n         */\n        this.identity = identity;\n        /**\n         * Identity of the start node.\n         * @type {NumberOrInteger}\n         * @deprecated use {@link Relationship#startNodeElementId} instead\n         */\n        this.start = start;\n        /**\n         * Identity of the end node.\n         * @type {NumberOrInteger}\n         * @deprecated use {@link Relationship#endNodeElementId} instead\n         */\n        this.end = end;\n        /**\n         * Type of the relationship.\n         * @type {string}\n         */\n        this.type = type;\n        /**\n         * Properties of the relationship.\n         * @type {Properties}\n         */\n        this.properties = properties;\n        /**\n         * The Relationship element identifier.\n         * @type {string}\n         */\n        this.elementId = _valueOrGetDefault(elementId, function () { return identity.toString(); });\n        /**\n         * The Start Node element identifier.\n         * @type {string}\n         */\n        this.startNodeElementId = _valueOrGetDefault(startNodeElementId, function () { return start.toString(); });\n        /**\n         * The End Node element identifier.\n         * @type {string}\n         */\n        this.endNodeElementId = _valueOrGetDefault(endNodeElementId, function () { return end.toString(); });\n    }\n    /**\n     * @ignore\n     */\n    Relationship.prototype.toString = function () {\n        var s = '(' + this.startNodeElementId + ')-[:' + this.type;\n        var keys = Object.keys(this.properties);\n        if (keys.length > 0) {\n            s += ' {';\n            for (var i = 0; i < keys.length; i++) {\n                if (i > 0)\n                    s += ',';\n                s += keys[i] + ':' + (0, json_1.stringify)(this.properties[keys[i]]);\n            }\n            s += '}';\n        }\n        s += ']->(' + this.endNodeElementId + ')';\n        return s;\n    };\n    return Relationship;\n}());\nexports.Relationship = Relationship;\nObject.defineProperty(Relationship.prototype, RELATIONSHIP_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Relationship} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Relationship}, `false` otherwise.\n */\nfunction isRelationship(obj) {\n    return hasIdentifierProperty(obj, RELATIONSHIP_IDENTIFIER_PROPERTY);\n}\nexports.isRelationship = isRelationship;\n/**\n * Class for UnboundRelationship Type.\n * @access private\n */\nvar UnboundRelationship = /** @class */ (function () {\n    /**\n     * @constructor\n     * @protected\n     * @param {NumberOrInteger} identity - Unique identity\n     * @param {string} type - Relationship type\n     * @param {Properties} properties - Map with relationship properties\n     * @param {string} elementId - Relationship element identifier\n     */\n    function UnboundRelationship(identity, type, properties, elementId) {\n        /**\n         * Identity of the relationship.\n         * @type {NumberOrInteger}\n         * @deprecated use {@link UnboundRelationship#elementId} instead\n         */\n        this.identity = identity;\n        /**\n         * Type of the relationship.\n         * @type {string}\n         */\n        this.type = type;\n        /**\n         * Properties of the relationship.\n         * @type {Properties}\n         */\n        this.properties = properties;\n        /**\n         * The Relationship element identifier.\n         * @type {string}\n         */\n        this.elementId = _valueOrGetDefault(elementId, function () { return identity.toString(); });\n    }\n    /**\n     * Bind relationship\n     *\n     * @protected\n     * @deprecated use {@link UnboundRelationship#bindTo} instead\n     * @param {Integer} start - Identity of start node\n     * @param {Integer} end - Identity of end node\n     * @return {Relationship} - Created relationship\n     */\n    UnboundRelationship.prototype.bind = function (start, end) {\n        return new Relationship(this.identity, start, end, this.type, this.properties, this.elementId);\n    };\n    /**\n     * Bind relationship\n     *\n     * @protected\n     * @param {Node} start - Start Node\n     * @param {Node} end - End Node\n     * @return {Relationship} - Created relationship\n     */\n    UnboundRelationship.prototype.bindTo = function (start, end) {\n        return new Relationship(this.identity, start.identity, end.identity, this.type, this.properties, this.elementId, start.elementId, end.elementId);\n    };\n    /**\n     * @ignore\n     */\n    UnboundRelationship.prototype.toString = function () {\n        var s = '-[:' + this.type;\n        var keys = Object.keys(this.properties);\n        if (keys.length > 0) {\n            s += ' {';\n            for (var i = 0; i < keys.length; i++) {\n                if (i > 0)\n                    s += ',';\n                s += keys[i] + ':' + (0, json_1.stringify)(this.properties[keys[i]]);\n            }\n            s += '}';\n        }\n        s += ']->';\n        return s;\n    };\n    return UnboundRelationship;\n}());\nexports.UnboundRelationship = UnboundRelationship;\nObject.defineProperty(UnboundRelationship.prototype, UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link UnboundRelationship} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link UnboundRelationship}, `false` otherwise.\n */\nfunction isUnboundRelationship(obj) {\n    return hasIdentifierProperty(obj, UNBOUND_RELATIONSHIP_IDENTIFIER_PROPERTY);\n}\nexports.isUnboundRelationship = isUnboundRelationship;\n/**\n * Class for PathSegment Type.\n */\nvar PathSegment = /** @class */ (function () {\n    /**\n     * @constructor\n     * @protected\n     * @param {Node} start - start node\n     * @param {Relationship} rel - relationship that connects start and end node\n     * @param {Node} end - end node\n     */\n    function PathSegment(start, rel, end) {\n        /**\n         * Start node.\n         * @type {Node}\n         */\n        this.start = start;\n        /**\n         * Relationship.\n         * @type {Relationship}\n         */\n        this.relationship = rel;\n        /**\n         * End node.\n         * @type {Node}\n         */\n        this.end = end;\n    }\n    return PathSegment;\n}());\nexports.PathSegment = PathSegment;\nObject.defineProperty(PathSegment.prototype, PATH_SEGMENT_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link PathSegment} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link PathSegment}, `false` otherwise.\n */\nfunction isPathSegment(obj) {\n    return hasIdentifierProperty(obj, PATH_SEGMENT_IDENTIFIER_PROPERTY);\n}\nexports.isPathSegment = isPathSegment;\n/**\n * Class for Path Type.\n */\nvar Path = /** @class */ (function () {\n    /**\n     * @constructor\n     * @protected\n     * @param {Node} start  - start node\n     * @param {Node} end - end node\n     * @param {Array<PathSegment>} segments - Array of Segments\n     */\n    function Path(start, end, segments) {\n        /**\n         * Start node.\n         * @type {Node}\n         */\n        this.start = start;\n        /**\n         * End node.\n         * @type {Node}\n         */\n        this.end = end;\n        /**\n         * Segments.\n         * @type {Array<PathSegment>}\n         */\n        this.segments = segments;\n        /**\n         * Length of the segments.\n         * @type {Number}\n         */\n        this.length = segments.length;\n    }\n    return Path;\n}());\nexports.Path = Path;\nObject.defineProperty(Path.prototype, PATH_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Path} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Path}, `false` otherwise.\n */\nfunction isPath(obj) {\n    return hasIdentifierProperty(obj, PATH_IDENTIFIER_PROPERTY);\n}\nexports.isPath = isPath;\nfunction _valueOrGetDefault(value, getDefault) {\n    return value === undefined || value === null ? getDefault() : value;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/graph-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EagerResult = exports.Result = exports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.GqlStatusObject = exports.Notification = exports.ServerInfo = exports.queryType = exports.ResultSummary = exports.Record = exports.isPathSegment = exports.PathSegment = exports.isPath = exports.Path = exports.isUnboundRelationship = exports.UnboundRelationship = exports.isRelationship = exports.Relationship = exports.isNode = exports.Node = exports.Time = exports.LocalTime = exports.LocalDateTime = exports.isTime = exports.isLocalTime = exports.isLocalDateTime = exports.isDuration = exports.isDateTime = exports.isDate = exports.Duration = exports.DateTime = exports.Date = exports.Point = exports.isPoint = exports.internal = exports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports.int = exports.Integer = exports.error = exports.isRetriableError = exports.GQLError = exports.newGQLError = exports.Neo4jError = exports.newError = exports.authTokenManagers = void 0;\nexports.resolveCertificateProvider = exports.clientCertificateProviders = exports.notificationFilterMinimumSeverityLevel = exports.notificationFilterDisabledClassification = exports.notificationFilterDisabledCategory = exports.notificationSeverityLevel = exports.notificationClassification = exports.notificationCategory = exports.resultTransformers = exports.routing = exports.staticAuthTokenManager = exports.bookmarkManager = exports.auth = exports.json = exports.driver = exports.types = exports.Driver = exports.Session = exports.TransactionPromise = exports.ManagedTransaction = exports.Transaction = exports.Connection = exports.Releasable = exports.ConnectionProvider = void 0;\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nObject.defineProperty(exports, \"newError\", ({ enumerable: true, get: function () { return error_1.newError; } }));\nObject.defineProperty(exports, \"Neo4jError\", ({ enumerable: true, get: function () { return error_1.Neo4jError; } }));\nObject.defineProperty(exports, \"newGQLError\", ({ enumerable: true, get: function () { return error_1.newGQLError; } }));\nObject.defineProperty(exports, \"GQLError\", ({ enumerable: true, get: function () { return error_1.GQLError; } }));\nObject.defineProperty(exports, \"isRetriableError\", ({ enumerable: true, get: function () { return error_1.isRetriableError; } }));\nvar integer_1 = __importStar(__webpack_require__(/*! ./integer */ \"(ssr)/./node_modules/neo4j-driver-core/lib/integer.js\"));\nexports.Integer = integer_1.default;\nObject.defineProperty(exports, \"int\", ({ enumerable: true, get: function () { return integer_1.int; } }));\nObject.defineProperty(exports, \"isInt\", ({ enumerable: true, get: function () { return integer_1.isInt; } }));\nObject.defineProperty(exports, \"inSafeRange\", ({ enumerable: true, get: function () { return integer_1.inSafeRange; } }));\nObject.defineProperty(exports, \"toNumber\", ({ enumerable: true, get: function () { return integer_1.toNumber; } }));\nObject.defineProperty(exports, \"toString\", ({ enumerable: true, get: function () { return integer_1.toString; } }));\nvar temporal_types_1 = __webpack_require__(/*! ./temporal-types */ \"(ssr)/./node_modules/neo4j-driver-core/lib/temporal-types.js\");\nObject.defineProperty(exports, \"Date\", ({ enumerable: true, get: function () { return temporal_types_1.Date; } }));\nObject.defineProperty(exports, \"DateTime\", ({ enumerable: true, get: function () { return temporal_types_1.DateTime; } }));\nObject.defineProperty(exports, \"Duration\", ({ enumerable: true, get: function () { return temporal_types_1.Duration; } }));\nObject.defineProperty(exports, \"isDate\", ({ enumerable: true, get: function () { return temporal_types_1.isDate; } }));\nObject.defineProperty(exports, \"isDateTime\", ({ enumerable: true, get: function () { return temporal_types_1.isDateTime; } }));\nObject.defineProperty(exports, \"isDuration\", ({ enumerable: true, get: function () { return temporal_types_1.isDuration; } }));\nObject.defineProperty(exports, \"isLocalDateTime\", ({ enumerable: true, get: function () { return temporal_types_1.isLocalDateTime; } }));\nObject.defineProperty(exports, \"isLocalTime\", ({ enumerable: true, get: function () { return temporal_types_1.isLocalTime; } }));\nObject.defineProperty(exports, \"isTime\", ({ enumerable: true, get: function () { return temporal_types_1.isTime; } }));\nObject.defineProperty(exports, \"LocalDateTime\", ({ enumerable: true, get: function () { return temporal_types_1.LocalDateTime; } }));\nObject.defineProperty(exports, \"LocalTime\", ({ enumerable: true, get: function () { return temporal_types_1.LocalTime; } }));\nObject.defineProperty(exports, \"Time\", ({ enumerable: true, get: function () { return temporal_types_1.Time; } }));\nvar graph_types_1 = __webpack_require__(/*! ./graph-types */ \"(ssr)/./node_modules/neo4j-driver-core/lib/graph-types.js\");\nObject.defineProperty(exports, \"Node\", ({ enumerable: true, get: function () { return graph_types_1.Node; } }));\nObject.defineProperty(exports, \"isNode\", ({ enumerable: true, get: function () { return graph_types_1.isNode; } }));\nObject.defineProperty(exports, \"Relationship\", ({ enumerable: true, get: function () { return graph_types_1.Relationship; } }));\nObject.defineProperty(exports, \"isRelationship\", ({ enumerable: true, get: function () { return graph_types_1.isRelationship; } }));\nObject.defineProperty(exports, \"UnboundRelationship\", ({ enumerable: true, get: function () { return graph_types_1.UnboundRelationship; } }));\nObject.defineProperty(exports, \"isUnboundRelationship\", ({ enumerable: true, get: function () { return graph_types_1.isUnboundRelationship; } }));\nObject.defineProperty(exports, \"Path\", ({ enumerable: true, get: function () { return graph_types_1.Path; } }));\nObject.defineProperty(exports, \"isPath\", ({ enumerable: true, get: function () { return graph_types_1.isPath; } }));\nObject.defineProperty(exports, \"PathSegment\", ({ enumerable: true, get: function () { return graph_types_1.PathSegment; } }));\nObject.defineProperty(exports, \"isPathSegment\", ({ enumerable: true, get: function () { return graph_types_1.isPathSegment; } }));\nvar record_1 = __importDefault(__webpack_require__(/*! ./record */ \"(ssr)/./node_modules/neo4j-driver-core/lib/record.js\"));\nexports.Record = record_1.default;\nvar spatial_types_1 = __webpack_require__(/*! ./spatial-types */ \"(ssr)/./node_modules/neo4j-driver-core/lib/spatial-types.js\");\nObject.defineProperty(exports, \"isPoint\", ({ enumerable: true, get: function () { return spatial_types_1.isPoint; } }));\nObject.defineProperty(exports, \"Point\", ({ enumerable: true, get: function () { return spatial_types_1.Point; } }));\nvar result_summary_1 = __importStar(__webpack_require__(/*! ./result-summary */ \"(ssr)/./node_modules/neo4j-driver-core/lib/result-summary.js\"));\nexports.ResultSummary = result_summary_1.default;\nObject.defineProperty(exports, \"queryType\", ({ enumerable: true, get: function () { return result_summary_1.queryType; } }));\nObject.defineProperty(exports, \"ServerInfo\", ({ enumerable: true, get: function () { return result_summary_1.ServerInfo; } }));\nObject.defineProperty(exports, \"Plan\", ({ enumerable: true, get: function () { return result_summary_1.Plan; } }));\nObject.defineProperty(exports, \"ProfiledPlan\", ({ enumerable: true, get: function () { return result_summary_1.ProfiledPlan; } }));\nObject.defineProperty(exports, \"QueryStatistics\", ({ enumerable: true, get: function () { return result_summary_1.QueryStatistics; } }));\nObject.defineProperty(exports, \"Stats\", ({ enumerable: true, get: function () { return result_summary_1.Stats; } }));\nvar notification_1 = __importStar(__webpack_require__(/*! ./notification */ \"(ssr)/./node_modules/neo4j-driver-core/lib/notification.js\"));\nexports.Notification = notification_1.default;\nObject.defineProperty(exports, \"GqlStatusObject\", ({ enumerable: true, get: function () { return notification_1.GqlStatusObject; } }));\nObject.defineProperty(exports, \"notificationCategory\", ({ enumerable: true, get: function () { return notification_1.notificationCategory; } }));\nObject.defineProperty(exports, \"notificationClassification\", ({ enumerable: true, get: function () { return notification_1.notificationClassification; } }));\nObject.defineProperty(exports, \"notificationSeverityLevel\", ({ enumerable: true, get: function () { return notification_1.notificationSeverityLevel; } }));\nvar notification_filter_1 = __webpack_require__(/*! ./notification-filter */ \"(ssr)/./node_modules/neo4j-driver-core/lib/notification-filter.js\");\nObject.defineProperty(exports, \"notificationFilterDisabledCategory\", ({ enumerable: true, get: function () { return notification_filter_1.notificationFilterDisabledCategory; } }));\nObject.defineProperty(exports, \"notificationFilterDisabledClassification\", ({ enumerable: true, get: function () { return notification_filter_1.notificationFilterDisabledClassification; } }));\nObject.defineProperty(exports, \"notificationFilterMinimumSeverityLevel\", ({ enumerable: true, get: function () { return notification_filter_1.notificationFilterMinimumSeverityLevel; } }));\nvar result_1 = __importDefault(__webpack_require__(/*! ./result */ \"(ssr)/./node_modules/neo4j-driver-core/lib/result.js\"));\nexports.Result = result_1.default;\nvar result_eager_1 = __importDefault(__webpack_require__(/*! ./result-eager */ \"(ssr)/./node_modules/neo4j-driver-core/lib/result-eager.js\"));\nexports.EagerResult = result_eager_1.default;\nvar connection_provider_1 = __importStar(__webpack_require__(/*! ./connection-provider */ \"(ssr)/./node_modules/neo4j-driver-core/lib/connection-provider.js\"));\nexports.ConnectionProvider = connection_provider_1.default;\nObject.defineProperty(exports, \"Releasable\", ({ enumerable: true, get: function () { return connection_provider_1.Releasable; } }));\nvar connection_1 = __importDefault(__webpack_require__(/*! ./connection */ \"(ssr)/./node_modules/neo4j-driver-core/lib/connection.js\"));\nexports.Connection = connection_1.default;\nvar transaction_1 = __importDefault(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/neo4j-driver-core/lib/transaction.js\"));\nexports.Transaction = transaction_1.default;\nvar transaction_managed_1 = __importDefault(__webpack_require__(/*! ./transaction-managed */ \"(ssr)/./node_modules/neo4j-driver-core/lib/transaction-managed.js\"));\nexports.ManagedTransaction = transaction_managed_1.default;\nvar transaction_promise_1 = __importDefault(__webpack_require__(/*! ./transaction-promise */ \"(ssr)/./node_modules/neo4j-driver-core/lib/transaction-promise.js\"));\nexports.TransactionPromise = transaction_promise_1.default;\nvar session_1 = __importDefault(__webpack_require__(/*! ./session */ \"(ssr)/./node_modules/neo4j-driver-core/lib/session.js\"));\nexports.Session = session_1.default;\nvar driver_1 = __importStar(__webpack_require__(/*! ./driver */ \"(ssr)/./node_modules/neo4j-driver-core/lib/driver.js\")), driver = driver_1;\nexports.Driver = driver_1.default;\nexports.driver = driver;\nvar auth_1 = __importDefault(__webpack_require__(/*! ./auth */ \"(ssr)/./node_modules/neo4j-driver-core/lib/auth.js\"));\nexports.auth = auth_1.default;\nvar bookmark_manager_1 = __webpack_require__(/*! ./bookmark-manager */ \"(ssr)/./node_modules/neo4j-driver-core/lib/bookmark-manager.js\");\nObject.defineProperty(exports, \"bookmarkManager\", ({ enumerable: true, get: function () { return bookmark_manager_1.bookmarkManager; } }));\nvar auth_token_manager_1 = __webpack_require__(/*! ./auth-token-manager */ \"(ssr)/./node_modules/neo4j-driver-core/lib/auth-token-manager.js\");\nObject.defineProperty(exports, \"authTokenManagers\", ({ enumerable: true, get: function () { return auth_token_manager_1.authTokenManagers; } }));\nObject.defineProperty(exports, \"staticAuthTokenManager\", ({ enumerable: true, get: function () { return auth_token_manager_1.staticAuthTokenManager; } }));\nvar driver_2 = __webpack_require__(/*! ./driver */ \"(ssr)/./node_modules/neo4j-driver-core/lib/driver.js\");\nObject.defineProperty(exports, \"routing\", ({ enumerable: true, get: function () { return driver_2.routing; } }));\nvar types = __importStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/neo4j-driver-core/lib/types.js\"));\nexports.types = types;\nvar json = __importStar(__webpack_require__(/*! ./json */ \"(ssr)/./node_modules/neo4j-driver-core/lib/json.js\"));\nexports.json = json;\nvar result_transformers_1 = __importDefault(__webpack_require__(/*! ./result-transformers */ \"(ssr)/./node_modules/neo4j-driver-core/lib/result-transformers.js\"));\nexports.resultTransformers = result_transformers_1.default;\nvar client_certificate_1 = __webpack_require__(/*! ./client-certificate */ \"(ssr)/./node_modules/neo4j-driver-core/lib/client-certificate.js\");\nObject.defineProperty(exports, \"clientCertificateProviders\", ({ enumerable: true, get: function () { return client_certificate_1.clientCertificateProviders; } }));\nObject.defineProperty(exports, \"resolveCertificateProvider\", ({ enumerable: true, get: function () { return client_certificate_1.resolveCertificateProvider; } }));\nvar internal = __importStar(__webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/index.js\")); // todo: removed afterwards\nexports.internal = internal;\n/**\n * Object containing string constants representing predefined {@link Neo4jError} codes.\n */\nvar error = {\n    SERVICE_UNAVAILABLE: error_1.SERVICE_UNAVAILABLE,\n    SESSION_EXPIRED: error_1.SESSION_EXPIRED,\n    PROTOCOL_ERROR: error_1.PROTOCOL_ERROR\n};\nexports.error = error;\n/**\n * @private\n */\nvar forExport = {\n    authTokenManagers: auth_token_manager_1.authTokenManagers,\n    newError: error_1.newError,\n    Neo4jError: error_1.Neo4jError,\n    newGQLError: error_1.newGQLError,\n    GQLError: error_1.GQLError,\n    isRetriableError: error_1.isRetriableError,\n    error: error,\n    Integer: integer_1.default,\n    int: integer_1.int,\n    isInt: integer_1.isInt,\n    inSafeRange: integer_1.inSafeRange,\n    toNumber: integer_1.toNumber,\n    toString: integer_1.toString,\n    internal: internal,\n    isPoint: spatial_types_1.isPoint,\n    Point: spatial_types_1.Point,\n    Date: temporal_types_1.Date,\n    DateTime: temporal_types_1.DateTime,\n    Duration: temporal_types_1.Duration,\n    isDate: temporal_types_1.isDate,\n    isDateTime: temporal_types_1.isDateTime,\n    isDuration: temporal_types_1.isDuration,\n    isLocalDateTime: temporal_types_1.isLocalDateTime,\n    isLocalTime: temporal_types_1.isLocalTime,\n    isTime: temporal_types_1.isTime,\n    LocalDateTime: temporal_types_1.LocalDateTime,\n    LocalTime: temporal_types_1.LocalTime,\n    Time: temporal_types_1.Time,\n    Node: graph_types_1.Node,\n    isNode: graph_types_1.isNode,\n    Relationship: graph_types_1.Relationship,\n    isRelationship: graph_types_1.isRelationship,\n    UnboundRelationship: graph_types_1.UnboundRelationship,\n    isUnboundRelationship: graph_types_1.isUnboundRelationship,\n    Path: graph_types_1.Path,\n    isPath: graph_types_1.isPath,\n    PathSegment: graph_types_1.PathSegment,\n    isPathSegment: graph_types_1.isPathSegment,\n    Record: record_1.default,\n    ResultSummary: result_summary_1.default,\n    queryType: result_summary_1.queryType,\n    ServerInfo: result_summary_1.ServerInfo,\n    Notification: notification_1.default,\n    GqlStatusObject: notification_1.GqlStatusObject,\n    Plan: result_summary_1.Plan,\n    ProfiledPlan: result_summary_1.ProfiledPlan,\n    QueryStatistics: result_summary_1.QueryStatistics,\n    Stats: result_summary_1.Stats,\n    Result: result_1.default,\n    EagerResult: result_eager_1.default,\n    Transaction: transaction_1.default,\n    ManagedTransaction: transaction_managed_1.default,\n    TransactionPromise: transaction_promise_1.default,\n    Session: session_1.default,\n    Driver: driver_1.default,\n    Connection: connection_1.default,\n    Releasable: connection_provider_1.Releasable,\n    types: types,\n    driver: driver,\n    json: json,\n    auth: auth_1.default,\n    bookmarkManager: bookmark_manager_1.bookmarkManager,\n    routing: driver_2.routing,\n    resultTransformers: result_transformers_1.default,\n    notificationCategory: notification_1.notificationCategory,\n    notificationClassification: notification_1.notificationClassification,\n    notificationSeverityLevel: notification_1.notificationSeverityLevel,\n    notificationFilterDisabledCategory: notification_filter_1.notificationFilterDisabledCategory,\n    notificationFilterDisabledClassification: notification_filter_1.notificationFilterDisabledClassification,\n    notificationFilterMinimumSeverityLevel: notification_filter_1.notificationFilterMinimumSeverityLevel,\n    clientCertificateProviders: client_certificate_1.clientCertificateProviders,\n    resolveCertificateProvider: client_certificate_1.resolveCertificateProvider\n};\nexports[\"default\"] = forExport;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/integer.js":
/*!*******************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/integer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toString = exports.toNumber = exports.inSafeRange = exports.isInt = exports.int = void 0;\n// 64-bit Integer library, originally from Long.js by dcodeIO\n// https://github.com/dcodeIO/Long.js\n// License Apache 2\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\n/**\n * A cache of the Integer representations of small integer values.\n * @type {!Object}\n * @inner\n * @private\n */\n// eslint-disable-next-line no-use-before-define\nvar INT_CACHE = new Map();\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n * See exported functions for more convenient ways of operating integers.\n * Use `int()` function to create new integers, `isInt()` to check if given object is integer,\n * `inSafeRange()` to check if it is safe to convert given value to native number,\n * `toNumber()` and `toString()` to convert given integer to number or string respectively.\n * @access public\n * @exports Integer\n * @class A Integer class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n *\n * @constructor\n */\nvar Integer = /** @class */ (function () {\n    function Integer(low, high) {\n        /**\n         * The low 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.low = low !== null && low !== void 0 ? low : 0;\n        /**\n         * The high 32 bits as a signed value.\n         * @type {number}\n         * @expose\n         */\n        this.high = high !== null && high !== void 0 ? high : 0;\n    }\n    // The internal representation of an Integer is the two given signed, 32-bit values.\n    // We use 32-bit pieces because these are the size of integers on which\n    // JavaScript performs bit-operations.  For operations like addition and\n    // multiplication, we split each number into 16 bit pieces, which can easily be\n    // multiplied within JavaScript's floating-point representation without overflow\n    // or change in sign.\n    //\n    // In the algorithms below, we frequently reduce the negative case to the\n    // positive case by negating the input(s) and then post-processing the result.\n    // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n    // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n    // a positive number, it overflows back into a negative).  Not handling this\n    // case would often result in infinite recursion.\n    //\n    // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n    // methods on which they depend.\n    Integer.prototype.inSafeRange = function () {\n        return (this.greaterThanOrEqual(Integer.MIN_SAFE_VALUE) &&\n            this.lessThanOrEqual(Integer.MAX_SAFE_VALUE));\n    };\n    /**\n     * Converts the Integer to an exact javascript Number, assuming it is a 32 bit integer.\n     * @returns {number}\n     * @expose\n     */\n    Integer.prototype.toInt = function () {\n        return this.low;\n    };\n    /**\n     * Converts the Integer to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n     * @returns {number}\n     * @expose\n     */\n    Integer.prototype.toNumber = function () {\n        return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n    };\n    /**\n     * Converts the Integer to a BigInt representation of this value\n     * @returns {bigint}\n     * @expose\n     */\n    Integer.prototype.toBigInt = function () {\n        if (this.isZero()) {\n            return BigInt(0);\n        }\n        else if (this.isPositive()) {\n            return (BigInt(this.high >>> 0) * BigInt(TWO_PWR_32_DBL) +\n                BigInt(this.low >>> 0));\n        }\n        else {\n            var negate = this.negate();\n            return (BigInt(-1) *\n                (BigInt(negate.high >>> 0) * BigInt(TWO_PWR_32_DBL) +\n                    BigInt(negate.low >>> 0)));\n        }\n    };\n    /**\n     * Converts the Integer to native number or -Infinity/+Infinity when it does not fit.\n     * @return {number}\n     * @package\n     */\n    Integer.prototype.toNumberOrInfinity = function () {\n        if (this.lessThan(Integer.MIN_SAFE_VALUE)) {\n            return Number.NEGATIVE_INFINITY;\n        }\n        else if (this.greaterThan(Integer.MAX_SAFE_VALUE)) {\n            return Number.POSITIVE_INFINITY;\n        }\n        else {\n            return this.toNumber();\n        }\n    };\n    /**\n     * Converts the Integer to a string written in the specified radix.\n     * @param {number=} radix Radix (2-36), defaults to 10\n     * @returns {string}\n     * @override\n     * @throws {RangeError} If `radix` is out of range\n     * @expose\n     */\n    Integer.prototype.toString = function (radix) {\n        radix = radix !== null && radix !== void 0 ? radix : 10;\n        if (radix < 2 || radix > 36) {\n            throw RangeError('radix out of range: ' + radix.toString());\n        }\n        if (this.isZero()) {\n            return '0';\n        }\n        var rem;\n        if (this.isNegative()) {\n            if (this.equals(Integer.MIN_VALUE)) {\n                // We need to change the Integer value before it can be negated, so we remove\n                // the bottom-most digit in this base and then recurse to do the rest.\n                var radixInteger = Integer.fromNumber(radix);\n                var div = this.div(radixInteger);\n                rem = div.multiply(radixInteger).subtract(this);\n                return div.toString(radix) + rem.toInt().toString(radix);\n            }\n            else {\n                return '-' + this.negate().toString(radix);\n            }\n        }\n        // Do several (6) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Integer.fromNumber(Math.pow(radix, 6));\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        rem = this;\n        var result = '';\n        while (true) {\n            var remDiv = rem.div(radixToPower);\n            var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;\n            var digits = intval.toString(radix);\n            rem = remDiv;\n            if (rem.isZero()) {\n                return digits + result;\n            }\n            else {\n                while (digits.length < 6) {\n                    digits = '0' + digits;\n                }\n                result = '' + digits + result;\n            }\n        }\n    };\n    /**\n     * Converts the Integer to it primitive value.\n     *\n     * @since 5.4.0\n     * @returns {bigint}\n     *\n     * @see {@link Integer#toBigInt}\n     * @see {@link Integer#toInt}\n     * @see {@link Integer#toNumber}\n     * @see {@link Integer#toString}\n     */\n    Integer.prototype.valueOf = function () {\n        return this.toBigInt();\n    };\n    /**\n     * Gets the high 32 bits as a signed integer.\n     * @returns {number} Signed high bits\n     * @expose\n     */\n    Integer.prototype.getHighBits = function () {\n        return this.high;\n    };\n    /**\n     * Gets the low 32 bits as a signed integer.\n     * @returns {number} Signed low bits\n     * @expose\n     */\n    Integer.prototype.getLowBits = function () {\n        return this.low;\n    };\n    /**\n     * Gets the number of bits needed to represent the absolute value of this Integer.\n     * @returns {number}\n     * @expose\n     */\n    Integer.prototype.getNumBitsAbs = function () {\n        if (this.isNegative()) {\n            return this.equals(Integer.MIN_VALUE) ? 64 : this.negate().getNumBitsAbs();\n        }\n        var val = this.high !== 0 ? this.high : this.low;\n        var bit = 0;\n        for (bit = 31; bit > 0; bit--) {\n            if ((val & (1 << bit)) !== 0) {\n                break;\n            }\n        }\n        return this.high !== 0 ? bit + 33 : bit + 1;\n    };\n    /**\n     * Tests if this Integer's value equals zero.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isZero = function () {\n        return this.high === 0 && this.low === 0;\n    };\n    /**\n     * Tests if this Integer's value is negative.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isNegative = function () {\n        return this.high < 0;\n    };\n    /**\n     * Tests if this Integer's value is positive.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isPositive = function () {\n        return this.high >= 0;\n    };\n    /**\n     * Tests if this Integer's value is odd.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isOdd = function () {\n        return (this.low & 1) === 1;\n    };\n    /**\n     * Tests if this Integer's value is even.\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.isEven = function () {\n        return (this.low & 1) === 0;\n    };\n    /**\n     * Tests if this Integer's value equals the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.equals = function (other) {\n        var theOther = Integer.fromValue(other);\n        return this.high === theOther.high && this.low === theOther.low;\n    };\n    /**\n     * Tests if this Integer's value differs from the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.notEquals = function (other) {\n        return !this.equals(/* validates */ other);\n    };\n    /**\n     * Tests if this Integer's value is less than the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.lessThan = function (other) {\n        return this.compare(/* validates */ other) < 0;\n    };\n    /**\n     * Tests if this Integer's value is less than or equal the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.lessThanOrEqual = function (other) {\n        return this.compare(/* validates */ other) <= 0;\n    };\n    /**\n     * Tests if this Integer's value is greater than the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.greaterThan = function (other) {\n        return this.compare(/* validates */ other) > 0;\n    };\n    /**\n     * Tests if this Integer's value is greater than or equal the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.prototype.greaterThanOrEqual = function (other) {\n        return this.compare(/* validates */ other) >= 0;\n    };\n    /**\n     * Compares this Integer's value with the specified's.\n     * @param {!Integer|number|string} other Other value\n     * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n     *  if the given one is greater\n     * @expose\n     */\n    Integer.prototype.compare = function (other) {\n        var theOther = Integer.fromValue(other);\n        if (this.equals(theOther)) {\n            return 0;\n        }\n        var thisNeg = this.isNegative();\n        var otherNeg = theOther.isNegative();\n        if (thisNeg && !otherNeg) {\n            return -1;\n        }\n        if (!thisNeg && otherNeg) {\n            return 1;\n        }\n        // At this point the sign bits are the same\n        return this.subtract(theOther).isNegative() ? -1 : 1;\n    };\n    /**\n     * Negates this Integer's value.\n     * @returns {!Integer} Negated Integer\n     * @expose\n     */\n    Integer.prototype.negate = function () {\n        if (this.equals(Integer.MIN_VALUE)) {\n            return Integer.MIN_VALUE;\n        }\n        return this.not().add(Integer.ONE);\n    };\n    /**\n     * Returns the sum of this and the specified Integer.\n     * @param {!Integer|number|string} addend Addend\n     * @returns {!Integer} Sum\n     * @expose\n     */\n    Integer.prototype.add = function (addend) {\n        var theAddend = Integer.fromValue(addend);\n        // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xffff;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xffff;\n        var b48 = theAddend.high >>> 16;\n        var b32 = theAddend.high & 0xffff;\n        var b16 = theAddend.low >>> 16;\n        var b00 = theAddend.low & 0xffff;\n        var c48 = 0;\n        var c32 = 0;\n        var c16 = 0;\n        var c00 = 0;\n        c00 += a00 + b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 + b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 + b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 + b48;\n        c48 &= 0xffff;\n        return Integer.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n    };\n    /**\n     * Returns the difference of this and the specified Integer.\n     * @param {!Integer|number|string} subtrahend Subtrahend\n     * @returns {!Integer} Difference\n     * @expose\n     */\n    Integer.prototype.subtract = function (subtrahend) {\n        var theSubtrahend = Integer.fromValue(subtrahend);\n        return this.add(theSubtrahend.negate());\n    };\n    /**\n     * Returns the product of this and the specified Integer.\n     * @param {!Integer|number|string} multiplier Multiplier\n     * @returns {!Integer} Product\n     * @expose\n     */\n    Integer.prototype.multiply = function (multiplier) {\n        if (this.isZero()) {\n            return Integer.ZERO;\n        }\n        var theMultiplier = Integer.fromValue(multiplier);\n        if (theMultiplier.isZero()) {\n            return Integer.ZERO;\n        }\n        if (this.equals(Integer.MIN_VALUE)) {\n            return theMultiplier.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n        }\n        if (theMultiplier.equals(Integer.MIN_VALUE)) {\n            return this.isOdd() ? Integer.MIN_VALUE : Integer.ZERO;\n        }\n        if (this.isNegative()) {\n            if (theMultiplier.isNegative()) {\n                return this.negate().multiply(theMultiplier.negate());\n            }\n            else {\n                return this.negate()\n                    .multiply(theMultiplier)\n                    .negate();\n            }\n        }\n        else if (theMultiplier.isNegative()) {\n            return this.multiply(theMultiplier.negate()).negate();\n        }\n        // If both longs are small, use float multiplication\n        if (this.lessThan(TWO_PWR_24) && theMultiplier.lessThan(TWO_PWR_24)) {\n            return Integer.fromNumber(this.toNumber() * theMultiplier.toNumber());\n        }\n        // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n        // We can skip products that would overflow.\n        var a48 = this.high >>> 16;\n        var a32 = this.high & 0xffff;\n        var a16 = this.low >>> 16;\n        var a00 = this.low & 0xffff;\n        var b48 = theMultiplier.high >>> 16;\n        var b32 = theMultiplier.high & 0xffff;\n        var b16 = theMultiplier.low >>> 16;\n        var b00 = theMultiplier.low & 0xffff;\n        var c48 = 0;\n        var c32 = 0;\n        var c16 = 0;\n        var c00 = 0;\n        c00 += a00 * b00;\n        c16 += c00 >>> 16;\n        c00 &= 0xffff;\n        c16 += a16 * b00;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c16 += a00 * b16;\n        c32 += c16 >>> 16;\n        c16 &= 0xffff;\n        c32 += a32 * b00;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a16 * b16;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c32 += a00 * b32;\n        c48 += c32 >>> 16;\n        c32 &= 0xffff;\n        c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n        c48 &= 0xffff;\n        return Integer.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n    };\n    /**\n     * Returns this Integer divided by the specified.\n     * @param {!Integer|number|string} divisor Divisor\n     * @returns {!Integer} Quotient\n     * @expose\n     */\n    Integer.prototype.div = function (divisor) {\n        var theDivisor = Integer.fromValue(divisor);\n        if (theDivisor.isZero()) {\n            throw (0, error_1.newError)('division by zero');\n        }\n        if (this.isZero()) {\n            return Integer.ZERO;\n        }\n        var approx, rem, res;\n        if (this.equals(Integer.MIN_VALUE)) {\n            if (theDivisor.equals(Integer.ONE) ||\n                theDivisor.equals(Integer.NEG_ONE)) {\n                return Integer.MIN_VALUE;\n            }\n            if (theDivisor.equals(Integer.MIN_VALUE)) {\n                return Integer.ONE;\n            }\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = this.shiftRight(1);\n                approx = halfThis.div(theDivisor).shiftLeft(1);\n                if (approx.equals(Integer.ZERO)) {\n                    return theDivisor.isNegative() ? Integer.ONE : Integer.NEG_ONE;\n                }\n                else {\n                    rem = this.subtract(theDivisor.multiply(approx));\n                    res = approx.add(rem.div(theDivisor));\n                    return res;\n                }\n            }\n        }\n        else if (theDivisor.equals(Integer.MIN_VALUE)) {\n            return Integer.ZERO;\n        }\n        if (this.isNegative()) {\n            if (theDivisor.isNegative()) {\n                return this.negate().div(theDivisor.negate());\n            }\n            return this.negate()\n                .div(theDivisor)\n                .negate();\n        }\n        else if (theDivisor.isNegative()) {\n            return this.div(theDivisor.negate()).negate();\n        }\n        // Repeat the following until the remainder is less than other:  find a\n        // floating-point that approximates remainder / other *from below*, add this\n        // into the result, and subtract it from the remainder.  It is critical that\n        // the approximate value is less than or equal to the real value so that the\n        // remainder never becomes negative.\n        res = Integer.ZERO;\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        rem = this;\n        while (rem.greaterThanOrEqual(theDivisor)) {\n            // Approximate the result of division. This may be a little greater or\n            // smaller than the actual value.\n            approx = Math.max(1, Math.floor(rem.toNumber() / theDivisor.toNumber()));\n            // We will tweak the approximate result by changing it in the 48-th digit or\n            // the smallest non-fractional digit, whichever is larger.\n            var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n            var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);\n            // Decrease the approximation until it is smaller than the remainder.  Note\n            // that if it is too large, the product overflows and is negative.\n            var approxRes = Integer.fromNumber(approx);\n            var approxRem = approxRes.multiply(theDivisor);\n            while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n                approx -= delta;\n                approxRes = Integer.fromNumber(approx);\n                approxRem = approxRes.multiply(theDivisor);\n            }\n            // We know the answer can't be zero... and actually, zero would cause\n            // infinite recursion since we would make no progress.\n            if (approxRes.isZero()) {\n                approxRes = Integer.ONE;\n            }\n            res = res.add(approxRes);\n            rem = rem.subtract(approxRem);\n        }\n        return res;\n    };\n    /**\n     * Returns this Integer modulo the specified.\n     * @param {!Integer|number|string} divisor Divisor\n     * @returns {!Integer} Remainder\n     * @expose\n     */\n    Integer.prototype.modulo = function (divisor) {\n        var theDivisor = Integer.fromValue(divisor);\n        return this.subtract(this.div(theDivisor).multiply(theDivisor));\n    };\n    /**\n     * Returns the bitwise NOT of this Integer.\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.not = function () {\n        return Integer.fromBits(~this.low, ~this.high);\n    };\n    /**\n     * Returns the bitwise AND of this Integer and the specified.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.and = function (other) {\n        var theOther = Integer.fromValue(other);\n        return Integer.fromBits(this.low & theOther.low, this.high & theOther.high);\n    };\n    /**\n     * Returns the bitwise OR of this Integer and the specified.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.or = function (other) {\n        var theOther = Integer.fromValue(other);\n        return Integer.fromBits(this.low | theOther.low, this.high | theOther.high);\n    };\n    /**\n     * Returns the bitwise XOR of this Integer and the given one.\n     * @param {!Integer|number|string} other Other Integer\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.prototype.xor = function (other) {\n        var theOther = Integer.fromValue(other);\n        return Integer.fromBits(this.low ^ theOther.low, this.high ^ theOther.high);\n    };\n    /**\n     * Returns this Integer with bits shifted to the left by the given amount.\n     * @param {number|!Integer} numBits Number of bits\n     * @returns {!Integer} Shifted Integer\n     * @expose\n     */\n    Integer.prototype.shiftLeft = function (numBits) {\n        var bitsCount = Integer.toNumber(numBits);\n        if ((bitsCount &= 63) === 0) {\n            return Integer.ZERO;\n        }\n        else if (bitsCount < 32) {\n            return Integer.fromBits(this.low << bitsCount, (this.high << bitsCount) | (this.low >>> (32 - bitsCount)));\n        }\n        else {\n            return Integer.fromBits(0, this.low << (bitsCount - 32));\n        }\n    };\n    /**\n     * Returns this Integer with bits arithmetically shifted to the right by the given amount.\n     * @param {number|!Integer} numBits Number of bits\n     * @returns {!Integer} Shifted Integer\n     * @expose\n     */\n    Integer.prototype.shiftRight = function (numBits) {\n        var bitsCount = Integer.toNumber(numBits);\n        var numBitNum = Integer.toNumber(numBits);\n        if ((bitsCount &= 63) === 0) {\n            return Integer.ZERO;\n        }\n        else if (numBitNum < 32) {\n            return Integer.fromBits((this.low >>> bitsCount) | (this.high << (32 - bitsCount)), this.high >> bitsCount);\n        }\n        else {\n            return Integer.fromBits(this.high >> (bitsCount - 32), this.high >= 0 ? 0 : -1);\n        }\n    };\n    /**\n     * Tests if the specified object is a Integer.\n     * @access private\n     * @param {*} obj Object\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.isInteger = function (obj) {\n        return (obj === null || obj === void 0 ? void 0 : obj.__isInteger__) === true;\n    };\n    /**\n     * Returns a Integer representing the given 32 bit integer value.\n     * @access private\n     * @param {number} value The 32 bit integer in question\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromInt = function (value) {\n        var cachedObj;\n        value = value | 0;\n        if (value >= -128 && value < 128) {\n            cachedObj = INT_CACHE.get(value);\n            if (cachedObj != null) {\n                return cachedObj;\n            }\n        }\n        var obj = new Integer(value, value < 0 ? -1 : 0);\n        if (value >= -128 && value < 128) {\n            INT_CACHE.set(value, obj);\n        }\n        return obj;\n    };\n    /**\n     * Returns a Integer representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n     *  assumed to use 32 bits.\n     * @access private\n     * @param {number} lowBits The low 32 bits\n     * @param {number} highBits The high 32 bits\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromBits = function (lowBits, highBits) {\n        return new Integer(lowBits, highBits);\n    };\n    /**\n     * Returns a Integer representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n     * @access private\n     * @param {number} value The number in question\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromNumber = function (value) {\n        if (isNaN(value) || !isFinite(value)) {\n            return Integer.ZERO;\n        }\n        if (value <= -TWO_PWR_63_DBL) {\n            return Integer.MIN_VALUE;\n        }\n        if (value + 1 >= TWO_PWR_63_DBL) {\n            return Integer.MAX_VALUE;\n        }\n        if (value < 0) {\n            return Integer.fromNumber(-value).negate();\n        }\n        return new Integer(value % TWO_PWR_32_DBL | 0, (value / TWO_PWR_32_DBL) | 0);\n    };\n    /**\n     * Returns a Integer representation of the given string, written using the specified radix.\n     * @access private\n     * @param {string} str The textual representation of the Integer\n     * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n     * @param {Object} [opts={}] Configuration options\n     * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.\n     * @returns {!Integer} The corresponding Integer value\n     * @expose\n     */\n    Integer.fromString = function (str, radix, _a) {\n        var _b = _a === void 0 ? {} : _a, strictStringValidation = _b.strictStringValidation;\n        if (str.length === 0) {\n            throw (0, error_1.newError)('number format error: empty string');\n        }\n        if (str === 'NaN' ||\n            str === 'Infinity' ||\n            str === '+Infinity' ||\n            str === '-Infinity') {\n            return Integer.ZERO;\n        }\n        radix = radix !== null && radix !== void 0 ? radix : 10;\n        if (radix < 2 || radix > 36) {\n            throw (0, error_1.newError)('radix out of range: ' + radix.toString());\n        }\n        var p;\n        if ((p = str.indexOf('-')) > 0) {\n            throw (0, error_1.newError)('number format error: interior \"-\" character: ' + str);\n        }\n        else if (p === 0) {\n            return Integer.fromString(str.substring(1), radix).negate();\n        }\n        // Do several (8) digits each time through the loop, so as to\n        // minimize the calls to the very expensive emulated div.\n        var radixToPower = Integer.fromNumber(Math.pow(radix, 8));\n        var result = Integer.ZERO;\n        for (var i = 0; i < str.length; i += 8) {\n            var size = Math.min(8, str.length - i);\n            var valueString = str.substring(i, i + size);\n            var value = parseInt(valueString, radix);\n            if (strictStringValidation === true && !_isValidNumberFromString(valueString, value, radix)) {\n                throw (0, error_1.newError)(\"number format error: \\\"\".concat(valueString, \"\\\" is NaN in radix \").concat(radix, \": \").concat(str));\n            }\n            if (size < 8) {\n                var power = Integer.fromNumber(Math.pow(radix, size));\n                result = result.multiply(power).add(Integer.fromNumber(value));\n            }\n            else {\n                result = result.multiply(radixToPower);\n                result = result.add(Integer.fromNumber(value));\n            }\n        }\n        return result;\n    };\n    /**\n     * Converts the specified value to a Integer.\n     * @access private\n     * @param {!Integer|number|string|bigint|!{low: number, high: number}} val Value\n     * @param {Object} [opts={}] Configuration options\n     * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.\n     * @param {boolean} [opts.ceilFloat=false] Enable round up float to the nearest Integer.\n     * @returns {!Integer}\n     * @expose\n     */\n    Integer.fromValue = function (val, opts) {\n        if (opts === void 0) { opts = {}; }\n        if (val /* is compatible */ instanceof Integer) {\n            return val;\n        }\n        if (typeof val === 'number') {\n            if (opts.ceilFloat === true) {\n                val = Math.ceil(val);\n            }\n            return Integer.fromNumber(val);\n        }\n        if (typeof val === 'string') {\n            return Integer.fromString(val, undefined, opts);\n        }\n        if (typeof val === 'bigint') {\n            return Integer.fromString(val.toString());\n        }\n        // Throws for non-objects, converts non-instanceof Integer:\n        return new Integer(val.low, val.high);\n    };\n    /**\n     * Converts the specified value to a number.\n     * @access private\n     * @param {!Integer|number|string|!{low: number, high: number}} val Value\n     * @returns {number}\n     * @expose\n     */\n    Integer.toNumber = function (val) {\n        switch (typeof val) {\n            case 'number':\n                return val;\n            case 'bigint':\n                return Number(val);\n            default:\n                return Integer.fromValue(val).toNumber();\n        }\n    };\n    /**\n     * Converts the specified value to a string.\n     * @access private\n     * @param {!Integer|number|string|!{low: number, high: number}} val Value\n     * @param {number} radix optional radix for string conversion, defaults to 10\n     * @returns {string}\n     * @expose\n     */\n    Integer.toString = function (val, radix) {\n        return Integer.fromValue(val).toString(radix);\n    };\n    /**\n     * Checks if the given value is in the safe range in order to be converted to a native number\n     * @access private\n     * @param {!Integer|number|string|!{low: number, high: number}} val Value\n     * @param {number} radix optional radix for string conversion, defaults to 10\n     * @returns {boolean}\n     * @expose\n     */\n    Integer.inSafeRange = function (val) {\n        return Integer.fromValue(val).inSafeRange();\n    };\n    /**\n     * Signed zero.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.ZERO = Integer.fromInt(0);\n    /**\n     * Signed one.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.ONE = Integer.fromInt(1);\n    /**\n     * Signed negative one.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.NEG_ONE = Integer.fromInt(-1);\n    /**\n     * Maximum signed value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MAX_VALUE = Integer.fromBits(0xffffffff | 0, 0x7fffffff | 0);\n    /**\n     * Minimum signed value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MIN_VALUE = Integer.fromBits(0, 0x80000000 | 0);\n    /**\n     * Minimum safe value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MIN_SAFE_VALUE = Integer.fromBits(0x1 | 0, 0xffffffffffe00000 | 0);\n    /**\n     * Maximum safe value.\n     * @type {!Integer}\n     * @expose\n     */\n    Integer.MAX_SAFE_VALUE = Integer.fromBits(0xffffffff | 0, 0x1fffff | 0);\n    /**\n     * An indicator used to reliably determine if an object is a Integer or not.\n     * @type {boolean}\n     * @const\n     * @expose\n     * @private\n     */\n    Integer.__isInteger__ = true;\n    return Integer;\n}());\n/**\n * @private\n * @param num\n * @param radix\n * @param minSize\n * @returns {string}\n */\nfunction _convertNumberToString(num, radix, minSize) {\n    var theNumberString = num.toString(radix);\n    var paddingLength = Math.max(minSize - theNumberString.length, 0);\n    var padding = '0'.repeat(paddingLength);\n    return \"\".concat(padding).concat(theNumberString);\n}\n/**\n *\n * @private\n * @param theString\n * @param theNumber\n * @param radix\n * @return {boolean} True if valid\n */\nfunction _isValidNumberFromString(theString, theNumber, radix) {\n    return !Number.isNaN(theString) &&\n        !Number.isNaN(theNumber) &&\n        _convertNumberToString(theNumber, radix, theString.length) === theString.toLowerCase();\n}\nObject.defineProperty(Integer.prototype, '__isInteger__', {\n    value: true,\n    enumerable: false,\n    configurable: false\n});\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Integer}\n * @const\n * @inner\n * @private\n */\nvar TWO_PWR_24 = Integer.fromInt(TWO_PWR_24_DBL);\n/**\n * Cast value to Integer type.\n * @access public\n * @param {Mixed} value - The value to use.\n * @param {Object} [opts={}] Configuration options\n * @param {boolean} [opts.strictStringValidation=false] Enable strict validation generated Integer.\n * @param {boolean} [opts.ceilFloat=false] Enable round up float to the nearest Integer.\n * @return {Integer} - An object of type Integer.\n */\nvar int = Integer.fromValue;\nexports.int = int;\n/**\n * Check if a variable is of Integer type.\n * @access public\n * @param {Mixed} value - The variable to check.\n * @return {Boolean} - Is it of the Integer type?\n */\nvar isInt = Integer.isInteger;\nexports.isInt = isInt;\n/**\n * Check if a variable can be safely converted to a number\n * @access public\n * @param {Mixed} value - The variable to check\n * @return {Boolean} - true if it is safe to call toNumber on variable otherwise false\n */\nvar inSafeRange = Integer.inSafeRange;\nexports.inSafeRange = inSafeRange;\n/**\n * Converts a variable to a number\n * @access public\n * @param {Mixed} value - The variable to convert\n * @return {number} - the variable as a number\n */\nvar toNumber = Integer.toNumber;\nexports.toNumber = toNumber;\n/**\n * Converts the integer to a string representation\n * @access public\n * @param {Mixed} value - The variable to convert\n * @param {number} radix - radix to use in string conversion, defaults to 10\n * @return {string} - returns a string representation of the integer\n */\nvar toString = Integer.toString;\nexports.toString = toString;\nexports[\"default\"] = Integer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/integer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/bolt-agent/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/bolt-agent/index.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./node */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/bolt-agent/node/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL2JvbHQtYWdlbnQvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxhQUFhLG1CQUFPLENBQUMsNEZBQVEiLCJzb3VyY2VzIjpbIi9ob21lL2pwaWNjODY4MS9wcm9kLXN5c3RlbS9kb2NrZXItZGV2L2xlZ2FsLXBsYXRmb3JtLWJhY2tlbmQvbGVnYWwtc29mdHdhcmUtcGxhdGZvcm0vbm9kZV9tb2R1bGVzL25lbzRqLWRyaXZlci1jb3JlL2xpYi9pbnRlcm5hbC9ib2x0LWFnZW50L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFwiTmVvNGpcIlxuICogTmVvNGogU3dlZGVuIEFCIFtodHRwczovL25lbzRqLmNvbV1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL25vZGVcIiksIGV4cG9ydHMpO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/bolt-agent/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/bolt-agent/node/bolt-agent.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/bolt-agent/node/bolt-agent.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.fromVersion = void 0;\n/**\n* Copyright (c) \"Neo4j\"\n* Neo4j Sweden AB [https://neo4j.com]\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*     http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar os_1 = __webpack_require__(/*! os */ \"os\");\n/**\n * Constructs a BoltAgent structure from a given product version.\n *\n * @param {string} version The product version\n * @param {function():SystemInfo} getSystemInfo Parameter used of inject system information and mock calls to the APIs.\n * @returns {BoltAgent} The bolt agent\n */\nfunction fromVersion(version, getSystemInfo) {\n    if (getSystemInfo === void 0) { getSystemInfo = function () { return ({\n        hostArch: process.config.variables.host_arch,\n        nodeVersion: process.versions.node,\n        v8Version: process.versions.v8,\n        get platform() {\n            return (0, os_1.platform)();\n        },\n        get release() {\n            return (0, os_1.release)();\n        }\n    }); }; }\n    var systemInfo = getSystemInfo();\n    var HOST_ARCH = systemInfo.hostArch;\n    var NODE_VERSION = 'Node/' + systemInfo.nodeVersion;\n    var NODE_V8_VERSION = systemInfo.v8Version;\n    var OS_NAME_VERSION = \"\".concat(systemInfo.platform, \" \").concat(systemInfo.release);\n    return {\n        product: \"neo4j-javascript/\".concat(version),\n        platform: \"\".concat(OS_NAME_VERSION, \"; \").concat(HOST_ARCH),\n        languageDetails: \"\".concat(NODE_VERSION, \" (v8 \").concat(NODE_V8_VERSION, \")\")\n    };\n}\nexports.fromVersion = fromVersion;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL2JvbHQtYWdlbnQvbm9kZS9ib2x0LWFnZW50LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQU8sQ0FBQyxjQUFJO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLHVCQUF1QjtBQUNsQyxhQUFhLFdBQVc7QUFDeEI7QUFDQTtBQUNBLG9DQUFvQyw4QkFBOEI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvaW50ZXJuYWwvYm9sdC1hZ2VudC9ub2RlL2JvbHQtYWdlbnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmZyb21WZXJzaW9uID0gdm9pZCAwO1xuLyoqXG4qIENvcHlyaWdodCAoYykgXCJOZW80alwiXG4qIE5lbzRqIFN3ZWRlbiBBQiBbaHR0cHM6Ly9uZW80ai5jb21dXG4qXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4qIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4qXG4qICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbipcbiogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4qIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4qIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbnZhciBvc18xID0gcmVxdWlyZShcIm9zXCIpO1xuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgQm9sdEFnZW50IHN0cnVjdHVyZSBmcm9tIGEgZ2l2ZW4gcHJvZHVjdCB2ZXJzaW9uLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uIFRoZSBwcm9kdWN0IHZlcnNpb25cbiAqIEBwYXJhbSB7ZnVuY3Rpb24oKTpTeXN0ZW1JbmZvfSBnZXRTeXN0ZW1JbmZvIFBhcmFtZXRlciB1c2VkIG9mIGluamVjdCBzeXN0ZW0gaW5mb3JtYXRpb24gYW5kIG1vY2sgY2FsbHMgdG8gdGhlIEFQSXMuXG4gKiBAcmV0dXJucyB7Qm9sdEFnZW50fSBUaGUgYm9sdCBhZ2VudFxuICovXG5mdW5jdGlvbiBmcm9tVmVyc2lvbih2ZXJzaW9uLCBnZXRTeXN0ZW1JbmZvKSB7XG4gICAgaWYgKGdldFN5c3RlbUluZm8gPT09IHZvaWQgMCkgeyBnZXRTeXN0ZW1JbmZvID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHtcbiAgICAgICAgaG9zdEFyY2g6IHByb2Nlc3MuY29uZmlnLnZhcmlhYmxlcy5ob3N0X2FyY2gsXG4gICAgICAgIG5vZGVWZXJzaW9uOiBwcm9jZXNzLnZlcnNpb25zLm5vZGUsXG4gICAgICAgIHY4VmVyc2lvbjogcHJvY2Vzcy52ZXJzaW9ucy52OCxcbiAgICAgICAgZ2V0IHBsYXRmb3JtKCkge1xuICAgICAgICAgICAgcmV0dXJuICgwLCBvc18xLnBsYXRmb3JtKSgpO1xuICAgICAgICB9LFxuICAgICAgICBnZXQgcmVsZWFzZSgpIHtcbiAgICAgICAgICAgIHJldHVybiAoMCwgb3NfMS5yZWxlYXNlKSgpO1xuICAgICAgICB9XG4gICAgfSk7IH07IH1cbiAgICB2YXIgc3lzdGVtSW5mbyA9IGdldFN5c3RlbUluZm8oKTtcbiAgICB2YXIgSE9TVF9BUkNIID0gc3lzdGVtSW5mby5ob3N0QXJjaDtcbiAgICB2YXIgTk9ERV9WRVJTSU9OID0gJ05vZGUvJyArIHN5c3RlbUluZm8ubm9kZVZlcnNpb247XG4gICAgdmFyIE5PREVfVjhfVkVSU0lPTiA9IHN5c3RlbUluZm8udjhWZXJzaW9uO1xuICAgIHZhciBPU19OQU1FX1ZFUlNJT04gPSBcIlwiLmNvbmNhdChzeXN0ZW1JbmZvLnBsYXRmb3JtLCBcIiBcIikuY29uY2F0KHN5c3RlbUluZm8ucmVsZWFzZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvZHVjdDogXCJuZW80ai1qYXZhc2NyaXB0L1wiLmNvbmNhdCh2ZXJzaW9uKSxcbiAgICAgICAgcGxhdGZvcm06IFwiXCIuY29uY2F0KE9TX05BTUVfVkVSU0lPTiwgXCI7IFwiKS5jb25jYXQoSE9TVF9BUkNIKSxcbiAgICAgICAgbGFuZ3VhZ2VEZXRhaWxzOiBcIlwiLmNvbmNhdChOT0RFX1ZFUlNJT04sIFwiICh2OCBcIikuY29uY2F0KE5PREVfVjhfVkVSU0lPTiwgXCIpXCIpXG4gICAgfTtcbn1cbmV4cG9ydHMuZnJvbVZlcnNpb24gPSBmcm9tVmVyc2lvbjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/bolt-agent/node/bolt-agent.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/bolt-agent/node/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/bolt-agent/node/index.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./bolt-agent */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/bolt-agent/node/bolt-agent.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL2JvbHQtYWdlbnQvbm9kZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQyx1R0FBYyIsInNvdXJjZXMiOlsiL2hvbWUvanBpY2M4NjgxL3Byb2Qtc3lzdGVtL2RvY2tlci1kZXYvbGVnYWwtcGxhdGZvcm0tYmFja2VuZC9sZWdhbC1zb2Z0d2FyZS1wbGF0Zm9ybS9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL2JvbHQtYWdlbnQvbm9kZS9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBcIk5lbzRqXCJcbiAqIE5lbzRqIFN3ZWRlbiBBQiBbaHR0cHM6Ly9uZW80ai5jb21dXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9ib2x0LWFnZW50XCIpLCBleHBvcnRzKTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/bolt-agent/node/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/bookmarks.js":
/*!******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/bookmarks.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Bookmarks = void 0;\nvar util = __importStar(__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\"));\nvar BOOKMARKS_KEY = 'bookmarks';\nvar Bookmarks = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {string|string[]} values single bookmark as string or multiple bookmarks as a string array.\n     */\n    function Bookmarks(values) {\n        this._values = asStringArray(values);\n    }\n    Bookmarks.empty = function () {\n        return EMPTY_BOOKMARK;\n    };\n    /**\n     * Check if the given Bookmarks holder is meaningful and can be send to the database.\n     * @return {boolean} returns `true` bookmarks has a value, `false` otherwise.\n     */\n    Bookmarks.prototype.isEmpty = function () {\n        return this._values.length === 0;\n    };\n    /**\n     * Get all bookmarks values as an array.\n     * @return {string[]} all values.\n     */\n    Bookmarks.prototype.values = function () {\n        return this._values;\n    };\n    Bookmarks.prototype[Symbol.iterator] = function () {\n        return this._values[Symbol.iterator]();\n    };\n    /**\n     * Get these bookmarks as an object for begin transaction call.\n     * @return {Object} the value of this bookmarks holder as object.\n     */\n    Bookmarks.prototype.asBeginTransactionParameters = function () {\n        var _a;\n        if (this.isEmpty()) {\n            return {};\n        }\n        // Driver sends {bookmarks: \"max\", bookmarks: [\"one\", \"two\", \"max\"]} instead of simple\n        // {bookmarks: [\"one\", \"two\", \"max\"]} for backwards compatibility reasons. Old servers can only accept single\n        // bookmarks that is why driver has to parse and compare given list of bookmarks. This functionality will\n        // eventually be removed.\n        return _a = {},\n            _a[BOOKMARKS_KEY] = this._values,\n            _a;\n    };\n    return Bookmarks;\n}());\nexports.Bookmarks = Bookmarks;\nvar EMPTY_BOOKMARK = new Bookmarks(null);\n/**\n * Converts given value to an array.\n * @param {string|string[]|Array} [value=undefined] argument to convert.\n * @return {string[]} value converted to an array.\n */\nfunction asStringArray(value) {\n    if (value == null || value === '') {\n        return [];\n    }\n    if (util.isString(value)) {\n        return [value];\n    }\n    if (Array.isArray(value)) {\n        var result = new Set();\n        var flattenedValue = flattenArray(value);\n        for (var i = 0; i < flattenedValue.length; i++) {\n            var element = flattenedValue[i];\n            // if it is undefined or null, ignore it\n            if (element !== undefined && element !== null) {\n                if (!util.isString(element)) {\n                    throw new TypeError(\n                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                    \"Bookmark value should be a string, given: '\".concat(element, \"'\"));\n                }\n                result.add(element);\n            }\n        }\n        return __spreadArray([], __read(result), false);\n    }\n    throw new TypeError(\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    \"Bookmarks should either be a string or a string array, given: '\".concat(value, \"'\"));\n}\n/**\n * Recursively flattens an array so that the result becomes a single array\n * of values, which does not include any sub-arrays\n *\n * @param {Array} value\n */\nfunction flattenArray(values) {\n    return values.reduce(function (dest, value) {\n        return Array.isArray(value)\n            ? dest.concat(flattenArray(value))\n            : dest.concat(value);\n    }, []);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL2Jvb2ttYXJrcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLE1BQU07QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2RUFBNkUsT0FBTztBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsd0JBQXdCLG1CQUFPLENBQUMsMkVBQVE7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsb0RBQW9EO0FBQzdFLFlBQVksa0NBQWtDO0FBQzlDO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdUJBQXVCO0FBQ2xDLFlBQVksVUFBVTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLDJCQUEyQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvaW50ZXJuYWwvYm9va21hcmtzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFwiTmVvNGpcIlxuICogTmVvNGogU3dlZGVuIEFCIFtodHRwczovL25lbzRqLmNvbV1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xudmFyIF9fcmVhZCA9ICh0aGlzICYmIHRoaXMuX19yZWFkKSB8fCBmdW5jdGlvbiAobywgbikge1xuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgICBpZiAoIW0pIHJldHVybiBvO1xuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xuICAgIHRyeSB7XG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgICBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxuICAgIH1cbiAgICByZXR1cm4gYXI7XG59O1xudmFyIF9fc3ByZWFkQXJyYXkgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkQXJyYXkpIHx8IGZ1bmN0aW9uICh0bywgZnJvbSwgcGFjaykge1xuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICAgIGlmICghYXIpIGFyID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZnJvbSwgMCwgaSk7XG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Cb29rbWFya3MgPSB2b2lkIDA7XG52YXIgdXRpbCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsXCIpKTtcbnZhciBCT09LTUFSS1NfS0VZID0gJ2Jvb2ttYXJrcyc7XG52YXIgQm9va21hcmtzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSB2YWx1ZXMgc2luZ2xlIGJvb2ttYXJrIGFzIHN0cmluZyBvciBtdWx0aXBsZSBib29rbWFya3MgYXMgYSBzdHJpbmcgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gQm9va21hcmtzKHZhbHVlcykge1xuICAgICAgICB0aGlzLl92YWx1ZXMgPSBhc1N0cmluZ0FycmF5KHZhbHVlcyk7XG4gICAgfVxuICAgIEJvb2ttYXJrcy5lbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIEVNUFRZX0JPT0tNQVJLO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIEJvb2ttYXJrcyBob2xkZXIgaXMgbWVhbmluZ2Z1bCBhbmQgY2FuIGJlIHNlbmQgdG8gdGhlIGRhdGFiYXNlLlxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IHJldHVybnMgYHRydWVgIGJvb2ttYXJrcyBoYXMgYSB2YWx1ZSwgYGZhbHNlYCBvdGhlcndpc2UuXG4gICAgICovXG4gICAgQm9va21hcmtzLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWVzLmxlbmd0aCA9PT0gMDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdldCBhbGwgYm9va21hcmtzIHZhbHVlcyBhcyBhbiBhcnJheS5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0gYWxsIHZhbHVlcy5cbiAgICAgKi9cbiAgICBCb29rbWFya3MucHJvdG90eXBlLnZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlcztcbiAgICB9O1xuICAgIEJvb2ttYXJrcy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbHVlc1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlc2UgYm9va21hcmtzIGFzIGFuIG9iamVjdCBmb3IgYmVnaW4gdHJhbnNhY3Rpb24gY2FsbC5cbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHRoZSB2YWx1ZSBvZiB0aGlzIGJvb2ttYXJrcyBob2xkZXIgYXMgb2JqZWN0LlxuICAgICAqL1xuICAgIEJvb2ttYXJrcy5wcm90b3R5cGUuYXNCZWdpblRyYW5zYWN0aW9uUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICAvLyBEcml2ZXIgc2VuZHMge2Jvb2ttYXJrczogXCJtYXhcIiwgYm9va21hcmtzOiBbXCJvbmVcIiwgXCJ0d29cIiwgXCJtYXhcIl19IGluc3RlYWQgb2Ygc2ltcGxlXG4gICAgICAgIC8vIHtib29rbWFya3M6IFtcIm9uZVwiLCBcInR3b1wiLCBcIm1heFwiXX0gZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5IHJlYXNvbnMuIE9sZCBzZXJ2ZXJzIGNhbiBvbmx5IGFjY2VwdCBzaW5nbGVcbiAgICAgICAgLy8gYm9va21hcmtzIHRoYXQgaXMgd2h5IGRyaXZlciBoYXMgdG8gcGFyc2UgYW5kIGNvbXBhcmUgZ2l2ZW4gbGlzdCBvZiBib29rbWFya3MuIFRoaXMgZnVuY3Rpb25hbGl0eSB3aWxsXG4gICAgICAgIC8vIGV2ZW50dWFsbHkgYmUgcmVtb3ZlZC5cbiAgICAgICAgcmV0dXJuIF9hID0ge30sXG4gICAgICAgICAgICBfYVtCT09LTUFSS1NfS0VZXSA9IHRoaXMuX3ZhbHVlcyxcbiAgICAgICAgICAgIF9hO1xuICAgIH07XG4gICAgcmV0dXJuIEJvb2ttYXJrcztcbn0oKSk7XG5leHBvcnRzLkJvb2ttYXJrcyA9IEJvb2ttYXJrcztcbnZhciBFTVBUWV9CT09LTUFSSyA9IG5ldyBCb29rbWFya3MobnVsbCk7XG4vKipcbiAqIENvbnZlcnRzIGdpdmVuIHZhbHVlIHRvIGFuIGFycmF5LlxuICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW118QXJyYXl9IFt2YWx1ZT11bmRlZmluZWRdIGFyZ3VtZW50IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJuIHtzdHJpbmdbXX0gdmFsdWUgY29udmVydGVkIHRvIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiBhc1N0cmluZ0FycmF5KHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlID09IG51bGwgfHwgdmFsdWUgPT09ICcnKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgaWYgKHV0aWwuaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBbdmFsdWVdO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBTZXQoKTtcbiAgICAgICAgdmFyIGZsYXR0ZW5lZFZhbHVlID0gZmxhdHRlbkFycmF5KHZhbHVlKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbGF0dGVuZWRWYWx1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBmbGF0dGVuZWRWYWx1ZVtpXTtcbiAgICAgICAgICAgIC8vIGlmIGl0IGlzIHVuZGVmaW5lZCBvciBudWxsLCBpZ25vcmUgaXRcbiAgICAgICAgICAgIGlmIChlbGVtZW50ICE9PSB1bmRlZmluZWQgJiYgZWxlbWVudCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGlmICghdXRpbC5pc1N0cmluZyhlbGVtZW50KSkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3Jlc3RyaWN0LXRlbXBsYXRlLWV4cHJlc3Npb25zXG4gICAgICAgICAgICAgICAgICAgIFwiQm9va21hcmsgdmFsdWUgc2hvdWxkIGJlIGEgc3RyaW5nLCBnaXZlbjogJ1wiLmNvbmNhdChlbGVtZW50LCBcIidcIikpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXN1bHQuYWRkKGVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQocmVzdWx0KSwgZmFsc2UpO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtdGVtcGxhdGUtZXhwcmVzc2lvbnNcbiAgICBcIkJvb2ttYXJrcyBzaG91bGQgZWl0aGVyIGJlIGEgc3RyaW5nIG9yIGEgc3RyaW5nIGFycmF5LCBnaXZlbjogJ1wiLmNvbmNhdCh2YWx1ZSwgXCInXCIpKTtcbn1cbi8qKlxuICogUmVjdXJzaXZlbHkgZmxhdHRlbnMgYW4gYXJyYXkgc28gdGhhdCB0aGUgcmVzdWx0IGJlY29tZXMgYSBzaW5nbGUgYXJyYXlcbiAqIG9mIHZhbHVlcywgd2hpY2ggZG9lcyBub3QgaW5jbHVkZSBhbnkgc3ViLWFycmF5c1xuICpcbiAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIGZsYXR0ZW5BcnJheSh2YWx1ZXMpIHtcbiAgICByZXR1cm4gdmFsdWVzLnJlZHVjZShmdW5jdGlvbiAoZGVzdCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpXG4gICAgICAgICAgICA/IGRlc3QuY29uY2F0KGZsYXR0ZW5BcnJheSh2YWx1ZSkpXG4gICAgICAgICAgICA6IGRlc3QuY29uY2F0KHZhbHVlKTtcbiAgICB9LCBbXSk7XG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/bookmarks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/connection-holder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/connection-holder.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EMPTY_CONNECTION_HOLDER = exports.ReadOnlyConnectionHolder = exports.ConnectionHolder = void 0;\nvar error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/constants.js\");\nvar bookmarks_1 = __webpack_require__(/*! ./bookmarks */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/bookmarks.js\");\nvar logger_1 = __webpack_require__(/*! ./logger */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/logger.js\");\n/**\n * Utility to lazily initialize connections and return them back to the pool when unused.\n * @private\n */\nvar ConnectionHolder = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {object} params\n     * @property {string} params.mode - the access mode for new connection holder.\n     * @property {string} params.database - the target database name.\n     * @property {Bookmarks} params.bookmarks - initial bookmarks\n     * @property {ConnectionProvider} params.connectionProvider - the connection provider to acquire connections from.\n     * @property {string?} params.impersonatedUser - the user which will be impersonated\n     * @property {function(databaseName:string)} params.onDatabaseNameResolved - callback called when the database name is resolved\n     * @property {function():Promise<Bookmarks>} params.getConnectionAcquistionBookmarks - called for getting Bookmarks for acquiring connections\n     * @property {AuthToken} params.auth - the target auth for the to-be-acquired connection\n     */\n    function ConnectionHolder(_a) {\n        var mode = _a.mode, _b = _a.database, database = _b === void 0 ? '' : _b, bookmarks = _a.bookmarks, connectionProvider = _a.connectionProvider, impersonatedUser = _a.impersonatedUser, onDatabaseNameResolved = _a.onDatabaseNameResolved, getConnectionAcquistionBookmarks = _a.getConnectionAcquistionBookmarks, auth = _a.auth, log = _a.log;\n        this._mode = mode !== null && mode !== void 0 ? mode : constants_1.ACCESS_MODE_WRITE;\n        this._closed = false;\n        this._database = database != null ? (0, util_1.assertString)(database, 'database') : '';\n        this._bookmarks = bookmarks !== null && bookmarks !== void 0 ? bookmarks : bookmarks_1.Bookmarks.empty();\n        this._connectionProvider = connectionProvider;\n        this._impersonatedUser = impersonatedUser;\n        this._referenceCount = 0;\n        this._connectionPromise = Promise.resolve(null);\n        this._onDatabaseNameResolved = onDatabaseNameResolved;\n        this._auth = auth;\n        this._log = log;\n        this._logError = this._logError.bind(this);\n        this._getConnectionAcquistionBookmarks = getConnectionAcquistionBookmarks !== null && getConnectionAcquistionBookmarks !== void 0 ? getConnectionAcquistionBookmarks : (function () { return Promise.resolve(bookmarks_1.Bookmarks.empty()); });\n    }\n    ConnectionHolder.prototype.mode = function () {\n        return this._mode;\n    };\n    ConnectionHolder.prototype.database = function () {\n        return this._database;\n    };\n    ConnectionHolder.prototype.setDatabase = function (database) {\n        this._database = database;\n    };\n    ConnectionHolder.prototype.bookmarks = function () {\n        return this._bookmarks;\n    };\n    ConnectionHolder.prototype.connectionProvider = function () {\n        return this._connectionProvider;\n    };\n    ConnectionHolder.prototype.referenceCount = function () {\n        return this._referenceCount;\n    };\n    ConnectionHolder.prototype.initializeConnection = function () {\n        if (this._referenceCount === 0 && (this._connectionProvider != null)) {\n            this._connectionPromise = this._createConnectionPromise(this._connectionProvider);\n        }\n        else {\n            this._referenceCount++;\n            return false;\n        }\n        this._referenceCount++;\n        return true;\n    };\n    ConnectionHolder.prototype._createConnectionPromise = function (connectionProvider) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b;\n            var _c;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _b = (_a = connectionProvider).acquireConnection;\n                        _c = {\n                            accessMode: this._mode,\n                            database: this._database\n                        };\n                        return [4 /*yield*/, this._getBookmarks()];\n                    case 1: return [4 /*yield*/, _b.apply(_a, [(_c.bookmarks = _d.sent(),\n                                _c.impersonatedUser = this._impersonatedUser,\n                                _c.onDatabaseNameResolved = this._onDatabaseNameResolved,\n                                _c.auth = this._auth,\n                                _c)])];\n                    case 2: return [2 /*return*/, _d.sent()];\n                }\n            });\n        });\n    };\n    ConnectionHolder.prototype._getBookmarks = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._getConnectionAcquistionBookmarks()];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    ConnectionHolder.prototype.getConnection = function () {\n        return this._connectionPromise;\n    };\n    ConnectionHolder.prototype.releaseConnection = function () {\n        if (this._referenceCount === 0) {\n            return this._connectionPromise;\n        }\n        this._referenceCount--;\n        if (this._referenceCount === 0) {\n            return this._releaseConnection();\n        }\n        return this._connectionPromise;\n    };\n    ConnectionHolder.prototype.close = function (hasTx) {\n        this._closed = true;\n        if (this._referenceCount === 0) {\n            return this._connectionPromise;\n        }\n        this._referenceCount = 0;\n        return this._releaseConnection(hasTx);\n    };\n    ConnectionHolder.prototype.log = function () {\n        return this._log;\n    };\n    /**\n     * Return the current pooled connection instance to the connection pool.\n     * We don't pool Session instances, to avoid users using the Session after they've called close.\n     * The `Session` object is just a thin wrapper around Connection anyway, so it makes little difference.\n     * @return {Promise} - promise resolved then connection is returned to the pool.\n     * @private\n     */\n    ConnectionHolder.prototype._releaseConnection = function (hasTx) {\n        this._connectionPromise = this._connectionPromise\n            .then(function (connection) {\n            if (connection != null) {\n                if (connection.isOpen() && (connection.hasOngoingObservableRequests() || hasTx === true)) {\n                    return connection\n                        .resetAndFlush()\n                        .catch(ignoreError)\n                        .then(function () { return connection.release().then(function () { return null; }); });\n                }\n                return connection.release().then(function () { return null; });\n            }\n            else {\n                return Promise.resolve(null);\n            }\n        })\n            .catch(this._logError);\n        return this._connectionPromise;\n    };\n    ConnectionHolder.prototype._logError = function (error) {\n        if (this._log.isWarnEnabled()) {\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            this._log.warn(\"ConnectionHolder got an error while releasing the connection. Error \".concat(error, \". Stacktrace: \").concat(error.stack));\n        }\n        return null;\n    };\n    return ConnectionHolder;\n}());\nexports.ConnectionHolder = ConnectionHolder;\n/**\n * Provides a interaction with a ConnectionHolder without change it state by\n * releasing or initilizing\n */\nvar ReadOnlyConnectionHolder = /** @class */ (function (_super) {\n    __extends(ReadOnlyConnectionHolder, _super);\n    /**\n     * Constructor\n     * @param {ConnectionHolder} connectionHolder the connection holder which will treat the requests\n     */\n    function ReadOnlyConnectionHolder(connectionHolder) {\n        var _this = _super.call(this, {\n            mode: connectionHolder.mode(),\n            database: connectionHolder.database(),\n            bookmarks: connectionHolder.bookmarks(),\n            // @ts-expect-error\n            getConnectionAcquistionBookmarks: connectionHolder._getConnectionAcquistionBookmarks,\n            connectionProvider: connectionHolder.connectionProvider(),\n            log: connectionHolder.log()\n        }) || this;\n        _this._connectionHolder = connectionHolder;\n        return _this;\n    }\n    /**\n     * Return the true if the connection is suppose to be initilized with the command.\n     *\n     * @return {boolean}\n     */\n    ReadOnlyConnectionHolder.prototype.initializeConnection = function () {\n        if (this._connectionHolder.referenceCount() === 0) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Get the current connection promise.\n     * @return {Promise<Connection>} promise resolved with the current connection.\n     */\n    ReadOnlyConnectionHolder.prototype.getConnection = function () {\n        return this._connectionHolder.getConnection();\n    };\n    /**\n     * Get the current connection promise, doesn't performs the release\n     * @return {Promise<Connection>} promise with the resolved current connection\n     */\n    ReadOnlyConnectionHolder.prototype.releaseConnection = function () {\n        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(null); });\n    };\n    /**\n     * Get the current connection promise, doesn't performs the connection close\n     * @return {Promise<Connection>} promise with the resolved current connection\n     */\n    ReadOnlyConnectionHolder.prototype.close = function () {\n        return this._connectionHolder.getConnection().catch(function () { return Promise.resolve(null); });\n    };\n    return ReadOnlyConnectionHolder;\n}(ConnectionHolder));\nexports.ReadOnlyConnectionHolder = ReadOnlyConnectionHolder;\nexports[\"default\"] = ReadOnlyConnectionHolder;\nvar EmptyConnectionHolder = /** @class */ (function (_super) {\n    __extends(EmptyConnectionHolder, _super);\n    function EmptyConnectionHolder() {\n        return _super.call(this, {\n            // Empty logger\n            log: logger_1.Logger.create({})\n        }) || this;\n    }\n    EmptyConnectionHolder.prototype.mode = function () {\n        return undefined;\n    };\n    EmptyConnectionHolder.prototype.database = function () {\n        return undefined;\n    };\n    EmptyConnectionHolder.prototype.initializeConnection = function () {\n        // nothing to initialize\n        return true;\n    };\n    EmptyConnectionHolder.prototype.getConnection = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.reject((0, error_1.newError)('This connection holder does not serve connections'))];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    EmptyConnectionHolder.prototype.releaseConnection = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.resolve(null)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    EmptyConnectionHolder.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, Promise.resolve(null)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    return EmptyConnectionHolder;\n}(ConnectionHolder));\n/**\n * Connection holder that does not manage any connections.\n * @type {ConnectionHolder}\n * @private\n */\nvar EMPTY_CONNECTION_HOLDER = new EmptyConnectionHolder();\nexports.EMPTY_CONNECTION_HOLDER = EMPTY_CONNECTION_HOLDER;\n// eslint-disable-next-line n/handle-callback-err\nfunction ignoreError(error) {\n    return null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/connection-holder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/constants.js":
/*!******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/constants.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TELEMETRY_APIS = exports.BOLT_PROTOCOL_V5_7 = exports.BOLT_PROTOCOL_V5_6 = exports.BOLT_PROTOCOL_V5_5 = exports.BOLT_PROTOCOL_V5_4 = exports.BOLT_PROTOCOL_V5_3 = exports.BOLT_PROTOCOL_V5_2 = exports.BOLT_PROTOCOL_V5_1 = exports.BOLT_PROTOCOL_V5_0 = exports.BOLT_PROTOCOL_V4_4 = exports.BOLT_PROTOCOL_V4_3 = exports.BOLT_PROTOCOL_V4_2 = exports.BOLT_PROTOCOL_V4_1 = exports.BOLT_PROTOCOL_V4_0 = exports.BOLT_PROTOCOL_V3 = exports.BOLT_PROTOCOL_V2 = exports.BOLT_PROTOCOL_V1 = exports.DEFAULT_POOL_MAX_SIZE = exports.DEFAULT_POOL_ACQUISITION_TIMEOUT = exports.DEFAULT_CONNECTION_TIMEOUT_MILLIS = exports.ACCESS_MODE_WRITE = exports.ACCESS_MODE_READ = exports.FETCH_ALL = void 0;\nvar FETCH_ALL = -1;\nexports.FETCH_ALL = FETCH_ALL;\nvar DEFAULT_POOL_ACQUISITION_TIMEOUT = 60 * 1000; // 60 seconds\nexports.DEFAULT_POOL_ACQUISITION_TIMEOUT = DEFAULT_POOL_ACQUISITION_TIMEOUT;\nvar DEFAULT_POOL_MAX_SIZE = 100;\nexports.DEFAULT_POOL_MAX_SIZE = DEFAULT_POOL_MAX_SIZE;\nvar DEFAULT_CONNECTION_TIMEOUT_MILLIS = 30000; // 30 seconds by default\nexports.DEFAULT_CONNECTION_TIMEOUT_MILLIS = DEFAULT_CONNECTION_TIMEOUT_MILLIS;\nvar ACCESS_MODE_READ = 'READ';\nexports.ACCESS_MODE_READ = ACCESS_MODE_READ;\nvar ACCESS_MODE_WRITE = 'WRITE';\nexports.ACCESS_MODE_WRITE = ACCESS_MODE_WRITE;\nvar BOLT_PROTOCOL_V1 = 1;\nexports.BOLT_PROTOCOL_V1 = BOLT_PROTOCOL_V1;\nvar BOLT_PROTOCOL_V2 = 2;\nexports.BOLT_PROTOCOL_V2 = BOLT_PROTOCOL_V2;\nvar BOLT_PROTOCOL_V3 = 3;\nexports.BOLT_PROTOCOL_V3 = BOLT_PROTOCOL_V3;\nvar BOLT_PROTOCOL_V4_0 = 4.0;\nexports.BOLT_PROTOCOL_V4_0 = BOLT_PROTOCOL_V4_0;\nvar BOLT_PROTOCOL_V4_1 = 4.1;\nexports.BOLT_PROTOCOL_V4_1 = BOLT_PROTOCOL_V4_1;\nvar BOLT_PROTOCOL_V4_2 = 4.2;\nexports.BOLT_PROTOCOL_V4_2 = BOLT_PROTOCOL_V4_2;\nvar BOLT_PROTOCOL_V4_3 = 4.3;\nexports.BOLT_PROTOCOL_V4_3 = BOLT_PROTOCOL_V4_3;\nvar BOLT_PROTOCOL_V4_4 = 4.4;\nexports.BOLT_PROTOCOL_V4_4 = BOLT_PROTOCOL_V4_4;\nvar BOLT_PROTOCOL_V5_0 = 5.0;\nexports.BOLT_PROTOCOL_V5_0 = BOLT_PROTOCOL_V5_0;\nvar BOLT_PROTOCOL_V5_1 = 5.1;\nexports.BOLT_PROTOCOL_V5_1 = BOLT_PROTOCOL_V5_1;\nvar BOLT_PROTOCOL_V5_2 = 5.2;\nexports.BOLT_PROTOCOL_V5_2 = BOLT_PROTOCOL_V5_2;\nvar BOLT_PROTOCOL_V5_3 = 5.3;\nexports.BOLT_PROTOCOL_V5_3 = BOLT_PROTOCOL_V5_3;\nvar BOLT_PROTOCOL_V5_4 = 5.4;\nexports.BOLT_PROTOCOL_V5_4 = BOLT_PROTOCOL_V5_4;\nvar BOLT_PROTOCOL_V5_5 = 5.5;\nexports.BOLT_PROTOCOL_V5_5 = BOLT_PROTOCOL_V5_5;\nvar BOLT_PROTOCOL_V5_6 = 5.6;\nexports.BOLT_PROTOCOL_V5_6 = BOLT_PROTOCOL_V5_6;\nvar BOLT_PROTOCOL_V5_7 = 5.7;\nexports.BOLT_PROTOCOL_V5_7 = BOLT_PROTOCOL_V5_7;\nvar TELEMETRY_APIS = {\n    MANAGED_TRANSACTION: 0,\n    UNMANAGED_TRANSACTION: 1,\n    AUTO_COMMIT_TRANSACTION: 2,\n    EXECUTE_QUERY: 3\n};\nexports.TELEMETRY_APIS = TELEMETRY_APIS;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLDBCQUEwQixHQUFHLHdCQUF3QixHQUFHLHdCQUF3QixHQUFHLHdCQUF3QixHQUFHLDZCQUE2QixHQUFHLHdDQUF3QyxHQUFHLHlDQUF5QyxHQUFHLHlCQUF5QixHQUFHLHdCQUF3QixHQUFHLGlCQUFpQjtBQUNscUI7QUFDQSxpQkFBaUI7QUFDakIsa0RBQWtEO0FBQ2xELHdDQUF3QztBQUN4QztBQUNBLDZCQUE2QjtBQUM3QiwrQ0FBK0M7QUFDL0MseUNBQXlDO0FBQ3pDO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiIsInNvdXJjZXMiOlsiL2hvbWUvanBpY2M4NjgxL3Byb2Qtc3lzdGVtL2RvY2tlci1kZXYvbGVnYWwtcGxhdGZvcm0tYmFja2VuZC9sZWdhbC1zb2Z0d2FyZS1wbGF0Zm9ybS9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL2NvbnN0YW50cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBcIk5lbzRqXCJcbiAqIE5lbzRqIFN3ZWRlbiBBQiBbaHR0cHM6Ly9uZW80ai5jb21dXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRFTEVNRVRSWV9BUElTID0gZXhwb3J0cy5CT0xUX1BST1RPQ09MX1Y1XzcgPSBleHBvcnRzLkJPTFRfUFJPVE9DT0xfVjVfNiA9IGV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV81ID0gZXhwb3J0cy5CT0xUX1BST1RPQ09MX1Y1XzQgPSBleHBvcnRzLkJPTFRfUFJPVE9DT0xfVjVfMyA9IGV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV8yID0gZXhwb3J0cy5CT0xUX1BST1RPQ09MX1Y1XzEgPSBleHBvcnRzLkJPTFRfUFJPVE9DT0xfVjVfMCA9IGV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNF80ID0gZXhwb3J0cy5CT0xUX1BST1RPQ09MX1Y0XzMgPSBleHBvcnRzLkJPTFRfUFJPVE9DT0xfVjRfMiA9IGV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNF8xID0gZXhwb3J0cy5CT0xUX1BST1RPQ09MX1Y0XzAgPSBleHBvcnRzLkJPTFRfUFJPVE9DT0xfVjMgPSBleHBvcnRzLkJPTFRfUFJPVE9DT0xfVjIgPSBleHBvcnRzLkJPTFRfUFJPVE9DT0xfVjEgPSBleHBvcnRzLkRFRkFVTFRfUE9PTF9NQVhfU0laRSA9IGV4cG9ydHMuREVGQVVMVF9QT09MX0FDUVVJU0lUSU9OX1RJTUVPVVQgPSBleHBvcnRzLkRFRkFVTFRfQ09OTkVDVElPTl9USU1FT1VUX01JTExJUyA9IGV4cG9ydHMuQUNDRVNTX01PREVfV1JJVEUgPSBleHBvcnRzLkFDQ0VTU19NT0RFX1JFQUQgPSBleHBvcnRzLkZFVENIX0FMTCA9IHZvaWQgMDtcbnZhciBGRVRDSF9BTEwgPSAtMTtcbmV4cG9ydHMuRkVUQ0hfQUxMID0gRkVUQ0hfQUxMO1xudmFyIERFRkFVTFRfUE9PTF9BQ1FVSVNJVElPTl9USU1FT1VUID0gNjAgKiAxMDAwOyAvLyA2MCBzZWNvbmRzXG5leHBvcnRzLkRFRkFVTFRfUE9PTF9BQ1FVSVNJVElPTl9USU1FT1VUID0gREVGQVVMVF9QT09MX0FDUVVJU0lUSU9OX1RJTUVPVVQ7XG52YXIgREVGQVVMVF9QT09MX01BWF9TSVpFID0gMTAwO1xuZXhwb3J0cy5ERUZBVUxUX1BPT0xfTUFYX1NJWkUgPSBERUZBVUxUX1BPT0xfTUFYX1NJWkU7XG52YXIgREVGQVVMVF9DT05ORUNUSU9OX1RJTUVPVVRfTUlMTElTID0gMzAwMDA7IC8vIDMwIHNlY29uZHMgYnkgZGVmYXVsdFxuZXhwb3J0cy5ERUZBVUxUX0NPTk5FQ1RJT05fVElNRU9VVF9NSUxMSVMgPSBERUZBVUxUX0NPTk5FQ1RJT05fVElNRU9VVF9NSUxMSVM7XG52YXIgQUNDRVNTX01PREVfUkVBRCA9ICdSRUFEJztcbmV4cG9ydHMuQUNDRVNTX01PREVfUkVBRCA9IEFDQ0VTU19NT0RFX1JFQUQ7XG52YXIgQUNDRVNTX01PREVfV1JJVEUgPSAnV1JJVEUnO1xuZXhwb3J0cy5BQ0NFU1NfTU9ERV9XUklURSA9IEFDQ0VTU19NT0RFX1dSSVRFO1xudmFyIEJPTFRfUFJPVE9DT0xfVjEgPSAxO1xuZXhwb3J0cy5CT0xUX1BST1RPQ09MX1YxID0gQk9MVF9QUk9UT0NPTF9WMTtcbnZhciBCT0xUX1BST1RPQ09MX1YyID0gMjtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WMiA9IEJPTFRfUFJPVE9DT0xfVjI7XG52YXIgQk9MVF9QUk9UT0NPTF9WMyA9IDM7XG5leHBvcnRzLkJPTFRfUFJPVE9DT0xfVjMgPSBCT0xUX1BST1RPQ09MX1YzO1xudmFyIEJPTFRfUFJPVE9DT0xfVjRfMCA9IDQuMDtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNF8wID0gQk9MVF9QUk9UT0NPTF9WNF8wO1xudmFyIEJPTFRfUFJPVE9DT0xfVjRfMSA9IDQuMTtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNF8xID0gQk9MVF9QUk9UT0NPTF9WNF8xO1xudmFyIEJPTFRfUFJPVE9DT0xfVjRfMiA9IDQuMjtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNF8yID0gQk9MVF9QUk9UT0NPTF9WNF8yO1xudmFyIEJPTFRfUFJPVE9DT0xfVjRfMyA9IDQuMztcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNF8zID0gQk9MVF9QUk9UT0NPTF9WNF8zO1xudmFyIEJPTFRfUFJPVE9DT0xfVjRfNCA9IDQuNDtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNF80ID0gQk9MVF9QUk9UT0NPTF9WNF80O1xudmFyIEJPTFRfUFJPVE9DT0xfVjVfMCA9IDUuMDtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV8wID0gQk9MVF9QUk9UT0NPTF9WNV8wO1xudmFyIEJPTFRfUFJPVE9DT0xfVjVfMSA9IDUuMTtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV8xID0gQk9MVF9QUk9UT0NPTF9WNV8xO1xudmFyIEJPTFRfUFJPVE9DT0xfVjVfMiA9IDUuMjtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV8yID0gQk9MVF9QUk9UT0NPTF9WNV8yO1xudmFyIEJPTFRfUFJPVE9DT0xfVjVfMyA9IDUuMztcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV8zID0gQk9MVF9QUk9UT0NPTF9WNV8zO1xudmFyIEJPTFRfUFJPVE9DT0xfVjVfNCA9IDUuNDtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV80ID0gQk9MVF9QUk9UT0NPTF9WNV80O1xudmFyIEJPTFRfUFJPVE9DT0xfVjVfNSA9IDUuNTtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV81ID0gQk9MVF9QUk9UT0NPTF9WNV81O1xudmFyIEJPTFRfUFJPVE9DT0xfVjVfNiA9IDUuNjtcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV82ID0gQk9MVF9QUk9UT0NPTF9WNV82O1xudmFyIEJPTFRfUFJPVE9DT0xfVjVfNyA9IDUuNztcbmV4cG9ydHMuQk9MVF9QUk9UT0NPTF9WNV83ID0gQk9MVF9QUk9UT0NPTF9WNV83O1xudmFyIFRFTEVNRVRSWV9BUElTID0ge1xuICAgIE1BTkFHRURfVFJBTlNBQ1RJT046IDAsXG4gICAgVU5NQU5BR0VEX1RSQU5TQUNUSU9OOiAxLFxuICAgIEFVVE9fQ09NTUlUX1RSQU5TQUNUSU9OOiAyLFxuICAgIEVYRUNVVEVfUVVFUlk6IDNcbn07XG5leHBvcnRzLlRFTEVNRVRSWV9BUElTID0gVEVMRU1FVFJZX0FQSVM7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pool = exports.boltAgent = exports.objectUtil = exports.resolver = exports.serverAddress = exports.urlUtil = exports.logger = exports.transactionExecutor = exports.txConfig = exports.connectionHolder = exports.constants = exports.bookmarks = exports.observer = exports.temporalUtil = exports.util = void 0;\nvar util = __importStar(__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\"));\nexports.util = util;\nvar temporalUtil = __importStar(__webpack_require__(/*! ./temporal-util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/temporal-util.js\"));\nexports.temporalUtil = temporalUtil;\nvar observer = __importStar(__webpack_require__(/*! ./observers */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/observers.js\"));\nexports.observer = observer;\nvar bookmarks = __importStar(__webpack_require__(/*! ./bookmarks */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/bookmarks.js\"));\nexports.bookmarks = bookmarks;\nvar constants = __importStar(__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/constants.js\"));\nexports.constants = constants;\nvar connectionHolder = __importStar(__webpack_require__(/*! ./connection-holder */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/connection-holder.js\"));\nexports.connectionHolder = connectionHolder;\nvar txConfig = __importStar(__webpack_require__(/*! ./tx-config */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/tx-config.js\"));\nexports.txConfig = txConfig;\nvar transactionExecutor = __importStar(__webpack_require__(/*! ./transaction-executor */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/transaction-executor.js\"));\nexports.transactionExecutor = transactionExecutor;\nvar logger = __importStar(__webpack_require__(/*! ./logger */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/logger.js\"));\nexports.logger = logger;\nvar urlUtil = __importStar(__webpack_require__(/*! ./url-util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/url-util.js\"));\nexports.urlUtil = urlUtil;\nvar serverAddress = __importStar(__webpack_require__(/*! ./server-address */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/server-address.js\"));\nexports.serverAddress = serverAddress;\nvar resolver = __importStar(__webpack_require__(/*! ./resolver */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/index.js\"));\nexports.resolver = resolver;\nvar objectUtil = __importStar(__webpack_require__(/*! ./object-util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/object-util.js\"));\nexports.objectUtil = objectUtil;\nvar boltAgent = __importStar(__webpack_require__(/*! ./bolt-agent/index */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/bolt-agent/index.js\"));\nexports.boltAgent = boltAgent;\nvar pool = __importStar(__webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/index.js\"));\nexports.pool = pool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLDBDQUEwQyw0QkFBNEI7QUFDdEUsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFlBQVksR0FBRyxpQkFBaUIsR0FBRyxrQkFBa0IsR0FBRyxnQkFBZ0IsR0FBRyxxQkFBcUIsR0FBRyxlQUFlLEdBQUcsY0FBYyxHQUFHLDJCQUEyQixHQUFHLGdCQUFnQixHQUFHLHdCQUF3QixHQUFHLGlCQUFpQixHQUFHLGlCQUFpQixHQUFHLGdCQUFnQixHQUFHLG9CQUFvQixHQUFHLFlBQVk7QUFDaFQsd0JBQXdCLG1CQUFPLENBQUMsMkVBQVE7QUFDeEMsWUFBWTtBQUNaLGdDQUFnQyxtQkFBTyxDQUFDLDZGQUFpQjtBQUN6RCxvQkFBb0I7QUFDcEIsNEJBQTRCLG1CQUFPLENBQUMscUZBQWE7QUFDakQsZ0JBQWdCO0FBQ2hCLDZCQUE2QixtQkFBTyxDQUFDLHFGQUFhO0FBQ2xELGlCQUFpQjtBQUNqQiw2QkFBNkIsbUJBQU8sQ0FBQyxxRkFBYTtBQUNsRCxpQkFBaUI7QUFDakIsb0NBQW9DLG1CQUFPLENBQUMscUdBQXFCO0FBQ2pFLHdCQUF3QjtBQUN4Qiw0QkFBNEIsbUJBQU8sQ0FBQyxxRkFBYTtBQUNqRCxnQkFBZ0I7QUFDaEIsdUNBQXVDLG1CQUFPLENBQUMsMkdBQXdCO0FBQ3ZFLDJCQUEyQjtBQUMzQiwwQkFBMEIsbUJBQU8sQ0FBQywrRUFBVTtBQUM1QyxjQUFjO0FBQ2QsMkJBQTJCLG1CQUFPLENBQUMsbUZBQVk7QUFDL0MsZUFBZTtBQUNmLGlDQUFpQyxtQkFBTyxDQUFDLCtGQUFrQjtBQUMzRCxxQkFBcUI7QUFDckIsNEJBQTRCLG1CQUFPLENBQUMseUZBQVk7QUFDaEQsZ0JBQWdCO0FBQ2hCLDhCQUE4QixtQkFBTyxDQUFDLHlGQUFlO0FBQ3JELGtCQUFrQjtBQUNsQiw2QkFBNkIsbUJBQU8sQ0FBQyxtR0FBb0I7QUFDekQsaUJBQWlCO0FBQ2pCLHdCQUF3QixtQkFBTyxDQUFDLGlGQUFRO0FBQ3hDLFlBQVkiLCJzb3VyY2VzIjpbIi9ob21lL2pwaWNjODY4MS9wcm9kLXN5c3RlbS9kb2NrZXItZGV2L2xlZ2FsLXBsYXRmb3JtLWJhY2tlbmQvbGVnYWwtc29mdHdhcmUtcGxhdGZvcm0vbm9kZV9tb2R1bGVzL25lbzRqLWRyaXZlci1jb3JlL2xpYi9pbnRlcm5hbC9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBcIk5lbzRqXCJcbiAqIE5lbzRqIFN3ZWRlbiBBQiBbaHR0cHM6Ly9uZW80ai5jb21dXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucG9vbCA9IGV4cG9ydHMuYm9sdEFnZW50ID0gZXhwb3J0cy5vYmplY3RVdGlsID0gZXhwb3J0cy5yZXNvbHZlciA9IGV4cG9ydHMuc2VydmVyQWRkcmVzcyA9IGV4cG9ydHMudXJsVXRpbCA9IGV4cG9ydHMubG9nZ2VyID0gZXhwb3J0cy50cmFuc2FjdGlvbkV4ZWN1dG9yID0gZXhwb3J0cy50eENvbmZpZyA9IGV4cG9ydHMuY29ubmVjdGlvbkhvbGRlciA9IGV4cG9ydHMuY29uc3RhbnRzID0gZXhwb3J0cy5ib29rbWFya3MgPSBleHBvcnRzLm9ic2VydmVyID0gZXhwb3J0cy50ZW1wb3JhbFV0aWwgPSBleHBvcnRzLnV0aWwgPSB2b2lkIDA7XG52YXIgdXRpbCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91dGlsXCIpKTtcbmV4cG9ydHMudXRpbCA9IHV0aWw7XG52YXIgdGVtcG9yYWxVdGlsID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3RlbXBvcmFsLXV0aWxcIikpO1xuZXhwb3J0cy50ZW1wb3JhbFV0aWwgPSB0ZW1wb3JhbFV0aWw7XG52YXIgb2JzZXJ2ZXIgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vb2JzZXJ2ZXJzXCIpKTtcbmV4cG9ydHMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcbnZhciBib29rbWFya3MgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vYm9va21hcmtzXCIpKTtcbmV4cG9ydHMuYm9va21hcmtzID0gYm9va21hcmtzO1xudmFyIGNvbnN0YW50cyA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdGFudHNcIikpO1xuZXhwb3J0cy5jb25zdGFudHMgPSBjb25zdGFudHM7XG52YXIgY29ubmVjdGlvbkhvbGRlciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9jb25uZWN0aW9uLWhvbGRlclwiKSk7XG5leHBvcnRzLmNvbm5lY3Rpb25Ib2xkZXIgPSBjb25uZWN0aW9uSG9sZGVyO1xudmFyIHR4Q29uZmlnID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3R4LWNvbmZpZ1wiKSk7XG5leHBvcnRzLnR4Q29uZmlnID0gdHhDb25maWc7XG52YXIgdHJhbnNhY3Rpb25FeGVjdXRvciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi90cmFuc2FjdGlvbi1leGVjdXRvclwiKSk7XG5leHBvcnRzLnRyYW5zYWN0aW9uRXhlY3V0b3IgPSB0cmFuc2FjdGlvbkV4ZWN1dG9yO1xudmFyIGxvZ2dlciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9sb2dnZXJcIikpO1xuZXhwb3J0cy5sb2dnZXIgPSBsb2dnZXI7XG52YXIgdXJsVXRpbCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi91cmwtdXRpbFwiKSk7XG5leHBvcnRzLnVybFV0aWwgPSB1cmxVdGlsO1xudmFyIHNlcnZlckFkZHJlc3MgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vc2VydmVyLWFkZHJlc3NcIikpO1xuZXhwb3J0cy5zZXJ2ZXJBZGRyZXNzID0gc2VydmVyQWRkcmVzcztcbnZhciByZXNvbHZlciA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9yZXNvbHZlclwiKSk7XG5leHBvcnRzLnJlc29sdmVyID0gcmVzb2x2ZXI7XG52YXIgb2JqZWN0VXRpbCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9vYmplY3QtdXRpbFwiKSk7XG5leHBvcnRzLm9iamVjdFV0aWwgPSBvYmplY3RVdGlsO1xudmFyIGJvbHRBZ2VudCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9ib2x0LWFnZW50L2luZGV4XCIpKTtcbmV4cG9ydHMuYm9sdEFnZW50ID0gYm9sdEFnZW50O1xudmFyIHBvb2wgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIi4vcG9vbFwiKSk7XG5leHBvcnRzLnBvb2wgPSBwb29sO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/logger.js":
/*!***************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/logger.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Logger = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar ERROR = 'error';\nvar WARN = 'warn';\nvar INFO = 'info';\nvar DEBUG = 'debug';\nvar DEFAULT_LEVEL = INFO;\nvar levels = (_a = {},\n    _a[ERROR] = 0,\n    _a[WARN] = 1,\n    _a[INFO] = 2,\n    _a[DEBUG] = 3,\n    _a);\n/**\n * Logger used by the driver to notify about various internal events. Single logger should be used per driver.\n */\nvar Logger = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {string} level the enabled logging level.\n     * @param {function(level: string, message: string)} loggerFunction the function to write the log level and message.\n     */\n    function Logger(level, loggerFunction) {\n        this._level = level;\n        this._loggerFunction = loggerFunction;\n    }\n    /**\n     * Create a new logger based on the given driver configuration.\n     * @param {Object} driverConfig the driver configuration as supplied by the user.\n     * @return {Logger} a new logger instance or a no-op logger when not configured.\n     */\n    Logger.create = function (driverConfig) {\n        if ((driverConfig === null || driverConfig === void 0 ? void 0 : driverConfig.logging) != null) {\n            var loggingConfig = driverConfig.logging;\n            var level = extractConfiguredLevel(loggingConfig);\n            var loggerFunction = extractConfiguredLogger(loggingConfig);\n            return new Logger(level, loggerFunction);\n        }\n        return this.noOp();\n    };\n    /**\n     * Create a no-op logger implementation.\n     * @return {Logger} the no-op logger implementation.\n     */\n    Logger.noOp = function () {\n        return noOpLogger;\n    };\n    /**\n     * Check if error logging is enabled, i.e. it is not a no-op implementation.\n     * @return {boolean} `true` when enabled, `false` otherwise.\n     */\n    Logger.prototype.isErrorEnabled = function () {\n        return isLevelEnabled(this._level, ERROR);\n    };\n    /**\n     * Log an error message.\n     * @param {string} message the message to log.\n     */\n    Logger.prototype.error = function (message) {\n        if (this.isErrorEnabled()) {\n            this._loggerFunction(ERROR, message);\n        }\n    };\n    /**\n     * Check if warn logging is enabled, i.e. it is not a no-op implementation.\n     * @return {boolean} `true` when enabled, `false` otherwise.\n     */\n    Logger.prototype.isWarnEnabled = function () {\n        return isLevelEnabled(this._level, WARN);\n    };\n    /**\n     * Log an warning message.\n     * @param {string} message the message to log.\n     */\n    Logger.prototype.warn = function (message) {\n        if (this.isWarnEnabled()) {\n            this._loggerFunction(WARN, message);\n        }\n    };\n    /**\n     * Check if info logging is enabled, i.e. it is not a no-op implementation.\n     * @return {boolean} `true` when enabled, `false` otherwise.\n     */\n    Logger.prototype.isInfoEnabled = function () {\n        return isLevelEnabled(this._level, INFO);\n    };\n    /**\n     * Log an info message.\n     * @param {string} message the message to log.\n     */\n    Logger.prototype.info = function (message) {\n        if (this.isInfoEnabled()) {\n            this._loggerFunction(INFO, message);\n        }\n    };\n    /**\n     * Check if debug logging is enabled, i.e. it is not a no-op implementation.\n     * @return {boolean} `true` when enabled, `false` otherwise.\n     */\n    Logger.prototype.isDebugEnabled = function () {\n        return isLevelEnabled(this._level, DEBUG);\n    };\n    /**\n     * Log a debug message.\n     * @param {string} message the message to log.\n     */\n    Logger.prototype.debug = function (message) {\n        if (this.isDebugEnabled()) {\n            this._loggerFunction(DEBUG, message);\n        }\n    };\n    return Logger;\n}());\nexports.Logger = Logger;\nvar NoOpLogger = /** @class */ (function (_super) {\n    __extends(NoOpLogger, _super);\n    function NoOpLogger() {\n        return _super.call(this, INFO, function (level, message) { }) || this;\n    }\n    NoOpLogger.prototype.isErrorEnabled = function () {\n        return false;\n    };\n    NoOpLogger.prototype.error = function (message) { };\n    NoOpLogger.prototype.isWarnEnabled = function () {\n        return false;\n    };\n    NoOpLogger.prototype.warn = function (message) { };\n    NoOpLogger.prototype.isInfoEnabled = function () {\n        return false;\n    };\n    NoOpLogger.prototype.info = function (message) { };\n    NoOpLogger.prototype.isDebugEnabled = function () {\n        return false;\n    };\n    NoOpLogger.prototype.debug = function (message) { };\n    return NoOpLogger;\n}(Logger));\nvar noOpLogger = new NoOpLogger();\n/**\n * Check if the given logging level is enabled.\n * @param {string} configuredLevel the configured level.\n * @param {string} targetLevel the level to check.\n * @return {boolean} value of `true` when enabled, `false` otherwise.\n */\nfunction isLevelEnabled(configuredLevel, targetLevel) {\n    return levels[configuredLevel] >= levels[targetLevel];\n}\n/**\n * Extract the configured logging level from the driver's logging configuration.\n * @param {Object} loggingConfig the logging configuration.\n * @return {string} the configured log level or default when none configured.\n */\nfunction extractConfiguredLevel(loggingConfig) {\n    if ((loggingConfig === null || loggingConfig === void 0 ? void 0 : loggingConfig.level) != null) {\n        var configuredLevel = loggingConfig.level;\n        var value = levels[configuredLevel];\n        if (value == null && value !== 0) {\n            throw (0, error_1.newError)(\"Illegal logging level: \".concat(configuredLevel, \". Supported levels are: \").concat(Object.keys(levels).toString()));\n        }\n        return configuredLevel;\n    }\n    return DEFAULT_LEVEL;\n}\n/**\n * Extract the configured logger function from the driver's logging configuration.\n * @param {Object} loggingConfig the logging configuration.\n * @return {function(level: string, message: string)} the configured logging function.\n */\nfunction extractConfiguredLogger(loggingConfig) {\n    var _a, _b;\n    if ((loggingConfig === null || loggingConfig === void 0 ? void 0 : loggingConfig.logger) != null) {\n        var configuredLogger = loggingConfig.logger;\n        if (configuredLogger != null && typeof configuredLogger === 'function') {\n            return configuredLogger;\n        }\n    }\n    throw (0, error_1.newError)(\"Illegal logger function: \".concat((_b = (_a = loggingConfig === null || loggingConfig === void 0 ? void 0 : loggingConfig.logger) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : 'undefined'));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/logger.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/object-util.js":
/*!********************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/object-util.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getBrokenObjectReason = exports.isBrokenObject = exports.createBrokenObject = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar __isBrokenObject__ = '__isBrokenObject__';\n// eslint-disable-next-line @typescript-eslint/naming-convention\nvar __reason__ = '__reason__';\n/**\n * Creates a object which all method call will throw the given error\n *\n * @param {Error} error The error\n * @param {any} object The object. Default: {}\n * @returns {any} A broken object\n */\nfunction createBrokenObject(error, object) {\n    if (object === void 0) { object = {}; }\n    var fail = function () {\n        throw error;\n    };\n    return new Proxy(object, {\n        get: function (_, p) {\n            if (p === __isBrokenObject__) {\n                return true;\n            }\n            else if (p === __reason__) {\n                return error;\n            }\n            else if (p === 'toJSON') {\n                return undefined;\n            }\n            fail();\n        },\n        set: fail,\n        apply: fail,\n        construct: fail,\n        defineProperty: fail,\n        deleteProperty: fail,\n        getOwnPropertyDescriptor: fail,\n        getPrototypeOf: fail,\n        has: fail,\n        isExtensible: fail,\n        ownKeys: fail,\n        preventExtensions: fail,\n        setPrototypeOf: fail\n    });\n}\nexports.createBrokenObject = createBrokenObject;\n/**\n * Verifies if it is a Broken Object\n * @param {any} object The object\n * @returns {boolean} If it was created with createBrokenObject\n */\nfunction isBrokenObject(object) {\n    return object !== null && typeof object === 'object' && object[__isBrokenObject__] === true;\n}\nexports.isBrokenObject = isBrokenObject;\n/**\n * Returns if the reason the object is broken.\n *\n * This method should only be called with instances create with {@link createBrokenObject}\n *\n * @param {any} object The object\n * @returns {Error} The reason the object is broken\n */\nfunction getBrokenObjectReason(object) {\n    return object[__reason__];\n}\nexports.getBrokenObjectReason = getBrokenObjectReason;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL29iamVjdC11dGlsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QixHQUFHLHNCQUFzQixHQUFHLDBCQUEwQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCLFdBQVcsS0FBSztBQUNoQixhQUFhLEtBQUs7QUFDbEI7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEIsYUFBYSxTQUFTO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRTtBQUNqRTtBQUNBLFdBQVcsS0FBSztBQUNoQixhQUFhLE9BQU87QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIiLCJzb3VyY2VzIjpbIi9ob21lL2pwaWNjODY4MS9wcm9kLXN5c3RlbS9kb2NrZXItZGV2L2xlZ2FsLXBsYXRmb3JtLWJhY2tlbmQvbGVnYWwtc29mdHdhcmUtcGxhdGZvcm0vbm9kZV9tb2R1bGVzL25lbzRqLWRyaXZlci1jb3JlL2xpYi9pbnRlcm5hbC9vYmplY3QtdXRpbC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0QnJva2VuT2JqZWN0UmVhc29uID0gZXhwb3J0cy5pc0Jyb2tlbk9iamVjdCA9IGV4cG9ydHMuY3JlYXRlQnJva2VuT2JqZWN0ID0gdm9pZCAwO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFwiTmVvNGpcIlxuICogTmVvNGogU3dlZGVuIEFCIFtodHRwczovL25lbzRqLmNvbV1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbnZhciBfX2lzQnJva2VuT2JqZWN0X18gPSAnX19pc0Jyb2tlbk9iamVjdF9fJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbmFtaW5nLWNvbnZlbnRpb25cbnZhciBfX3JlYXNvbl9fID0gJ19fcmVhc29uX18nO1xuLyoqXG4gKiBDcmVhdGVzIGEgb2JqZWN0IHdoaWNoIGFsbCBtZXRob2QgY2FsbCB3aWxsIHRocm93IHRoZSBnaXZlbiBlcnJvclxuICpcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yIFRoZSBlcnJvclxuICogQHBhcmFtIHthbnl9IG9iamVjdCBUaGUgb2JqZWN0LiBEZWZhdWx0OiB7fVxuICogQHJldHVybnMge2FueX0gQSBicm9rZW4gb2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJyb2tlbk9iamVjdChlcnJvciwgb2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PT0gdm9pZCAwKSB7IG9iamVjdCA9IHt9OyB9XG4gICAgdmFyIGZhaWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH07XG4gICAgcmV0dXJuIG5ldyBQcm94eShvYmplY3QsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoXywgcCkge1xuICAgICAgICAgICAgaWYgKHAgPT09IF9faXNCcm9rZW5PYmplY3RfXykge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocCA9PT0gX19yZWFzb25fXykge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHAgPT09ICd0b0pTT04nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZhaWwoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmYWlsLFxuICAgICAgICBhcHBseTogZmFpbCxcbiAgICAgICAgY29uc3RydWN0OiBmYWlsLFxuICAgICAgICBkZWZpbmVQcm9wZXJ0eTogZmFpbCxcbiAgICAgICAgZGVsZXRlUHJvcGVydHk6IGZhaWwsXG4gICAgICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogZmFpbCxcbiAgICAgICAgZ2V0UHJvdG90eXBlT2Y6IGZhaWwsXG4gICAgICAgIGhhczogZmFpbCxcbiAgICAgICAgaXNFeHRlbnNpYmxlOiBmYWlsLFxuICAgICAgICBvd25LZXlzOiBmYWlsLFxuICAgICAgICBwcmV2ZW50RXh0ZW5zaW9uczogZmFpbCxcbiAgICAgICAgc2V0UHJvdG90eXBlT2Y6IGZhaWxcbiAgICB9KTtcbn1cbmV4cG9ydHMuY3JlYXRlQnJva2VuT2JqZWN0ID0gY3JlYXRlQnJva2VuT2JqZWN0O1xuLyoqXG4gKiBWZXJpZmllcyBpZiBpdCBpcyBhIEJyb2tlbiBPYmplY3RcbiAqIEBwYXJhbSB7YW55fSBvYmplY3QgVGhlIG9iamVjdFxuICogQHJldHVybnMge2Jvb2xlYW59IElmIGl0IHdhcyBjcmVhdGVkIHdpdGggY3JlYXRlQnJva2VuT2JqZWN0XG4gKi9cbmZ1bmN0aW9uIGlzQnJva2VuT2JqZWN0KG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgIT09IG51bGwgJiYgdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiYgb2JqZWN0W19faXNCcm9rZW5PYmplY3RfX10gPT09IHRydWU7XG59XG5leHBvcnRzLmlzQnJva2VuT2JqZWN0ID0gaXNCcm9rZW5PYmplY3Q7XG4vKipcbiAqIFJldHVybnMgaWYgdGhlIHJlYXNvbiB0aGUgb2JqZWN0IGlzIGJyb2tlbi5cbiAqXG4gKiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2l0aCBpbnN0YW5jZXMgY3JlYXRlIHdpdGgge0BsaW5rIGNyZWF0ZUJyb2tlbk9iamVjdH1cbiAqXG4gKiBAcGFyYW0ge2FueX0gb2JqZWN0IFRoZSBvYmplY3RcbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIHJlYXNvbiB0aGUgb2JqZWN0IGlzIGJyb2tlblxuICovXG5mdW5jdGlvbiBnZXRCcm9rZW5PYmplY3RSZWFzb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdFtfX3JlYXNvbl9fXTtcbn1cbmV4cG9ydHMuZ2V0QnJva2VuT2JqZWN0UmVhc29uID0gZ2V0QnJva2VuT2JqZWN0UmVhc29uO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/object-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/observers.js":
/*!******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/observers.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.FailedObserver = exports.CompletedObserver = void 0;\nvar CompletedObserver = /** @class */ (function () {\n    function CompletedObserver() {\n    }\n    CompletedObserver.prototype.subscribe = function (observer) {\n        apply(observer, observer.onKeys, []);\n        apply(observer, observer.onCompleted, {});\n    };\n    CompletedObserver.prototype.cancel = function () {\n        // do nothing\n    };\n    CompletedObserver.prototype.pause = function () {\n        // do nothing\n    };\n    CompletedObserver.prototype.resume = function () {\n        // do nothing\n    };\n    CompletedObserver.prototype.prepareToHandleSingleResponse = function () {\n        // do nothing\n    };\n    CompletedObserver.prototype.markCompleted = function () {\n        // do nothing\n    };\n    CompletedObserver.prototype.onError = function (error) {\n        // nothing to do, already finished\n        // eslint-disable-next-line\n        // @ts-ignore: not available in ES oldest supported version\n        throw new Error('CompletedObserver not supposed to call onError', { cause: error });\n    };\n    return CompletedObserver;\n}());\nexports.CompletedObserver = CompletedObserver;\nvar FailedObserver = /** @class */ (function () {\n    function FailedObserver(_a) {\n        var error = _a.error, onError = _a.onError;\n        this._error = error;\n        this._beforeError = onError;\n        this._observers = [];\n        this.onError(error);\n    }\n    FailedObserver.prototype.subscribe = function (observer) {\n        apply(observer, observer.onError, this._error);\n        this._observers.push(observer);\n    };\n    FailedObserver.prototype.onError = function (error) {\n        apply(this, this._beforeError, error);\n        this._observers.forEach(function (o) { return apply(o, o.onError, error); });\n    };\n    FailedObserver.prototype.cancel = function () {\n        // do nothing\n    };\n    FailedObserver.prototype.pause = function () {\n        // do nothing\n    };\n    FailedObserver.prototype.resume = function () {\n        // do nothing\n    };\n    FailedObserver.prototype.markCompleted = function () {\n        // do nothing\n    };\n    FailedObserver.prototype.prepareToHandleSingleResponse = function () {\n        // do nothing\n    };\n    return FailedObserver;\n}());\nexports.FailedObserver = FailedObserver;\nfunction apply(thisArg, func, param) {\n    if (func != null) {\n        func.bind(thisArg)(param);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL29ic2VydmVycy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLHlCQUF5QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsY0FBYztBQUMxRjtBQUNBO0FBQ0EsQ0FBQztBQUNELHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLG9DQUFvQztBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvaW50ZXJuYWwvb2JzZXJ2ZXJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFwiTmVvNGpcIlxuICogTmVvNGogU3dlZGVuIEFCIFtodHRwczovL25lbzRqLmNvbV1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRmFpbGVkT2JzZXJ2ZXIgPSBleHBvcnRzLkNvbXBsZXRlZE9ic2VydmVyID0gdm9pZCAwO1xudmFyIENvbXBsZXRlZE9ic2VydmVyID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbXBsZXRlZE9ic2VydmVyKCkge1xuICAgIH1cbiAgICBDb21wbGV0ZWRPYnNlcnZlci5wcm90b3R5cGUuc3Vic2NyaWJlID0gZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgIGFwcGx5KG9ic2VydmVyLCBvYnNlcnZlci5vbktleXMsIFtdKTtcbiAgICAgICAgYXBwbHkob2JzZXJ2ZXIsIG9ic2VydmVyLm9uQ29tcGxldGVkLCB7fSk7XG4gICAgfTtcbiAgICBDb21wbGV0ZWRPYnNlcnZlci5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBkbyBub3RoaW5nXG4gICAgfTtcbiAgICBDb21wbGV0ZWRPYnNlcnZlci5wcm90b3R5cGUucGF1c2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9O1xuICAgIENvbXBsZXRlZE9ic2VydmVyLnByb3RvdHlwZS5yZXN1bWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9O1xuICAgIENvbXBsZXRlZE9ic2VydmVyLnByb3RvdHlwZS5wcmVwYXJlVG9IYW5kbGVTaW5nbGVSZXNwb25zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH07XG4gICAgQ29tcGxldGVkT2JzZXJ2ZXIucHJvdG90eXBlLm1hcmtDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9O1xuICAgIENvbXBsZXRlZE9ic2VydmVyLnByb3RvdHlwZS5vbkVycm9yID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgICAgIC8vIG5vdGhpbmcgdG8gZG8sIGFscmVhZHkgZmluaXNoZWRcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgICAgIC8vIEB0cy1pZ25vcmU6IG5vdCBhdmFpbGFibGUgaW4gRVMgb2xkZXN0IHN1cHBvcnRlZCB2ZXJzaW9uXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcGxldGVkT2JzZXJ2ZXIgbm90IHN1cHBvc2VkIHRvIGNhbGwgb25FcnJvcicsIHsgY2F1c2U6IGVycm9yIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIENvbXBsZXRlZE9ic2VydmVyO1xufSgpKTtcbmV4cG9ydHMuQ29tcGxldGVkT2JzZXJ2ZXIgPSBDb21wbGV0ZWRPYnNlcnZlcjtcbnZhciBGYWlsZWRPYnNlcnZlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGYWlsZWRPYnNlcnZlcihfYSkge1xuICAgICAgICB2YXIgZXJyb3IgPSBfYS5lcnJvciwgb25FcnJvciA9IF9hLm9uRXJyb3I7XG4gICAgICAgIHRoaXMuX2Vycm9yID0gZXJyb3I7XG4gICAgICAgIHRoaXMuX2JlZm9yZUVycm9yID0gb25FcnJvcjtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzID0gW107XG4gICAgICAgIHRoaXMub25FcnJvcihlcnJvcik7XG4gICAgfVxuICAgIEZhaWxlZE9ic2VydmVyLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgYXBwbHkob2JzZXJ2ZXIsIG9ic2VydmVyLm9uRXJyb3IsIHRoaXMuX2Vycm9yKTtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgIH07XG4gICAgRmFpbGVkT2JzZXJ2ZXIucHJvdG90eXBlLm9uRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICAgICAgYXBwbHkodGhpcywgdGhpcy5fYmVmb3JlRXJyb3IsIGVycm9yKTtcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzLmZvckVhY2goZnVuY3Rpb24gKG8pIHsgcmV0dXJuIGFwcGx5KG8sIG8ub25FcnJvciwgZXJyb3IpOyB9KTtcbiAgICB9O1xuICAgIEZhaWxlZE9ic2VydmVyLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9O1xuICAgIEZhaWxlZE9ic2VydmVyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH07XG4gICAgRmFpbGVkT2JzZXJ2ZXIucHJvdG90eXBlLnJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH07XG4gICAgRmFpbGVkT2JzZXJ2ZXIucHJvdG90eXBlLm1hcmtDb21wbGV0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmdcbiAgICB9O1xuICAgIEZhaWxlZE9ic2VydmVyLnByb3RvdHlwZS5wcmVwYXJlVG9IYW5kbGVTaW5nbGVSZXNwb25zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgIH07XG4gICAgcmV0dXJuIEZhaWxlZE9ic2VydmVyO1xufSgpKTtcbmV4cG9ydHMuRmFpbGVkT2JzZXJ2ZXIgPSBGYWlsZWRPYnNlcnZlcjtcbmZ1bmN0aW9uIGFwcGx5KHRoaXNBcmcsIGZ1bmMsIHBhcmFtKSB7XG4gICAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgICAgICBmdW5jLmJpbmQodGhpc0FyZykocGFyYW0pO1xuICAgIH1cbn1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/observers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/index.js":
/*!*******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/pool/index.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_MAX_SIZE = exports.DEFAULT_ACQUISITION_TIMEOUT = exports.PoolConfig = exports.Pool = void 0;\nvar pool_config_1 = __importStar(__webpack_require__(/*! ./pool-config */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/pool-config.js\"));\nexports.PoolConfig = pool_config_1.default;\nObject.defineProperty(exports, \"DEFAULT_ACQUISITION_TIMEOUT\", ({ enumerable: true, get: function () { return pool_config_1.DEFAULT_ACQUISITION_TIMEOUT; } }));\nObject.defineProperty(exports, \"DEFAULT_MAX_SIZE\", ({ enumerable: true, get: function () { return pool_config_1.DEFAULT_MAX_SIZE; } }));\nvar pool_1 = __importDefault(__webpack_require__(/*! ./pool */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/pool.js\"));\nexports.Pool = pool_1.default;\nexports[\"default\"] = pool_1.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3Bvb2wvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0IsR0FBRyxtQ0FBbUMsR0FBRyxrQkFBa0IsR0FBRyxZQUFZO0FBQ2xHLGlDQUFpQyxtQkFBTyxDQUFDLDhGQUFlO0FBQ3hELGtCQUFrQjtBQUNsQiwrREFBOEQsRUFBRSxxQ0FBcUMscURBQXFELEVBQUM7QUFDM0osb0RBQW1ELEVBQUUscUNBQXFDLDBDQUEwQyxFQUFDO0FBQ3JJLDZCQUE2QixtQkFBTyxDQUFDLGdGQUFRO0FBQzdDLFlBQVk7QUFDWixrQkFBZSIsInNvdXJjZXMiOlsiL2hvbWUvanBpY2M4NjgxL3Byb2Qtc3lzdGVtL2RvY2tlci1kZXYvbGVnYWwtcGxhdGZvcm0tYmFja2VuZC9sZWdhbC1zb2Z0d2FyZS1wbGF0Zm9ybS9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3Bvb2wvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIENvcHlyaWdodCAoYykgXCJOZW80alwiXG4gKiBOZW80aiBTd2VkZW4gQUIgW2h0dHBzOi8vbmVvNGouY29tXVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRFRkFVTFRfTUFYX1NJWkUgPSBleHBvcnRzLkRFRkFVTFRfQUNRVUlTSVRJT05fVElNRU9VVCA9IGV4cG9ydHMuUG9vbENvbmZpZyA9IGV4cG9ydHMuUG9vbCA9IHZvaWQgMDtcbnZhciBwb29sX2NvbmZpZ18xID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3Bvb2wtY29uZmlnXCIpKTtcbmV4cG9ydHMuUG9vbENvbmZpZyA9IHBvb2xfY29uZmlnXzEuZGVmYXVsdDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkRFRkFVTFRfQUNRVUlTSVRJT05fVElNRU9VVFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gcG9vbF9jb25maWdfMS5ERUZBVUxUX0FDUVVJU0lUSU9OX1RJTUVPVVQ7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJERUZBVUxUX01BWF9TSVpFXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBwb29sX2NvbmZpZ18xLkRFRkFVTFRfTUFYX1NJWkU7IH0gfSk7XG52YXIgcG9vbF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL3Bvb2xcIikpO1xuZXhwb3J0cy5Qb29sID0gcG9vbF8xLmRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBwb29sXzEuZGVmYXVsdDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/pool-config.js":
/*!*************************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/pool/pool-config.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_ACQUISITION_TIMEOUT = exports.DEFAULT_MAX_SIZE = void 0;\nvar DEFAULT_MAX_SIZE = 100;\nexports.DEFAULT_MAX_SIZE = DEFAULT_MAX_SIZE;\nvar DEFAULT_ACQUISITION_TIMEOUT = 60 * 1000; // 60 seconds\nexports.DEFAULT_ACQUISITION_TIMEOUT = DEFAULT_ACQUISITION_TIMEOUT;\nvar PoolConfig = /** @class */ (function () {\n    function PoolConfig(maxSize, acquisitionTimeout) {\n        this.maxSize = valueOrDefault(maxSize, DEFAULT_MAX_SIZE);\n        this.acquisitionTimeout = valueOrDefault(acquisitionTimeout, DEFAULT_ACQUISITION_TIMEOUT);\n    }\n    PoolConfig.defaultConfig = function () {\n        return new PoolConfig(DEFAULT_MAX_SIZE, DEFAULT_ACQUISITION_TIMEOUT);\n    };\n    PoolConfig.fromDriverConfig = function (config) {\n        var maxSize = isConfigured(config.maxConnectionPoolSize)\n            ? config.maxConnectionPoolSize\n            : DEFAULT_MAX_SIZE;\n        var acquisitionTimeout = isConfigured(config.connectionAcquisitionTimeout)\n            ? config.connectionAcquisitionTimeout\n            : DEFAULT_ACQUISITION_TIMEOUT;\n        return new PoolConfig(maxSize, acquisitionTimeout);\n    };\n    return PoolConfig;\n}());\nexports[\"default\"] = PoolConfig;\nfunction valueOrDefault(value, defaultValue) {\n    return isConfigured(value) ? value : defaultValue;\n}\nfunction isConfigured(value) {\n    return value === 0 || value != null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3Bvb2wvcG9vbC1jb25maWcuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQ0FBbUMsR0FBRyx3QkFBd0I7QUFDOUQ7QUFDQSx3QkFBd0I7QUFDeEIsNkNBQTZDO0FBQzdDLG1DQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIi9ob21lL2pwaWNjODY4MS9wcm9kLXN5c3RlbS9kb2NrZXItZGV2L2xlZ2FsLXBsYXRmb3JtLWJhY2tlbmQvbGVnYWwtc29mdHdhcmUtcGxhdGZvcm0vbm9kZV9tb2R1bGVzL25lbzRqLWRyaXZlci1jb3JlL2xpYi9pbnRlcm5hbC9wb29sL3Bvb2wtY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFwiTmVvNGpcIlxuICogTmVvNGogU3dlZGVuIEFCIFtodHRwczovL25lbzRqLmNvbV1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVGQVVMVF9BQ1FVSVNJVElPTl9USU1FT1VUID0gZXhwb3J0cy5ERUZBVUxUX01BWF9TSVpFID0gdm9pZCAwO1xudmFyIERFRkFVTFRfTUFYX1NJWkUgPSAxMDA7XG5leHBvcnRzLkRFRkFVTFRfTUFYX1NJWkUgPSBERUZBVUxUX01BWF9TSVpFO1xudmFyIERFRkFVTFRfQUNRVUlTSVRJT05fVElNRU9VVCA9IDYwICogMTAwMDsgLy8gNjAgc2Vjb25kc1xuZXhwb3J0cy5ERUZBVUxUX0FDUVVJU0lUSU9OX1RJTUVPVVQgPSBERUZBVUxUX0FDUVVJU0lUSU9OX1RJTUVPVVQ7XG52YXIgUG9vbENvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQb29sQ29uZmlnKG1heFNpemUsIGFjcXVpc2l0aW9uVGltZW91dCkge1xuICAgICAgICB0aGlzLm1heFNpemUgPSB2YWx1ZU9yRGVmYXVsdChtYXhTaXplLCBERUZBVUxUX01BWF9TSVpFKTtcbiAgICAgICAgdGhpcy5hY3F1aXNpdGlvblRpbWVvdXQgPSB2YWx1ZU9yRGVmYXVsdChhY3F1aXNpdGlvblRpbWVvdXQsIERFRkFVTFRfQUNRVUlTSVRJT05fVElNRU9VVCk7XG4gICAgfVxuICAgIFBvb2xDb25maWcuZGVmYXVsdENvbmZpZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQb29sQ29uZmlnKERFRkFVTFRfTUFYX1NJWkUsIERFRkFVTFRfQUNRVUlTSVRJT05fVElNRU9VVCk7XG4gICAgfTtcbiAgICBQb29sQ29uZmlnLmZyb21Ecml2ZXJDb25maWcgPSBmdW5jdGlvbiAoY29uZmlnKSB7XG4gICAgICAgIHZhciBtYXhTaXplID0gaXNDb25maWd1cmVkKGNvbmZpZy5tYXhDb25uZWN0aW9uUG9vbFNpemUpXG4gICAgICAgICAgICA/IGNvbmZpZy5tYXhDb25uZWN0aW9uUG9vbFNpemVcbiAgICAgICAgICAgIDogREVGQVVMVF9NQVhfU0laRTtcbiAgICAgICAgdmFyIGFjcXVpc2l0aW9uVGltZW91dCA9IGlzQ29uZmlndXJlZChjb25maWcuY29ubmVjdGlvbkFjcXVpc2l0aW9uVGltZW91dClcbiAgICAgICAgICAgID8gY29uZmlnLmNvbm5lY3Rpb25BY3F1aXNpdGlvblRpbWVvdXRcbiAgICAgICAgICAgIDogREVGQVVMVF9BQ1FVSVNJVElPTl9USU1FT1VUO1xuICAgICAgICByZXR1cm4gbmV3IFBvb2xDb25maWcobWF4U2l6ZSwgYWNxdWlzaXRpb25UaW1lb3V0KTtcbiAgICB9O1xuICAgIHJldHVybiBQb29sQ29uZmlnO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IFBvb2xDb25maWc7XG5mdW5jdGlvbiB2YWx1ZU9yRGVmYXVsdCh2YWx1ZSwgZGVmYXVsdFZhbHVlKSB7XG4gICAgcmV0dXJuIGlzQ29uZmlndXJlZCh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cbmZ1bmN0aW9uIGlzQ29uZmlndXJlZCh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCB8fCB2YWx1ZSAhPSBudWxsO1xufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/pool-config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/pool.js":
/*!******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/pool/pool.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar pool_config_1 = __importDefault(__webpack_require__(/*! ./pool-config */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/pool-config.js\"));\nvar error_1 = __webpack_require__(/*! ../../error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar logger_1 = __webpack_require__(/*! ../logger */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/logger.js\");\nvar Pool = /** @class */ (function () {\n    /**\n     * @param {function(acquisitionContext: object, address: ServerAddress, function(address: ServerAddress, resource: object): Promise<object>): Promise<object>} create\n     *                an allocation function that creates a promise with a new resource. It's given an address for which to\n     *                allocate the connection and a function that will return the resource to the pool if invoked, which is\n     *                meant to be called on .dispose or .close or whatever mechanism the resource uses to finalize.\n     * @param {function(acquisitionContext: object, resource: object): boolean} validateOnAcquire\n     *                called at various times when an instance is acquired\n     *                If this returns false, the resource will be evicted\n     * @param {function(resource: object): boolean} validateOnRelease\n     *                called at various times when an instance is released\n     *                If this returns false, the resource will be evicted\n     * @param {function(resource: object): Promise<void>} destroy\n     *                called with the resource when it is evicted from this pool\n     * @param {function(resource: object, observer: { onError }): void} installIdleObserver\n     *                called when the resource is released back to pool\n     * @param {function(resource: object): void} removeIdleObserver\n     *                called when the resource is acquired from the pool\n     * @param {PoolConfig} config configuration for the new driver.\n     * @param {Logger} log the driver logger.\n     */\n    function Pool(_a) {\n        var _b = _a.create, create = _b === void 0 ? function (acquisitionContext, address, release) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, Promise.reject(new Error('Not implemented'))];\n                case 1: return [2 /*return*/, _a.sent()];\n            }\n        }); }); } : _b, _c = _a.destroy, destroy = _c === void 0 ? function (conn) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, Promise.resolve()];\n                case 1: return [2 /*return*/, _a.sent()];\n            }\n        }); }); } : _c, _d = _a.validateOnAcquire, validateOnAcquire = _d === void 0 ? function (acquisitionContext, conn) { return true; } : _d, _e = _a.validateOnRelease, validateOnRelease = _e === void 0 ? function (conn) { return true; } : _e, _f = _a.installIdleObserver, installIdleObserver = _f === void 0 ? function (conn, observer) { } : _f, _g = _a.removeIdleObserver, removeIdleObserver = _g === void 0 ? function (conn) { } : _g, _h = _a.config, config = _h === void 0 ? pool_config_1.default.defaultConfig() : _h, _j = _a.log, log = _j === void 0 ? logger_1.Logger.noOp() : _j;\n        var _this = this;\n        this._create = create;\n        this._destroy = destroy;\n        this._validateOnAcquire = validateOnAcquire;\n        this._validateOnRelease = validateOnRelease;\n        this._installIdleObserver = installIdleObserver;\n        this._removeIdleObserver = removeIdleObserver;\n        this._maxSize = config.maxSize;\n        this._acquisitionTimeout = config.acquisitionTimeout;\n        this._pools = {};\n        this._pendingCreates = {};\n        this._acquireRequests = {};\n        this._activeResourceCounts = {};\n        this._release = this._release.bind(this);\n        this._log = log;\n        this._closed = false;\n    }\n    /**\n     * Acquire and idle resource fom the pool or create a new one.\n     * @param {object} acquisitionContext the acquisition context used for create and validateOnAcquire connection\n     * @param {ServerAddress} address the address for which we're acquiring.\n     * @param {object} config the config\n     * @param {boolean} config.requireNew Indicate it requires a new resource\n     * @return {Promise<Object>} resource that is ready to use.\n     */\n    Pool.prototype.acquire = function (acquisitionContext, address, config) {\n        return __awaiter(this, void 0, void 0, function () {\n            var key, allRequests, requests;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        key = address.asKey();\n                        allRequests = this._acquireRequests;\n                        requests = allRequests[key];\n                        if (requests == null) {\n                            allRequests[key] = [];\n                        }\n                        return [4 /*yield*/, new Promise(function (resolve, reject) {\n                                var timeoutId = setTimeout(function () {\n                                    // acquisition timeout fired\n                                    // remove request from the queue of pending requests, if it's still there\n                                    // request might've been taken out by the release operation\n                                    var pendingRequests = allRequests[key];\n                                    if (pendingRequests != null) {\n                                        allRequests[key] = pendingRequests.filter(function (item) { return item !== request; });\n                                    }\n                                    if (request.isCompleted()) {\n                                        // request already resolved/rejected by the release operation; nothing to do\n                                    }\n                                    else {\n                                        // request is still pending and needs to be failed\n                                        var activeCount = _this.activeResourceCount(address);\n                                        var idleCount = _this.has(address) ? _this._pools[key].length : 0;\n                                        request.reject((0, error_1.newError)(\"Connection acquisition timed out in \".concat(_this._acquisitionTimeout, \" ms. Pool status: Active conn count = \").concat(activeCount, \", Idle conn count = \").concat(idleCount, \".\")));\n                                    }\n                                }, _this._acquisitionTimeout);\n                                if (typeof timeoutId === 'object') {\n                                    // eslint-disable-next-line\n                                    // @ts-ignore\n                                    timeoutId.unref();\n                                }\n                                var request = new PendingRequest(key, acquisitionContext, config, resolve, reject, timeoutId, _this._log);\n                                allRequests[key].push(request);\n                                _this._processPendingAcquireRequests(address);\n                            })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Destroy all idle resources for the given address.\n     * @param {ServerAddress} address the address of the server to purge its pool.\n     * @returns {Promise<void>} A promise that is resolved when the resources are purged\n     */\n    Pool.prototype.purge = function (address) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._purgeKey(address.asKey())];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    Pool.prototype.apply = function (address, resourceConsumer) {\n        var key = address.asKey();\n        if (key in this._pools) {\n            this._pools[key].apply(resourceConsumer);\n        }\n    };\n    /**\n     * Destroy all idle resources in this pool.\n     * @returns {Promise<void>} A promise that is resolved when the resources are purged\n     */\n    Pool.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        this._closed = true;\n                        return [4 /*yield*/, Promise.all(Object.keys(this._pools).map(function (key) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, this._purgeKey(key)];\n                                    case 1: return [2 /*return*/, _a.sent()];\n                                }\n                            }); }); })).then()];\n                    case 1: \n                    /**\n                     * The lack of Promise consuming was making the driver do not close properly in the scenario\n                     * captured at result.test.js:it('should handle missing onCompleted'). The test was timing out\n                     * because while waiting for the driver close.\n                     *\n                     * Consuming the Promise.all or by calling then or by awaiting in the result inside this method solved\n                     * the issue somehow.\n                     *\n                     * PS: the return of this method was already awaited at PooledConnectionProvider.close, but the await bellow\n                     * seems to be need also.\n                     */\n                    return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Keep the idle resources for the provided addresses and purge the rest.\n     * @returns {Promise<void>} A promise that is resolved when the other resources are purged\n     */\n    Pool.prototype.keepAll = function (addresses) {\n        return __awaiter(this, void 0, void 0, function () {\n            var keysToKeep, keysPresent, keysToPurge;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        keysToKeep = addresses.map(function (a) { return a.asKey(); });\n                        keysPresent = Object.keys(this._pools);\n                        keysToPurge = keysPresent.filter(function (k) { return !keysToKeep.includes(k); });\n                        return [4 /*yield*/, Promise.all(keysToPurge.map(function (key) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n                                switch (_a.label) {\n                                    case 0: return [4 /*yield*/, this._purgeKey(key)];\n                                    case 1: return [2 /*return*/, _a.sent()];\n                                }\n                            }); }); })).then()];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Check if this pool contains resources for the given address.\n     * @param {ServerAddress} address the address of the server to check.\n     * @return {boolean} `true` when pool contains entries for the given key, <code>false</code> otherwise.\n     */\n    Pool.prototype.has = function (address) {\n        return address.asKey() in this._pools;\n    };\n    /**\n     * Get count of active (checked out of the pool) resources for the given key.\n     * @param {ServerAddress} address the address of the server to check.\n     * @return {number} count of resources acquired by clients.\n     */\n    Pool.prototype.activeResourceCount = function (address) {\n        var _a;\n        return (_a = this._activeResourceCounts[address.asKey()]) !== null && _a !== void 0 ? _a : 0;\n    };\n    Pool.prototype._getOrInitializePoolFor = function (key) {\n        var pool = this._pools[key];\n        if (pool == null) {\n            pool = new SingleAddressPool();\n            this._pools[key] = pool;\n            this._pendingCreates[key] = 0;\n        }\n        return pool;\n    };\n    Pool.prototype._acquire = function (acquisitionContext, address, requireNew) {\n        return __awaiter(this, void 0, void 0, function () {\n            var key, pool, resource_1, valid, e_1, numConnections, resource, numConnections, resource_2;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (this._closed) {\n                            throw (0, error_1.newError)('Pool is closed, it is no more able to serve requests.');\n                        }\n                        key = address.asKey();\n                        pool = this._getOrInitializePoolFor(key);\n                        if (!!requireNew) return [3 /*break*/, 10];\n                        _a.label = 1;\n                    case 1:\n                        if (!(pool.length > 0)) return [3 /*break*/, 10];\n                        resource_1 = pool.pop();\n                        if (resource_1 == null) {\n                            return [3 /*break*/, 1];\n                        }\n                        resourceAcquired(key, this._activeResourceCounts);\n                        if (this._removeIdleObserver != null) {\n                            this._removeIdleObserver(resource_1);\n                        }\n                        valid = false;\n                        _a.label = 2;\n                    case 2:\n                        _a.trys.push([2, 4, , 6]);\n                        return [4 /*yield*/, this._validateOnAcquire(acquisitionContext, resource_1)];\n                    case 3:\n                        valid = _a.sent();\n                        return [3 /*break*/, 6];\n                    case 4:\n                        e_1 = _a.sent();\n                        resourceReleased(key, this._activeResourceCounts);\n                        pool.removeInUse(resource_1);\n                        return [4 /*yield*/, this._destroy(resource_1)];\n                    case 5:\n                        _a.sent();\n                        throw e_1;\n                    case 6:\n                        if (!valid) return [3 /*break*/, 7];\n                        // idle resource is valid and can be acquired\n                        if (this._log.isDebugEnabled()) {\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            this._log.debug(\"\".concat(resource_1, \" acquired from the pool \").concat(key));\n                        }\n                        return [2 /*return*/, { resource: resource_1, pool: pool }];\n                    case 7:\n                        resourceReleased(key, this._activeResourceCounts);\n                        pool.removeInUse(resource_1);\n                        return [4 /*yield*/, this._destroy(resource_1)];\n                    case 8:\n                        _a.sent();\n                        _a.label = 9;\n                    case 9: return [3 /*break*/, 1];\n                    case 10:\n                        // Ensure requested max pool size\n                        if (this._maxSize > 0) {\n                            numConnections = this.activeResourceCount(address) + this._pendingCreates[key];\n                            if (numConnections >= this._maxSize) {\n                                // Will put this request in queue instead since the pool is full\n                                return [2 /*return*/, { resource: null, pool: pool }];\n                            }\n                        }\n                        // there exist no idle valid resources, create a new one for acquisition\n                        // Keep track of how many pending creates there are to avoid making too many connections.\n                        this._pendingCreates[key] = this._pendingCreates[key] + 1;\n                        _a.label = 11;\n                    case 11:\n                        _a.trys.push([11, , 15, 16]);\n                        numConnections = this.activeResourceCount(address) + pool.length;\n                        if (!(numConnections >= this._maxSize && requireNew)) return [3 /*break*/, 13];\n                        resource_2 = pool.pop();\n                        if (!(resource_2 != null)) return [3 /*break*/, 13];\n                        if (this._removeIdleObserver != null) {\n                            this._removeIdleObserver(resource_2);\n                        }\n                        pool.removeInUse(resource_2);\n                        return [4 /*yield*/, this._destroy(resource_2)];\n                    case 12:\n                        _a.sent();\n                        _a.label = 13;\n                    case 13: return [4 /*yield*/, this._create(acquisitionContext, address, function (address, resource) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, this._release(address, resource, pool)];\n                                case 1: return [2 /*return*/, _a.sent()];\n                            }\n                        }); }); })];\n                    case 14:\n                        // Invoke callback that creates actual connection\n                        resource = _a.sent();\n                        pool.pushInUse(resource);\n                        resourceAcquired(key, this._activeResourceCounts);\n                        if (this._log.isDebugEnabled()) {\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            this._log.debug(\"\".concat(resource, \" created for the pool \").concat(key));\n                        }\n                        return [3 /*break*/, 16];\n                    case 15:\n                        this._pendingCreates[key] = this._pendingCreates[key] - 1;\n                        return [7 /*endfinally*/];\n                    case 16: return [2 /*return*/, { resource: resource, pool: pool }];\n                }\n            });\n        });\n    };\n    Pool.prototype._release = function (address, resource, pool) {\n        return __awaiter(this, void 0, void 0, function () {\n            var key;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        key = address.asKey();\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 9, 10]);\n                        if (!pool.isActive()) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._validateOnRelease(resource)];\n                    case 2:\n                        if (!!(_a.sent())) return [3 /*break*/, 4];\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            \"\".concat(resource, \" destroyed and can't be released to the pool \").concat(key, \" because it is not functional\"));\n                        }\n                        pool.removeInUse(resource);\n                        return [4 /*yield*/, this._destroy(resource)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4:\n                        if (this._installIdleObserver != null) {\n                            this._installIdleObserver(resource, {\n                                onError: function (error) {\n                                    _this._log.debug(\n                                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                                    \"Idle connection \".concat(resource, \" destroyed because of error: \").concat(error));\n                                    var pool = _this._pools[key];\n                                    if (pool != null) {\n                                        _this._pools[key] = pool.filter(function (r) { return r !== resource; });\n                                        pool.removeInUse(resource);\n                                    }\n                                    // let's not care about background clean-ups due to errors but just trigger the destroy\n                                    // process for the resource, we especially catch any errors and ignore them to avoid\n                                    // unhandled promise rejection warnings\n                                    _this._destroy(resource).catch(function () { });\n                                }\n                            });\n                        }\n                        pool.push(resource);\n                        if (this._log.isDebugEnabled()) {\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            this._log.debug(\"\".concat(resource, \" released to the pool \").concat(key));\n                        }\n                        _a.label = 5;\n                    case 5: return [3 /*break*/, 8];\n                    case 6:\n                        // key has been purged, don't put it back, just destroy the resource\n                        if (this._log.isDebugEnabled()) {\n                            this._log.debug(\n                            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                            \"\".concat(resource, \" destroyed and can't be released to the pool \").concat(key, \" because pool has been purged\"));\n                        }\n                        pool.removeInUse(resource);\n                        return [4 /*yield*/, this._destroy(resource)];\n                    case 7:\n                        _a.sent();\n                        _a.label = 8;\n                    case 8: return [3 /*break*/, 10];\n                    case 9:\n                        resourceReleased(key, this._activeResourceCounts);\n                        this._processPendingAcquireRequests(address);\n                        return [7 /*endfinally*/];\n                    case 10: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Pool.prototype._purgeKey = function (key) {\n        return __awaiter(this, void 0, void 0, function () {\n            var pool, destructionList, resource;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        pool = this._pools[key];\n                        destructionList = [];\n                        if (!(pool != null)) return [3 /*break*/, 2];\n                        while (pool.length > 0) {\n                            resource = pool.pop();\n                            if (resource == null) {\n                                continue;\n                            }\n                            if (this._removeIdleObserver != null) {\n                                this._removeIdleObserver(resource);\n                            }\n                            destructionList.push(this._destroy(resource));\n                        }\n                        pool.close();\n                        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                        delete this._pools[key];\n                        return [4 /*yield*/, Promise.all(destructionList)];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    Pool.prototype._processPendingAcquireRequests = function (address) {\n        var _this = this;\n        var key = address.asKey();\n        var requests = this._acquireRequests[key];\n        if (requests != null) {\n            var pendingRequest_1 = requests.shift(); // pop a pending acquire request\n            if (pendingRequest_1 != null) {\n                this._acquire(pendingRequest_1.context, address, pendingRequest_1.requireNew)\n                    .catch(function (error) {\n                    // failed to acquire/create a new connection to resolve the pending acquire request\n                    // propagate the error by failing the pending request\n                    pendingRequest_1.reject(error);\n                    return { resource: null, pool: null };\n                })\n                    .then(function (_a) {\n                    var resource = _a.resource, pool = _a.pool;\n                    // there is not situation where the pool resource is not null and the\n                    // pool is null.\n                    if (resource != null && pool != null) {\n                        // managed to acquire a valid resource from the pool\n                        if (pendingRequest_1.isCompleted()) {\n                            // request has been completed, most likely failed by a timeout\n                            // return the acquired resource back to the pool\n                            _this._release(address, resource, pool)\n                                .catch(function (error) {\n                                if (_this._log.isDebugEnabled()) {\n                                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                                    _this._log.debug(\"\".concat(resource, \" could not be release back to the pool. Cause: \").concat(error));\n                                }\n                            });\n                        }\n                        else {\n                            // request is still pending and can be resolved with the newly acquired resource\n                            pendingRequest_1.resolve(resource); // resolve the pending request with the acquired resource\n                        }\n                    }\n                    else {\n                        // failed to acquire a valid resource from the pool\n                        // return the pending request back to the pool\n                        if (!pendingRequest_1.isCompleted()) {\n                            if (_this._acquireRequests[key] == null) {\n                                _this._acquireRequests[key] = [];\n                            }\n                            _this._acquireRequests[key].unshift(pendingRequest_1);\n                        }\n                    }\n                }).catch(function (error) { return pendingRequest_1.reject(error); });\n            }\n            else {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete this._acquireRequests[key];\n            }\n        }\n    };\n    return Pool;\n}());\n/**\n * Increment active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\nfunction resourceAcquired(key, activeResourceCounts) {\n    var _a;\n    var currentCount = (_a = activeResourceCounts[key]) !== null && _a !== void 0 ? _a : 0;\n    activeResourceCounts[key] = currentCount + 1;\n}\n/**\n * Decrement active (checked out of the pool) resource counter.\n * @param {string} key the resource group identifier (server address for connections).\n * @param {Object.<string, number>} activeResourceCounts the object holding active counts per key.\n */\nfunction resourceReleased(key, activeResourceCounts) {\n    var _a;\n    var currentCount = (_a = activeResourceCounts[key]) !== null && _a !== void 0 ? _a : 0;\n    var nextCount = currentCount - 1;\n    if (nextCount > 0) {\n        activeResourceCounts[key] = nextCount;\n    }\n    else {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete activeResourceCounts[key];\n    }\n}\nvar PendingRequest = /** @class */ (function () {\n    function PendingRequest(key, context, config, resolve, reject, timeoutId, log) {\n        this._key = key;\n        this._context = context;\n        this._resolve = resolve;\n        this._reject = reject;\n        this._timeoutId = timeoutId;\n        this._log = log;\n        this._completed = false;\n        this._config = config !== null && config !== void 0 ? config : {};\n    }\n    Object.defineProperty(PendingRequest.prototype, \"context\", {\n        get: function () {\n            return this._context;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(PendingRequest.prototype, \"requireNew\", {\n        get: function () {\n            var _a;\n            return (_a = this._config.requireNew) !== null && _a !== void 0 ? _a : false;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    PendingRequest.prototype.isCompleted = function () {\n        return this._completed;\n    };\n    PendingRequest.prototype.resolve = function (resource) {\n        if (this._completed) {\n            return;\n        }\n        this._completed = true;\n        clearTimeout(this._timeoutId);\n        if (this._log.isDebugEnabled()) {\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            this._log.debug(\"\".concat(resource, \" acquired from the pool \").concat(this._key));\n        }\n        this._resolve(resource);\n    };\n    PendingRequest.prototype.reject = function (error) {\n        if (this._completed) {\n            return;\n        }\n        this._completed = true;\n        clearTimeout(this._timeoutId);\n        this._reject(error);\n    };\n    return PendingRequest;\n}());\nvar SingleAddressPool = /** @class */ (function () {\n    function SingleAddressPool() {\n        this._active = true;\n        this._elements = [];\n        this._elementsInUse = new Set();\n    }\n    SingleAddressPool.prototype.isActive = function () {\n        return this._active;\n    };\n    SingleAddressPool.prototype.close = function () {\n        this._active = false;\n        this._elements = [];\n        this._elementsInUse = new Set();\n    };\n    SingleAddressPool.prototype.filter = function (predicate) {\n        this._elements = this._elements.filter(predicate);\n        return this;\n    };\n    SingleAddressPool.prototype.apply = function (resourceConsumer) {\n        this._elements.forEach(resourceConsumer);\n        this._elementsInUse.forEach(resourceConsumer);\n    };\n    Object.defineProperty(SingleAddressPool.prototype, \"length\", {\n        get: function () {\n            return this._elements.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    SingleAddressPool.prototype.pop = function () {\n        var element = this._elements.pop();\n        if (element != null) {\n            this._elementsInUse.add(element);\n        }\n        return element;\n    };\n    SingleAddressPool.prototype.push = function (element) {\n        this._elementsInUse.delete(element);\n        return this._elements.push(element);\n    };\n    SingleAddressPool.prototype.pushInUse = function (element) {\n        this._elementsInUse.add(element);\n    };\n    SingleAddressPool.prototype.removeInUse = function (element) {\n        this._elementsInUse.delete(element);\n    };\n    return SingleAddressPool;\n}());\nexports[\"default\"] = Pool;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/pool/pool.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/query-executor.js":
/*!***********************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/query-executor.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/constants.js\");\nvar QueryExecutor = /** @class */ (function () {\n    function QueryExecutor(_createSession) {\n        this._createSession = _createSession;\n    }\n    QueryExecutor.prototype.execute = function (config, query, parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var session, listenerHandle, executeInTransaction;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        session = this._createSession({\n                            database: config.database,\n                            bookmarkManager: config.bookmarkManager,\n                            impersonatedUser: config.impersonatedUser,\n                            auth: config.auth\n                        });\n                        listenerHandle = installEventListenerWhenPossible(\n                        // Solving linter and types definitions issue\n                        config.signal, 'abort', function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0: return [4 /*yield*/, session.close()];\n                                case 1: return [2 /*return*/, _a.sent()];\n                            }\n                        }); }); });\n                        // @ts-expect-error The method is private for external users\n                        session._configureTransactionExecutor(true, constants_1.TELEMETRY_APIS.EXECUTE_QUERY);\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, , 3, 5]);\n                        executeInTransaction = config.routing === 'READ'\n                            ? session.executeRead.bind(session)\n                            : session.executeWrite.bind(session);\n                        return [4 /*yield*/, executeInTransaction(function (tx) { return __awaiter(_this, void 0, void 0, function () {\n                                var result;\n                                return __generator(this, function (_a) {\n                                    switch (_a.label) {\n                                        case 0:\n                                            result = tx.run(query, parameters);\n                                            return [4 /*yield*/, config.resultTransformer(result)];\n                                        case 1: return [2 /*return*/, _a.sent()];\n                                    }\n                                });\n                            }); }, config.transactionConfig)];\n                    case 2: return [2 /*return*/, _a.sent()];\n                    case 3:\n                        listenerHandle.uninstall();\n                        return [4 /*yield*/, session.close()];\n                    case 4:\n                        _a.sent();\n                        return [7 /*endfinally*/];\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return QueryExecutor;\n}());\nexports[\"default\"] = QueryExecutor;\nfunction installEventListenerWhenPossible(target, event, listener) {\n    if (typeof (target === null || target === void 0 ? void 0 : target.addEventListener) === 'function') {\n        target.addEventListener(event, listener);\n    }\n    return {\n        uninstall: function () {\n            if (typeof (target === null || target === void 0 ? void 0 : target.removeEventListener) === 'function') {\n                target.removeEventListener(event, listener);\n            }\n        }\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/query-executor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/base-host-name-resolver.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/resolver/base-host-name-resolver.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/promise-function-async */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar BaseHostNameResolver = /** @class */ (function () {\n    function BaseHostNameResolver() {\n    }\n    BaseHostNameResolver.prototype.resolve = function () {\n        throw new Error('Abstract function');\n    };\n    /**\n     * @protected\n     */\n    BaseHostNameResolver.prototype._resolveToItself = function (address) {\n        return Promise.resolve([address]);\n    };\n    return BaseHostNameResolver;\n}());\nexports[\"default\"] = BaseHostNameResolver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3Jlc29sdmVyL2Jhc2UtaG9zdC1uYW1lLXJlc29sdmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBZSIsInNvdXJjZXMiOlsiL2hvbWUvanBpY2M4NjgxL3Byb2Qtc3lzdGVtL2RvY2tlci1kZXYvbGVnYWwtcGxhdGZvcm0tYmFja2VuZC9sZWdhbC1zb2Z0d2FyZS1wbGF0Zm9ybS9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3Jlc29sdmVyL2Jhc2UtaG9zdC1uYW1lLXJlc29sdmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFwiTmVvNGpcIlxuICogTmVvNGogU3dlZGVuIEFCIFtodHRwczovL25lbzRqLmNvbV1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9wcm9taXNlLWZ1bmN0aW9uLWFzeW5jICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG52YXIgQmFzZUhvc3ROYW1lUmVzb2x2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmFzZUhvc3ROYW1lUmVzb2x2ZXIoKSB7XG4gICAgfVxuICAgIEJhc2VIb3N0TmFtZVJlc29sdmVyLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Fic3RyYWN0IGZ1bmN0aW9uJyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcHJvdGVjdGVkXG4gICAgICovXG4gICAgQmFzZUhvc3ROYW1lUmVzb2x2ZXIucHJvdG90eXBlLl9yZXNvbHZlVG9JdHNlbGYgPSBmdW5jdGlvbiAoYWRkcmVzcykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKFthZGRyZXNzXSk7XG4gICAgfTtcbiAgICByZXR1cm4gQmFzZUhvc3ROYW1lUmVzb2x2ZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQmFzZUhvc3ROYW1lUmVzb2x2ZXI7XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/base-host-name-resolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/configured-custom-resolver.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/resolver/configured-custom-resolver.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar server_address_1 = __webpack_require__(/*! ../server-address */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/server-address.js\");\nfunction resolveToSelf(address) {\n    return Promise.resolve([address]);\n}\nvar ConfiguredCustomResolver = /** @class */ (function () {\n    function ConfiguredCustomResolver(resolverFunction) {\n        this._resolverFunction = resolverFunction !== null && resolverFunction !== void 0 ? resolverFunction : resolveToSelf;\n    }\n    ConfiguredCustomResolver.prototype.resolve = function (seedRouter) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            return resolve(_this._resolverFunction(seedRouter.asHostPort()));\n        }).then(function (resolved) {\n            if (!Array.isArray(resolved)) {\n                throw new TypeError('Configured resolver function should either return an array of addresses or a Promise resolved with an array of addresses.' +\n                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                    \"Each address is '<host>:<port>'. Got: \".concat(resolved));\n            }\n            return resolved.map(function (r) { return server_address_1.ServerAddress.fromUrl(r); });\n        });\n    };\n    return ConfiguredCustomResolver;\n}());\nexports[\"default\"] = ConfiguredCustomResolver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3Jlc29sdmVyL2NvbmZpZ3VyZWQtY3VzdG9tLXJlc29sdmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQU8sQ0FBQyxnR0FBbUI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0NBQStDLG1EQUFtRDtBQUNsRyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBZSIsInNvdXJjZXMiOlsiL2hvbWUvanBpY2M4NjgxL3Byb2Qtc3lzdGVtL2RvY2tlci1kZXYvbGVnYWwtcGxhdGZvcm0tYmFja2VuZC9sZWdhbC1zb2Z0d2FyZS1wbGF0Zm9ybS9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3Jlc29sdmVyL2NvbmZpZ3VyZWQtY3VzdG9tLXJlc29sdmVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFwiTmVvNGpcIlxuICogTmVvNGogU3dlZGVuIEFCIFtodHRwczovL25lbzRqLmNvbV1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9wcm9taXNlLWZ1bmN0aW9uLWFzeW5jICovXG52YXIgc2VydmVyX2FkZHJlc3NfMSA9IHJlcXVpcmUoXCIuLi9zZXJ2ZXItYWRkcmVzc1wiKTtcbmZ1bmN0aW9uIHJlc29sdmVUb1NlbGYoYWRkcmVzcykge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoW2FkZHJlc3NdKTtcbn1cbnZhciBDb25maWd1cmVkQ3VzdG9tUmVzb2x2ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29uZmlndXJlZEN1c3RvbVJlc29sdmVyKHJlc29sdmVyRnVuY3Rpb24pIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZXJGdW5jdGlvbiA9IHJlc29sdmVyRnVuY3Rpb24gIT09IG51bGwgJiYgcmVzb2x2ZXJGdW5jdGlvbiAhPT0gdm9pZCAwID8gcmVzb2x2ZXJGdW5jdGlvbiA6IHJlc29sdmVUb1NlbGY7XG4gICAgfVxuICAgIENvbmZpZ3VyZWRDdXN0b21SZXNvbHZlci5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uIChzZWVkUm91dGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX3RoaXMuX3Jlc29sdmVyRnVuY3Rpb24oc2VlZFJvdXRlci5hc0hvc3RQb3J0KCkpKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAocmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb25maWd1cmVkIHJlc29sdmVyIGZ1bmN0aW9uIHNob3VsZCBlaXRoZXIgcmV0dXJuIGFuIGFycmF5IG9mIGFkZHJlc3NlcyBvciBhIFByb21pc2UgcmVzb2x2ZWQgd2l0aCBhbiBhcnJheSBvZiBhZGRyZXNzZXMuJyArXG4gICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtdGVtcGxhdGUtZXhwcmVzc2lvbnNcbiAgICAgICAgICAgICAgICAgICAgXCJFYWNoIGFkZHJlc3MgaXMgJzxob3N0Pjo8cG9ydD4nLiBHb3Q6IFwiLmNvbmNhdChyZXNvbHZlZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmVkLm1hcChmdW5jdGlvbiAocikgeyByZXR1cm4gc2VydmVyX2FkZHJlc3NfMS5TZXJ2ZXJBZGRyZXNzLmZyb21Vcmwocik7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDb25maWd1cmVkQ3VzdG9tUmVzb2x2ZXI7XG59KCkpO1xuZXhwb3J0cy5kZWZhdWx0ID0gQ29uZmlndXJlZEN1c3RvbVJlc29sdmVyO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/configured-custom-resolver.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/index.js":
/*!***********************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/resolver/index.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConfiguredCustomResolver = exports.BaseHostNameResolver = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar base_host_name_resolver_1 = __importDefault(__webpack_require__(/*! ./base-host-name-resolver */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/base-host-name-resolver.js\"));\nexports.BaseHostNameResolver = base_host_name_resolver_1.default;\nvar configured_custom_resolver_1 = __importDefault(__webpack_require__(/*! ./configured-custom-resolver */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/configured-custom-resolver.js\"));\nexports.ConfiguredCustomResolver = configured_custom_resolver_1.default;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3Jlc29sdmVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0NBQWdDLEdBQUcsNEJBQTRCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELG1CQUFPLENBQUMsMEhBQTJCO0FBQ25GLDRCQUE0QjtBQUM1QixtREFBbUQsbUJBQU8sQ0FBQyxnSUFBOEI7QUFDekYsZ0NBQWdDIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvaW50ZXJuYWwvcmVzb2x2ZXIvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbmZpZ3VyZWRDdXN0b21SZXNvbHZlciA9IGV4cG9ydHMuQmFzZUhvc3ROYW1lUmVzb2x2ZXIgPSB2b2lkIDA7XG4vKipcbiAqIENvcHlyaWdodCAoYykgXCJOZW80alwiXG4gKiBOZW80aiBTd2VkZW4gQUIgW2h0dHBzOi8vbmVvNGouY29tXVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIGJhc2VfaG9zdF9uYW1lX3Jlc29sdmVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vYmFzZS1ob3N0LW5hbWUtcmVzb2x2ZXJcIikpO1xuZXhwb3J0cy5CYXNlSG9zdE5hbWVSZXNvbHZlciA9IGJhc2VfaG9zdF9uYW1lX3Jlc29sdmVyXzEuZGVmYXVsdDtcbnZhciBjb25maWd1cmVkX2N1c3RvbV9yZXNvbHZlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL2NvbmZpZ3VyZWQtY3VzdG9tLXJlc29sdmVyXCIpKTtcbmV4cG9ydHMuQ29uZmlndXJlZEN1c3RvbVJlc29sdmVyID0gY29uZmlndXJlZF9jdXN0b21fcmVzb2x2ZXJfMS5kZWZhdWx0O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/resolver/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/server-address.js":
/*!***********************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/server-address.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ServerAddress = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\");\nvar urlUtil = __importStar(__webpack_require__(/*! ./url-util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/url-util.js\"));\nvar ServerAddress = /** @class */ (function () {\n    function ServerAddress(host, resolved, port, hostPort) {\n        this._host = (0, util_1.assertString)(host, 'host');\n        this._resolved = resolved != null ? (0, util_1.assertString)(resolved, 'resolved') : null;\n        this._port = (0, util_1.assertNumber)(port, 'port');\n        this._hostPort = hostPort;\n        this._stringValue = resolved != null ? \"\".concat(hostPort, \"(\").concat(resolved, \")\") : \"\".concat(hostPort);\n    }\n    ServerAddress.prototype.host = function () {\n        return this._host;\n    };\n    ServerAddress.prototype.resolvedHost = function () {\n        return this._resolved != null ? this._resolved : this._host;\n    };\n    ServerAddress.prototype.port = function () {\n        return this._port;\n    };\n    ServerAddress.prototype.resolveWith = function (resolved) {\n        return new ServerAddress(this._host, resolved, this._port, this._hostPort);\n    };\n    ServerAddress.prototype.asHostPort = function () {\n        return this._hostPort;\n    };\n    ServerAddress.prototype.asKey = function () {\n        return this._hostPort;\n    };\n    ServerAddress.prototype.toString = function () {\n        return this._stringValue;\n    };\n    ServerAddress.fromUrl = function (url) {\n        var urlParsed = urlUtil.parseDatabaseUrl(url);\n        return new ServerAddress(urlParsed.host, null, urlParsed.port, urlParsed.hostAndPort);\n    };\n    return ServerAddress;\n}());\nexports.ServerAddress = ServerAddress;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3NlcnZlci1hZGRyZXNzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsMkVBQVE7QUFDN0IsMkJBQTJCLG1CQUFPLENBQUMsbUZBQVk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QscUJBQXFCIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvaW50ZXJuYWwvc2VydmVyLWFkZHJlc3MuanMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2VydmVyQWRkcmVzcyA9IHZvaWQgMDtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBcIk5lbzRqXCJcbiAqIE5lbzRqIFN3ZWRlbiBBQiBbaHR0cHM6Ly9uZW80ai5jb21dXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG52YXIgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbnZhciB1cmxVdGlsID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3VybC11dGlsXCIpKTtcbnZhciBTZXJ2ZXJBZGRyZXNzID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNlcnZlckFkZHJlc3MoaG9zdCwgcmVzb2x2ZWQsIHBvcnQsIGhvc3RQb3J0KSB7XG4gICAgICAgIHRoaXMuX2hvc3QgPSAoMCwgdXRpbF8xLmFzc2VydFN0cmluZykoaG9zdCwgJ2hvc3QnKTtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZWQgPSByZXNvbHZlZCAhPSBudWxsID8gKDAsIHV0aWxfMS5hc3NlcnRTdHJpbmcpKHJlc29sdmVkLCAncmVzb2x2ZWQnKSA6IG51bGw7XG4gICAgICAgIHRoaXMuX3BvcnQgPSAoMCwgdXRpbF8xLmFzc2VydE51bWJlcikocG9ydCwgJ3BvcnQnKTtcbiAgICAgICAgdGhpcy5faG9zdFBvcnQgPSBob3N0UG9ydDtcbiAgICAgICAgdGhpcy5fc3RyaW5nVmFsdWUgPSByZXNvbHZlZCAhPSBudWxsID8gXCJcIi5jb25jYXQoaG9zdFBvcnQsIFwiKFwiKS5jb25jYXQocmVzb2x2ZWQsIFwiKVwiKSA6IFwiXCIuY29uY2F0KGhvc3RQb3J0KTtcbiAgICB9XG4gICAgU2VydmVyQWRkcmVzcy5wcm90b3R5cGUuaG9zdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hvc3Q7XG4gICAgfTtcbiAgICBTZXJ2ZXJBZGRyZXNzLnByb3RvdHlwZS5yZXNvbHZlZEhvc3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZXNvbHZlZCAhPSBudWxsID8gdGhpcy5fcmVzb2x2ZWQgOiB0aGlzLl9ob3N0O1xuICAgIH07XG4gICAgU2VydmVyQWRkcmVzcy5wcm90b3R5cGUucG9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcnQ7XG4gICAgfTtcbiAgICBTZXJ2ZXJBZGRyZXNzLnByb3RvdHlwZS5yZXNvbHZlV2l0aCA9IGZ1bmN0aW9uIChyZXNvbHZlZCkge1xuICAgICAgICByZXR1cm4gbmV3IFNlcnZlckFkZHJlc3ModGhpcy5faG9zdCwgcmVzb2x2ZWQsIHRoaXMuX3BvcnQsIHRoaXMuX2hvc3RQb3J0KTtcbiAgICB9O1xuICAgIFNlcnZlckFkZHJlc3MucHJvdG90eXBlLmFzSG9zdFBvcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ob3N0UG9ydDtcbiAgICB9O1xuICAgIFNlcnZlckFkZHJlc3MucHJvdG90eXBlLmFzS2V5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faG9zdFBvcnQ7XG4gICAgfTtcbiAgICBTZXJ2ZXJBZGRyZXNzLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0cmluZ1ZhbHVlO1xuICAgIH07XG4gICAgU2VydmVyQWRkcmVzcy5mcm9tVXJsID0gZnVuY3Rpb24gKHVybCkge1xuICAgICAgICB2YXIgdXJsUGFyc2VkID0gdXJsVXRpbC5wYXJzZURhdGFiYXNlVXJsKHVybCk7XG4gICAgICAgIHJldHVybiBuZXcgU2VydmVyQWRkcmVzcyh1cmxQYXJzZWQuaG9zdCwgbnVsbCwgdXJsUGFyc2VkLnBvcnQsIHVybFBhcnNlZC5ob3N0QW5kUG9ydCk7XG4gICAgfTtcbiAgICByZXR1cm4gU2VydmVyQWRkcmVzcztcbn0oKSk7XG5leHBvcnRzLlNlcnZlckFkZHJlc3MgPSBTZXJ2ZXJBZGRyZXNzO1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/server-address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/temporal-util.js":
/*!**********************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/temporal-util.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.floorMod = exports.floorDiv = exports.assertValidZoneId = exports.assertValidNanosecond = exports.assertValidSecond = exports.assertValidMinute = exports.assertValidHour = exports.assertValidDay = exports.assertValidMonth = exports.assertValidYear = exports.timeZoneOffsetInSeconds = exports.totalNanoseconds = exports.newDate = exports.toStandardDate = exports.isoStringToStandardDate = exports.dateToIsoString = exports.timeZoneOffsetToIsoString = exports.timeToIsoString = exports.durationToIsoString = exports.dateToEpochDay = exports.localDateTimeToEpochSecond = exports.localTimeToNanoOfDay = exports.normalizeNanosecondsForDuration = exports.normalizeSecondsForDuration = exports.SECONDS_PER_DAY = exports.DAYS_PER_400_YEAR_CYCLE = exports.DAYS_0000_TO_1970 = exports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE = exports.NANOS_PER_MILLISECOND = exports.NANOS_PER_SECOND = exports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE = exports.MINUTES_PER_HOUR = exports.NANOSECOND_OF_SECOND_RANGE = exports.SECOND_OF_MINUTE_RANGE = exports.MINUTE_OF_HOUR_RANGE = exports.HOUR_OF_DAY_RANGE = exports.DAY_OF_MONTH_RANGE = exports.MONTH_OF_YEAR_RANGE = exports.YEAR_RANGE = void 0;\nvar integer_1 = __importStar(__webpack_require__(/*! ../integer */ \"(ssr)/./node_modules/neo4j-driver-core/lib/integer.js\"));\nvar error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\");\n/*\n  Code in this util should be compatible with code in the database that uses JSR-310 java.time APIs.\n\n  It is based on a library called ThreeTen (https://github.com/ThreeTen/threetenbp) which was derived\n  from JSR-310 reference implementation previously hosted on GitHub. Code uses `Integer` type everywhere\n  to correctly handle large integer values that are greater than `Number.MAX_SAFE_INTEGER`.\n\n  Please consult either ThreeTen or js-joda (https://github.com/js-joda/js-joda) when working with the\n  conversion functions.\n */\nvar ValueRange = /** @class */ (function () {\n    function ValueRange(min, max) {\n        this._minNumber = min;\n        this._maxNumber = max;\n        this._minInteger = (0, integer_1.int)(min);\n        this._maxInteger = (0, integer_1.int)(max);\n    }\n    ValueRange.prototype.contains = function (value) {\n        if ((0, integer_1.isInt)(value) && value instanceof integer_1.default) {\n            return (value.greaterThanOrEqual(this._minInteger) &&\n                value.lessThanOrEqual(this._maxInteger));\n        }\n        else if (typeof value === 'bigint') {\n            var intValue = (0, integer_1.int)(value);\n            return (intValue.greaterThanOrEqual(this._minInteger) &&\n                intValue.lessThanOrEqual(this._maxInteger));\n        }\n        else {\n            return value >= this._minNumber && value <= this._maxNumber;\n        }\n    };\n    ValueRange.prototype.toString = function () {\n        return \"[\".concat(this._minNumber, \", \").concat(this._maxNumber, \"]\");\n    };\n    return ValueRange;\n}());\nexports.YEAR_RANGE = new ValueRange(-999999999, 999999999);\nexports.MONTH_OF_YEAR_RANGE = new ValueRange(1, 12);\nexports.DAY_OF_MONTH_RANGE = new ValueRange(1, 31);\nexports.HOUR_OF_DAY_RANGE = new ValueRange(0, 23);\nexports.MINUTE_OF_HOUR_RANGE = new ValueRange(0, 59);\nexports.SECOND_OF_MINUTE_RANGE = new ValueRange(0, 59);\nexports.NANOSECOND_OF_SECOND_RANGE = new ValueRange(0, 999999999);\nexports.MINUTES_PER_HOUR = 60;\nexports.SECONDS_PER_MINUTE = 60;\nexports.SECONDS_PER_HOUR = exports.SECONDS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.NANOS_PER_SECOND = 1000000000;\nexports.NANOS_PER_MILLISECOND = 1000000;\nexports.NANOS_PER_MINUTE = exports.NANOS_PER_SECOND * exports.SECONDS_PER_MINUTE;\nexports.NANOS_PER_HOUR = exports.NANOS_PER_MINUTE * exports.MINUTES_PER_HOUR;\nexports.DAYS_0000_TO_1970 = 719528;\nexports.DAYS_PER_400_YEAR_CYCLE = 146097;\nexports.SECONDS_PER_DAY = 86400;\nfunction normalizeSecondsForDuration(seconds, nanoseconds) {\n    return (0, integer_1.int)(seconds).add(floorDiv(nanoseconds, exports.NANOS_PER_SECOND));\n}\nexports.normalizeSecondsForDuration = normalizeSecondsForDuration;\nfunction normalizeNanosecondsForDuration(nanoseconds) {\n    return floorMod(nanoseconds, exports.NANOS_PER_SECOND);\n}\nexports.normalizeNanosecondsForDuration = normalizeNanosecondsForDuration;\n/**\n * Converts given local time into a single integer representing this same time in nanoseconds of the day.\n * @param {Integer|number|string} hour the hour of the local time to convert.\n * @param {Integer|number|string} minute the minute of the local time to convert.\n * @param {Integer|number|string} second the second of the local time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local time to convert.\n * @return {Integer} nanoseconds representing the given local time.\n */\nfunction localTimeToNanoOfDay(hour, minute, second, nanosecond) {\n    hour = (0, integer_1.int)(hour);\n    minute = (0, integer_1.int)(minute);\n    second = (0, integer_1.int)(second);\n    nanosecond = (0, integer_1.int)(nanosecond);\n    var totalNanos = hour.multiply(exports.NANOS_PER_HOUR);\n    totalNanos = totalNanos.add(minute.multiply(exports.NANOS_PER_MINUTE));\n    totalNanos = totalNanos.add(second.multiply(exports.NANOS_PER_SECOND));\n    return totalNanos.add(nanosecond);\n}\nexports.localTimeToNanoOfDay = localTimeToNanoOfDay;\n/**\n * Converts given local date time into a single integer representing this same time in epoch seconds UTC.\n * @param {Integer|number|string} year the year of the local date-time to convert.\n * @param {Integer|number|string} month the month of the local date-time to convert.\n * @param {Integer|number|string} day the day of the local date-time to convert.\n * @param {Integer|number|string} hour the hour of the local date-time to convert.\n * @param {Integer|number|string} minute the minute of the local date-time to convert.\n * @param {Integer|number|string} second the second of the local date-time to convert.\n * @param {Integer|number|string} nanosecond the nanosecond of the local date-time to convert.\n * @return {Integer} epoch second in UTC representing the given local date time.\n */\nfunction localDateTimeToEpochSecond(year, month, day, hour, minute, second, nanosecond) {\n    var epochDay = dateToEpochDay(year, month, day);\n    var localTimeSeconds = localTimeToSecondOfDay(hour, minute, second);\n    return epochDay.multiply(exports.SECONDS_PER_DAY).add(localTimeSeconds);\n}\nexports.localDateTimeToEpochSecond = localDateTimeToEpochSecond;\n/**\n * Converts given local date into a single integer representing it's epoch day.\n * @param {Integer|number|string} year the year of the local date to convert.\n * @param {Integer|number|string} month the month of the local date to convert.\n * @param {Integer|number|string} day the day of the local date to convert.\n * @return {Integer} epoch day representing the given date.\n */\nfunction dateToEpochDay(year, month, day) {\n    year = (0, integer_1.int)(year);\n    month = (0, integer_1.int)(month);\n    day = (0, integer_1.int)(day);\n    var epochDay = year.multiply(365);\n    if (year.greaterThanOrEqual(0)) {\n        epochDay = epochDay.add(year\n            .add(3)\n            .div(4)\n            .subtract(year.add(99).div(100))\n            .add(year.add(399).div(400)));\n    }\n    else {\n        epochDay = epochDay.subtract(year\n            .div(-4)\n            .subtract(year.div(-100))\n            .add(year.div(-400)));\n    }\n    epochDay = epochDay.add(month\n        .multiply(367)\n        .subtract(362)\n        .div(12));\n    epochDay = epochDay.add(day.subtract(1));\n    if (month.greaterThan(2)) {\n        epochDay = epochDay.subtract(1);\n        if (!isLeapYear(year)) {\n            epochDay = epochDay.subtract(1);\n        }\n    }\n    return epochDay.subtract(exports.DAYS_0000_TO_1970);\n}\nexports.dateToEpochDay = dateToEpochDay;\n/**\n * Format given duration to an ISO 8601 string.\n * @param {Integer|number|string} months the number of months.\n * @param {Integer|number|string} days the number of days.\n * @param {Integer|number|string} seconds the number of seconds.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds.\n * @return {string} ISO string that represents given duration.\n */\nfunction durationToIsoString(months, days, seconds, nanoseconds) {\n    var monthsString = formatNumber(months);\n    var daysString = formatNumber(days);\n    var secondsAndNanosecondsString = formatSecondsAndNanosecondsForDuration(seconds, nanoseconds);\n    return \"P\".concat(monthsString, \"M\").concat(daysString, \"DT\").concat(secondsAndNanosecondsString, \"S\");\n}\nexports.durationToIsoString = durationToIsoString;\n/**\n * Formats given time to an ISO 8601 string.\n * @param {Integer|number|string} hour the hour value.\n * @param {Integer|number|string} minute the minute value.\n * @param {Integer|number|string} second the second value.\n * @param {Integer|number|string} nanosecond the nanosecond value.\n * @return {string} ISO string that represents given time.\n */\nfunction timeToIsoString(hour, minute, second, nanosecond) {\n    var hourString = formatNumber(hour, 2);\n    var minuteString = formatNumber(minute, 2);\n    var secondString = formatNumber(second, 2);\n    var nanosecondString = formatNanosecond(nanosecond);\n    return \"\".concat(hourString, \":\").concat(minuteString, \":\").concat(secondString).concat(nanosecondString);\n}\nexports.timeToIsoString = timeToIsoString;\n/**\n * Formats given time zone offset in seconds to string representation like '±HH:MM', '±HH:MM:SS' or 'Z' for UTC.\n * @param {Integer|number|string} offsetSeconds the offset in seconds.\n * @return {string} ISO string that represents given offset.\n */\nfunction timeZoneOffsetToIsoString(offsetSeconds) {\n    offsetSeconds = (0, integer_1.int)(offsetSeconds);\n    if (offsetSeconds.equals(0)) {\n        return 'Z';\n    }\n    var isNegative = offsetSeconds.isNegative();\n    if (isNegative) {\n        offsetSeconds = offsetSeconds.multiply(-1);\n    }\n    var signPrefix = isNegative ? '-' : '+';\n    var hours = formatNumber(offsetSeconds.div(exports.SECONDS_PER_HOUR), 2);\n    var minutes = formatNumber(offsetSeconds.div(exports.SECONDS_PER_MINUTE).modulo(exports.MINUTES_PER_HOUR), 2);\n    var secondsValue = offsetSeconds.modulo(exports.SECONDS_PER_MINUTE);\n    var seconds = secondsValue.equals(0) ? null : formatNumber(secondsValue, 2);\n    return seconds != null\n        ? \"\".concat(signPrefix).concat(hours, \":\").concat(minutes, \":\").concat(seconds)\n        : \"\".concat(signPrefix).concat(hours, \":\").concat(minutes);\n}\nexports.timeZoneOffsetToIsoString = timeZoneOffsetToIsoString;\n/**\n * Formats given date to an ISO 8601 string.\n * @param {Integer|number|string} year the date year.\n * @param {Integer|number|string} month the date month.\n * @param {Integer|number|string} day the date day.\n * @return {string} ISO string that represents given date.\n */\nfunction dateToIsoString(year, month, day) {\n    var yearString = formatYear(year);\n    var monthString = formatNumber(month, 2);\n    var dayString = formatNumber(day, 2);\n    return \"\".concat(yearString, \"-\").concat(monthString, \"-\").concat(dayString);\n}\nexports.dateToIsoString = dateToIsoString;\n/**\n * Convert the given iso date string to a JavaScript Date object\n *\n * @param {string} isoString The iso date string\n * @returns {Date} the date\n */\nfunction isoStringToStandardDate(isoString) {\n    return new Date(isoString);\n}\nexports.isoStringToStandardDate = isoStringToStandardDate;\n/**\n * Convert the given utc timestamp to a JavaScript Date object\n *\n * @param {number} utc Timestamp in UTC\n * @returns {Date} the date\n */\nfunction toStandardDate(utc) {\n    return new Date(utc);\n}\nexports.toStandardDate = toStandardDate;\n/**\n * Shortcut for creating a new StandardDate\n * @param date\n * @returns {Date} the standard date\n */\nfunction newDate(date) {\n    return new Date(date);\n}\nexports.newDate = newDate;\n/**\n * Get the total number of nanoseconds from the milliseconds of the given standard JavaScript date and optional nanosecond part.\n * @param {global.Date} standardDate the standard JavaScript date.\n * @param {Integer|number|bigint|undefined} nanoseconds the optional number of nanoseconds.\n * @return {Integer|number|bigint} the total amount of nanoseconds.\n */\nfunction totalNanoseconds(standardDate, nanoseconds) {\n    nanoseconds = nanoseconds !== null && nanoseconds !== void 0 ? nanoseconds : 0;\n    var nanosFromMillis = standardDate.getMilliseconds() * exports.NANOS_PER_MILLISECOND;\n    return add(nanoseconds, nanosFromMillis);\n}\nexports.totalNanoseconds = totalNanoseconds;\n/**\n * Get the time zone offset in seconds from the given standard JavaScript date.\n *\n * <b>Implementation note:</b>\n * Time zone offset returned by the standard JavaScript date is the difference, in minutes, from local time to UTC.\n * So positive value means offset is behind UTC and negative value means it is ahead.\n * For Neo4j temporal types, like `Time` or `DateTime` offset is in seconds and represents difference from UTC to local time.\n * This is different from standard JavaScript dates and that's why implementation negates the returned value.\n *\n * @param {global.Date} standardDate the standard JavaScript date.\n * @return {number} the time zone offset in seconds.\n */\nfunction timeZoneOffsetInSeconds(standardDate) {\n    var secondsPortion = standardDate.getSeconds() >= standardDate.getUTCSeconds()\n        ? standardDate.getSeconds() - standardDate.getUTCSeconds()\n        : standardDate.getSeconds() - standardDate.getUTCSeconds() + 60;\n    var offsetInMinutes = standardDate.getTimezoneOffset();\n    if (offsetInMinutes === 0) {\n        return 0 + secondsPortion;\n    }\n    return -1 * offsetInMinutes * exports.SECONDS_PER_MINUTE + secondsPortion;\n}\nexports.timeZoneOffsetInSeconds = timeZoneOffsetInSeconds;\n/**\n * Assert that the year value is valid.\n * @param {Integer|number} year the value to check.\n * @return {Integer|number} the value of the year if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidYear(year) {\n    return assertValidTemporalValue(year, exports.YEAR_RANGE, 'Year');\n}\nexports.assertValidYear = assertValidYear;\n/**\n * Assert that the month value is valid.\n * @param {Integer|number} month the value to check.\n * @return {Integer|number} the value of the month if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidMonth(month) {\n    return assertValidTemporalValue(month, exports.MONTH_OF_YEAR_RANGE, 'Month');\n}\nexports.assertValidMonth = assertValidMonth;\n/**\n * Assert that the day value is valid.\n * @param {Integer|number} day the value to check.\n * @return {Integer|number} the value of the day if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidDay(day) {\n    return assertValidTemporalValue(day, exports.DAY_OF_MONTH_RANGE, 'Day');\n}\nexports.assertValidDay = assertValidDay;\n/**\n * Assert that the hour value is valid.\n * @param {Integer|number} hour the value to check.\n * @return {Integer|number} the value of the hour if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidHour(hour) {\n    return assertValidTemporalValue(hour, exports.HOUR_OF_DAY_RANGE, 'Hour');\n}\nexports.assertValidHour = assertValidHour;\n/**\n * Assert that the minute value is valid.\n * @param {Integer|number} minute the value to check.\n * @return {Integer|number} the value of the minute if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidMinute(minute) {\n    return assertValidTemporalValue(minute, exports.MINUTE_OF_HOUR_RANGE, 'Minute');\n}\nexports.assertValidMinute = assertValidMinute;\n/**\n * Assert that the second value is valid.\n * @param {Integer|number} second the value to check.\n * @return {Integer|number} the value of the second if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidSecond(second) {\n    return assertValidTemporalValue(second, exports.SECOND_OF_MINUTE_RANGE, 'Second');\n}\nexports.assertValidSecond = assertValidSecond;\n/**\n * Assert that the nanosecond value is valid.\n * @param {Integer|number} nanosecond the value to check.\n * @return {Integer|number} the value of the nanosecond if it is valid. Exception is thrown otherwise.\n */\nfunction assertValidNanosecond(nanosecond) {\n    return assertValidTemporalValue(nanosecond, exports.NANOSECOND_OF_SECOND_RANGE, 'Nanosecond');\n}\nexports.assertValidNanosecond = assertValidNanosecond;\nvar timeZoneValidityCache = new Map();\nvar newInvalidZoneIdError = function (zoneId, fieldName) { return (0, error_1.newError)(\"\".concat(fieldName, \" is expected to be a valid ZoneId but was: \\\"\").concat(zoneId, \"\\\"\")); };\nfunction assertValidZoneId(fieldName, zoneId) {\n    var cachedResult = timeZoneValidityCache.get(zoneId);\n    if (cachedResult === true) {\n        return;\n    }\n    if (cachedResult === false) {\n        throw newInvalidZoneIdError(zoneId, fieldName);\n    }\n    try {\n        Intl.DateTimeFormat(undefined, { timeZone: zoneId });\n        timeZoneValidityCache.set(zoneId, true);\n    }\n    catch (e) {\n        timeZoneValidityCache.set(zoneId, false);\n        throw newInvalidZoneIdError(zoneId, fieldName);\n    }\n}\nexports.assertValidZoneId = assertValidZoneId;\n/**\n * Check if the given value is of expected type and is in the expected range.\n * @param {Integer|number} value the value to check.\n * @param {ValueRange} range the range.\n * @param {string} name the name of the value.\n * @return {Integer|number} the value if valid. Exception is thrown otherwise.\n */\nfunction assertValidTemporalValue(value, range, name) {\n    (0, util_1.assertNumberOrInteger)(value, name);\n    if (!range.contains(value)) {\n        throw (0, error_1.newError)(\"\".concat(name, \" is expected to be in range \").concat(range.toString(), \" but was: \").concat(value.toString()));\n    }\n    return value;\n}\n/**\n * Converts given local time into a single integer representing this same time in seconds of the day. Nanoseconds are skipped.\n * @param {Integer|number|string} hour the hour of the local time.\n * @param {Integer|number|string} minute the minute of the local time.\n * @param {Integer|number|string} second the second of the local time.\n * @return {Integer} seconds representing the given local time.\n */\nfunction localTimeToSecondOfDay(hour, minute, second) {\n    hour = (0, integer_1.int)(hour);\n    minute = (0, integer_1.int)(minute);\n    second = (0, integer_1.int)(second);\n    var totalSeconds = hour.multiply(exports.SECONDS_PER_HOUR);\n    totalSeconds = totalSeconds.add(minute.multiply(exports.SECONDS_PER_MINUTE));\n    return totalSeconds.add(second);\n}\n/**\n * Check if given year is a leap year. Uses algorithm described here {@link https://en.wikipedia.org/wiki/Leap_year#Algorithm}.\n * @param {Integer|number|string} year the year to check. Will be converted to {@link Integer} for all calculations.\n * @return {boolean} `true` if given year is a leap year, `false` otherwise.\n */\nfunction isLeapYear(year) {\n    year = (0, integer_1.int)(year);\n    if (!year.modulo(4).equals(0)) {\n        return false;\n    }\n    else if (!year.modulo(100).equals(0)) {\n        return true;\n    }\n    else if (!year.modulo(400).equals(0)) {\n        return false;\n    }\n    else {\n        return true;\n    }\n}\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\nfunction floorDiv(x, y) {\n    x = (0, integer_1.int)(x);\n    y = (0, integer_1.int)(y);\n    var result = x.div(y);\n    if (x.isPositive() !== y.isPositive() && result.multiply(y).notEquals(x)) {\n        result = result.subtract(1);\n    }\n    return result;\n}\nexports.floorDiv = floorDiv;\n/**\n * @param {Integer|number|string} x the divident.\n * @param {Integer|number|string} y the divisor.\n * @return {Integer} the result.\n */\nfunction floorMod(x, y) {\n    x = (0, integer_1.int)(x);\n    y = (0, integer_1.int)(y);\n    return x.subtract(floorDiv(x, y).multiply(y));\n}\nexports.floorMod = floorMod;\n/**\n * @param {Integer|number|string} seconds the number of seconds to format.\n * @param {Integer|number|string} nanoseconds the number of nanoseconds to format.\n * @return {string} formatted value.\n */\nfunction formatSecondsAndNanosecondsForDuration(seconds, nanoseconds) {\n    seconds = (0, integer_1.int)(seconds);\n    nanoseconds = (0, integer_1.int)(nanoseconds);\n    var secondsString;\n    var nanosecondsString;\n    var secondsNegative = seconds.isNegative();\n    var nanosecondsGreaterThanZero = nanoseconds.greaterThan(0);\n    if (secondsNegative && nanosecondsGreaterThanZero) {\n        if (seconds.equals(-1)) {\n            secondsString = '-0';\n        }\n        else {\n            secondsString = seconds.add(1).toString();\n        }\n    }\n    else {\n        secondsString = seconds.toString();\n    }\n    if (nanosecondsGreaterThanZero) {\n        if (secondsNegative) {\n            nanosecondsString = formatNanosecond(nanoseconds\n                .negate()\n                .add(2 * exports.NANOS_PER_SECOND)\n                .modulo(exports.NANOS_PER_SECOND));\n        }\n        else {\n            nanosecondsString = formatNanosecond(nanoseconds.add(exports.NANOS_PER_SECOND).modulo(exports.NANOS_PER_SECOND));\n        }\n    }\n    return nanosecondsString != null ? secondsString + nanosecondsString : secondsString;\n}\n/**\n * @param {Integer|number|string} value the number of nanoseconds to format.\n * @return {string} formatted and possibly left-padded nanoseconds part as string.\n */\nfunction formatNanosecond(value) {\n    value = (0, integer_1.int)(value);\n    return value.equals(0) ? '' : '.' + formatNumber(value, 9);\n}\n/**\n *\n * @param {Integer|number|string} year The year to be formatted\n * @return {string} formatted year\n */\nfunction formatYear(year) {\n    var yearInteger = (0, integer_1.int)(year);\n    if (yearInteger.isNegative() || yearInteger.greaterThan(9999)) {\n        return formatNumber(yearInteger, 6, { usePositiveSign: true });\n    }\n    return formatNumber(yearInteger, 4);\n}\n/**\n * @param {Integer|number|string} num the number to format.\n * @param {number} [stringLength=undefined] the string length to left-pad to.\n * @return {string} formatted and possibly left-padded number as string.\n */\nfunction formatNumber(num, stringLength, params) {\n    num = (0, integer_1.int)(num);\n    var isNegative = num.isNegative();\n    if (isNegative) {\n        num = num.negate();\n    }\n    var numString = num.toString();\n    if (stringLength != null) {\n        // left pad the string with zeroes\n        while (numString.length < stringLength) {\n            numString = '0' + numString;\n        }\n    }\n    if (isNegative) {\n        return '-' + numString;\n    }\n    else if ((params === null || params === void 0 ? void 0 : params.usePositiveSign) === true) {\n        return '+' + numString;\n    }\n    return numString;\n}\nfunction add(x, y) {\n    if (x instanceof integer_1.default) {\n        return x.add(y);\n    }\n    else if (typeof x === 'bigint') {\n        return x + BigInt(y);\n    }\n    return x + y;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/temporal-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/transaction-executor.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/transaction-executor.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TransactionExecutor = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/constants.js\");\nvar DEFAULT_MAX_RETRY_TIME_MS = 30 * 1000; // 30 seconds\nvar DEFAULT_INITIAL_RETRY_DELAY_MS = 1000; // 1 seconds\nvar DEFAULT_RETRY_DELAY_MULTIPLIER = 2.0;\nvar DEFAULT_RETRY_DELAY_JITTER_FACTOR = 0.2;\nfunction setTimeoutWrapper(callback, ms) {\n    var args = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        args[_i - 2] = arguments[_i];\n    }\n    return setTimeout.apply(void 0, __spreadArray([callback, ms], __read(args), false));\n}\nfunction clearTimeoutWrapper(timeoutId) {\n    return clearTimeout(timeoutId);\n}\nvar TransactionExecutor = /** @class */ (function () {\n    function TransactionExecutor(maxRetryTimeMs, initialRetryDelayMs, multiplier, jitterFactor, dependencies) {\n        if (dependencies === void 0) { dependencies = {\n            setTimeout: setTimeoutWrapper,\n            clearTimeout: clearTimeoutWrapper\n        }; }\n        this._maxRetryTimeMs = _valueOrDefault(maxRetryTimeMs, DEFAULT_MAX_RETRY_TIME_MS);\n        this._initialRetryDelayMs = _valueOrDefault(initialRetryDelayMs, DEFAULT_INITIAL_RETRY_DELAY_MS);\n        this._multiplier = _valueOrDefault(multiplier, DEFAULT_RETRY_DELAY_MULTIPLIER);\n        this._jitterFactor = _valueOrDefault(jitterFactor, DEFAULT_RETRY_DELAY_JITTER_FACTOR);\n        this._setTimeout = dependencies.setTimeout;\n        this._clearTimeout = dependencies.clearTimeout;\n        this._inFlightTimeoutIds = [];\n        this.pipelineBegin = false;\n        this.telemetryApi = constants_1.TELEMETRY_APIS.MANAGED_TRANSACTION;\n        this._verifyAfterConstruction();\n    }\n    TransactionExecutor.prototype.execute = function (transactionCreator, transactionWork, transactionWrapper) {\n        var _this = this;\n        var context = {\n            apiTransactionConfig: {\n                api: this.telemetryApi,\n                onTelemetrySuccess: function () {\n                    context.apiTransactionConfig = undefined;\n                }\n            }\n        };\n        return new Promise(function (resolve, reject) {\n            _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject, transactionWrapper, context).catch(reject);\n        }).catch(function (error) {\n            var retryStartTimeMs = Date.now();\n            var retryDelayMs = _this._initialRetryDelayMs;\n            return _this._retryTransactionPromise(transactionCreator, transactionWork, error, retryStartTimeMs, retryDelayMs, transactionWrapper, context);\n        });\n    };\n    TransactionExecutor.prototype.close = function () {\n        var _this = this;\n        // cancel all existing timeouts to prevent further retries\n        this._inFlightTimeoutIds.forEach(function (timeoutId) { return _this._clearTimeout(timeoutId); });\n        this._inFlightTimeoutIds = [];\n    };\n    TransactionExecutor.prototype._retryTransactionPromise = function (transactionCreator, transactionWork, error, retryStartTime, retryDelayMs, transactionWrapper, executionContext) {\n        var _this = this;\n        var elapsedTimeMs = Date.now() - retryStartTime;\n        if (elapsedTimeMs > this._maxRetryTimeMs || !(0, error_1.isRetriableError)(error)) {\n            return Promise.reject(error);\n        }\n        return new Promise(function (resolve, reject) {\n            var nextRetryTime = _this._computeDelayWithJitter(retryDelayMs);\n            var timeoutId = _this._setTimeout(function () {\n                // filter out this timeoutId when time has come and function is being executed\n                _this._inFlightTimeoutIds = _this._inFlightTimeoutIds.filter(function (id) { return id !== timeoutId; });\n                _this._executeTransactionInsidePromise(transactionCreator, transactionWork, resolve, reject, transactionWrapper, executionContext).catch(reject);\n            }, nextRetryTime);\n            // add newly created timeoutId to the list of all in-flight timeouts\n            _this._inFlightTimeoutIds.push(timeoutId);\n        }).catch(function (error) {\n            var nextRetryDelayMs = retryDelayMs * _this._multiplier;\n            return _this._retryTransactionPromise(transactionCreator, transactionWork, error, retryStartTime, nextRetryDelayMs, transactionWrapper, executionContext);\n        });\n    };\n    TransactionExecutor.prototype._executeTransactionInsidePromise = function (transactionCreator, transactionWork, resolve, reject, transactionWrapper, executionContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var tx, txPromise, _a, error_2, wrap, wrappedTx, resultPromise;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 4, , 5]);\n                        txPromise = transactionCreator((executionContext === null || executionContext === void 0 ? void 0 : executionContext.apiTransactionConfig) != null\n                            ? __assign({}, executionContext === null || executionContext === void 0 ? void 0 : executionContext.apiTransactionConfig) : undefined);\n                        if (!this.pipelineBegin) return [3 /*break*/, 1];\n                        _a = txPromise;\n                        return [3 /*break*/, 3];\n                    case 1: return [4 /*yield*/, txPromise];\n                    case 2:\n                        _a = _b.sent();\n                        _b.label = 3;\n                    case 3:\n                        tx = _a;\n                        return [3 /*break*/, 5];\n                    case 4:\n                        error_2 = _b.sent();\n                        // failed to create a transaction\n                        reject(error_2);\n                        return [2 /*return*/];\n                    case 5:\n                        wrap = transactionWrapper !== null && transactionWrapper !== void 0 ? transactionWrapper : (function (tx) { return tx; });\n                        wrappedTx = wrap(tx);\n                        resultPromise = this._safeExecuteTransactionWork(wrappedTx, transactionWork);\n                        resultPromise\n                            .then(function (result) {\n                            return _this._handleTransactionWorkSuccess(result, tx, resolve, reject);\n                        })\n                            .catch(function (error) { return _this._handleTransactionWorkFailure(error, tx, reject); });\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    TransactionExecutor.prototype._safeExecuteTransactionWork = function (tx, transactionWork) {\n        try {\n            var result = transactionWork(tx);\n            // user defined callback is supposed to return a promise, but it might not; so to protect against an\n            // incorrect API usage we wrap the returned value with a resolved promise; this is effectively a\n            // validation step without type checks\n            return Promise.resolve(result);\n        }\n        catch (error) {\n            return Promise.reject(error);\n        }\n    };\n    TransactionExecutor.prototype._handleTransactionWorkSuccess = function (result, tx, resolve, reject) {\n        if (tx.isOpen()) {\n            // transaction work returned resolved promise and transaction has not been committed/rolled back\n            // try to commit the transaction\n            tx.commit()\n                .then(function () {\n                // transaction was committed, return result to the user\n                resolve(result);\n            })\n                .catch(function (error) {\n                // transaction failed to commit, propagate the failure\n                reject(error);\n            });\n        }\n        else {\n            // transaction work returned resolved promise and transaction is already committed/rolled back\n            // return the result returned by given transaction work\n            resolve(result);\n        }\n    };\n    TransactionExecutor.prototype._handleTransactionWorkFailure = function (error, tx, reject) {\n        if (tx.isOpen()) {\n            // transaction work failed and the transaction is still open, roll it back and propagate the failure\n            tx.rollback()\n                .catch(function (ignore) {\n                // ignore the rollback error\n            })\n                .then(function () { return reject(error); }) // propagate the original error we got from the transaction work\n                .catch(reject);\n        }\n        else {\n            // transaction is already rolled back, propagate the error\n            reject(error);\n        }\n    };\n    TransactionExecutor.prototype._computeDelayWithJitter = function (delayMs) {\n        var jitter = delayMs * this._jitterFactor;\n        var min = delayMs - jitter;\n        var max = delayMs + jitter;\n        return Math.random() * (max - min) + min;\n    };\n    TransactionExecutor.prototype._verifyAfterConstruction = function () {\n        if (this._maxRetryTimeMs < 0) {\n            throw (0, error_1.newError)('Max retry time should be >= 0: ' + this._maxRetryTimeMs.toString());\n        }\n        if (this._initialRetryDelayMs < 0) {\n            throw (0, error_1.newError)('Initial retry delay should >= 0: ' + this._initialRetryDelayMs.toString());\n        }\n        if (this._multiplier < 1.0) {\n            throw (0, error_1.newError)('Multiplier should be >= 1.0: ' + this._multiplier.toString());\n        }\n        if (this._jitterFactor < 0 || this._jitterFactor > 1) {\n            throw (0, error_1.newError)('Jitter factor should be in [0.0, 1.0]: ' + this._jitterFactor.toFixed());\n        }\n    };\n    return TransactionExecutor;\n}());\nexports.TransactionExecutor = TransactionExecutor;\nfunction _valueOrDefault(value, defaultValue) {\n    if (value != null) {\n        return value;\n    }\n    return defaultValue;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/transaction-executor.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/tx-config.js":
/*!******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/tx-config.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TxConfig = void 0;\nvar util = __importStar(__webpack_require__(/*! ./util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\"));\nvar error_1 = __webpack_require__(/*! ../error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar integer_1 = __webpack_require__(/*! ../integer */ \"(ssr)/./node_modules/neo4j-driver-core/lib/integer.js\");\n/**\n * Internal holder of the transaction configuration.\n * It performs input validation and value conversion for further serialization by the Bolt protocol layer.\n * Users of the driver provide transaction configuration as regular objects `{timeout: 10, metadata: {key: 'value'}}`.\n * Driver converts such objects to {@link TxConfig} immediately and uses converted values everywhere.\n */\nvar TxConfig = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {Object} config the raw configuration object.\n     */\n    function TxConfig(config, log) {\n        assertValidConfig(config);\n        this.timeout = extractTimeout(config, log);\n        this.metadata = extractMetadata(config);\n    }\n    /**\n     * Get an empty config object.\n     * @return {TxConfig} an empty config.\n     */\n    TxConfig.empty = function () {\n        return EMPTY_CONFIG;\n    };\n    /**\n     * Check if this config object is empty. I.e. has no configuration values specified.\n     * @return {boolean} `true` if this object is empty, `false` otherwise.\n     */\n    TxConfig.prototype.isEmpty = function () {\n        return Object.values(this).every(function (value) { return value == null; });\n    };\n    return TxConfig;\n}());\nexports.TxConfig = TxConfig;\nvar EMPTY_CONFIG = new TxConfig({});\n/**\n * @return {Integer|null}\n */\nfunction extractTimeout(config, log) {\n    if (util.isObject(config) && config.timeout != null) {\n        util.assertNumberOrInteger(config.timeout, 'Transaction timeout');\n        if (isTimeoutFloat(config) && (log === null || log === void 0 ? void 0 : log.isInfoEnabled()) === true) {\n            // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            log === null || log === void 0 ? void 0 : log.info(\"Transaction timeout expected to be an integer, got: \".concat(config.timeout, \". The value will be rounded up.\"));\n        }\n        var timeout = (0, integer_1.int)(config.timeout, { ceilFloat: true });\n        if (timeout.isNegative()) {\n            throw (0, error_1.newError)('Transaction timeout should not be negative');\n        }\n        return timeout;\n    }\n    return null;\n}\nfunction isTimeoutFloat(config) {\n    return typeof config.timeout === 'number' && !Number.isInteger(config.timeout);\n}\n/**\n * @return {object|null}\n */\nfunction extractMetadata(config) {\n    if (util.isObject(config) && config.metadata != null) {\n        var metadata = config.metadata;\n        util.assertObject(metadata, 'config.metadata');\n        if (Object.keys(metadata).length !== 0) {\n            // not an empty object\n            return metadata;\n        }\n    }\n    return null;\n}\nfunction assertValidConfig(config) {\n    if (config != null) {\n        util.assertObject(config, 'Transaction config');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2ludGVybmFsL3R4LWNvbmZpZy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsd0JBQXdCLG1CQUFPLENBQUMsMkVBQVE7QUFDeEMsY0FBYyxtQkFBTyxDQUFDLHFFQUFVO0FBQ2hDLGdCQUFnQixtQkFBTyxDQUFDLHlFQUFZO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSx3QkFBd0IsY0FBYztBQUNwSCxvQ0FBb0MsZ0JBQWdCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsVUFBVTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0EsNERBQTRELHVCQUF1QjtBQUNuRjtBQUNBO0FBQ0EsQ0FBQztBQUNELGdCQUFnQjtBQUNoQixrQ0FBa0M7QUFDbEM7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxpQkFBaUI7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvaW50ZXJuYWwvdHgtY29uZmlnLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFwiTmVvNGpcIlxuICogTmVvNGogU3dlZGVuIEFCIFtodHRwczovL25lbzRqLmNvbV1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5UeENvbmZpZyA9IHZvaWQgMDtcbnZhciB1dGlsID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3V0aWxcIikpO1xudmFyIGVycm9yXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JcIik7XG52YXIgaW50ZWdlcl8xID0gcmVxdWlyZShcIi4uL2ludGVnZXJcIik7XG4vKipcbiAqIEludGVybmFsIGhvbGRlciBvZiB0aGUgdHJhbnNhY3Rpb24gY29uZmlndXJhdGlvbi5cbiAqIEl0IHBlcmZvcm1zIGlucHV0IHZhbGlkYXRpb24gYW5kIHZhbHVlIGNvbnZlcnNpb24gZm9yIGZ1cnRoZXIgc2VyaWFsaXphdGlvbiBieSB0aGUgQm9sdCBwcm90b2NvbCBsYXllci5cbiAqIFVzZXJzIG9mIHRoZSBkcml2ZXIgcHJvdmlkZSB0cmFuc2FjdGlvbiBjb25maWd1cmF0aW9uIGFzIHJlZ3VsYXIgb2JqZWN0cyBge3RpbWVvdXQ6IDEwLCBtZXRhZGF0YToge2tleTogJ3ZhbHVlJ319YC5cbiAqIERyaXZlciBjb252ZXJ0cyBzdWNoIG9iamVjdHMgdG8ge0BsaW5rIFR4Q29uZmlnfSBpbW1lZGlhdGVseSBhbmQgdXNlcyBjb252ZXJ0ZWQgdmFsdWVzIGV2ZXJ5d2hlcmUuXG4gKi9cbnZhciBUeENvbmZpZyA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIHRoZSByYXcgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gVHhDb25maWcoY29uZmlnLCBsb2cpIHtcbiAgICAgICAgYXNzZXJ0VmFsaWRDb25maWcoY29uZmlnKTtcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gZXh0cmFjdFRpbWVvdXQoY29uZmlnLCBsb2cpO1xuICAgICAgICB0aGlzLm1ldGFkYXRhID0gZXh0cmFjdE1ldGFkYXRhKGNvbmZpZyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhbiBlbXB0eSBjb25maWcgb2JqZWN0LlxuICAgICAqIEByZXR1cm4ge1R4Q29uZmlnfSBhbiBlbXB0eSBjb25maWcuXG4gICAgICovXG4gICAgVHhDb25maWcuZW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBFTVBUWV9DT05GSUc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGlzIGNvbmZpZyBvYmplY3QgaXMgZW1wdHkuIEkuZS4gaGFzIG5vIGNvbmZpZ3VyYXRpb24gdmFsdWVzIHNwZWNpZmllZC5cbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhpcyBvYmplY3QgaXMgZW1wdHksIGBmYWxzZWAgb3RoZXJ3aXNlLlxuICAgICAqL1xuICAgIFR4Q29uZmlnLnByb3RvdHlwZS5pc0VtcHR5ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzKS5ldmVyeShmdW5jdGlvbiAodmFsdWUpIHsgcmV0dXJuIHZhbHVlID09IG51bGw7IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIFR4Q29uZmlnO1xufSgpKTtcbmV4cG9ydHMuVHhDb25maWcgPSBUeENvbmZpZztcbnZhciBFTVBUWV9DT05GSUcgPSBuZXcgVHhDb25maWcoe30pO1xuLyoqXG4gKiBAcmV0dXJuIHtJbnRlZ2VyfG51bGx9XG4gKi9cbmZ1bmN0aW9uIGV4dHJhY3RUaW1lb3V0KGNvbmZpZywgbG9nKSB7XG4gICAgaWYgKHV0aWwuaXNPYmplY3QoY29uZmlnKSAmJiBjb25maWcudGltZW91dCAhPSBudWxsKSB7XG4gICAgICAgIHV0aWwuYXNzZXJ0TnVtYmVyT3JJbnRlZ2VyKGNvbmZpZy50aW1lb3V0LCAnVHJhbnNhY3Rpb24gdGltZW91dCcpO1xuICAgICAgICBpZiAoaXNUaW1lb3V0RmxvYXQoY29uZmlnKSAmJiAobG9nID09PSBudWxsIHx8IGxvZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogbG9nLmlzSW5mb0VuYWJsZWQoKSkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcmVzdHJpY3QtdGVtcGxhdGUtZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIGxvZyA9PT0gbnVsbCB8fCBsb2cgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGxvZy5pbmZvKFwiVHJhbnNhY3Rpb24gdGltZW91dCBleHBlY3RlZCB0byBiZSBhbiBpbnRlZ2VyLCBnb3Q6IFwiLmNvbmNhdChjb25maWcudGltZW91dCwgXCIuIFRoZSB2YWx1ZSB3aWxsIGJlIHJvdW5kZWQgdXAuXCIpKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGltZW91dCA9ICgwLCBpbnRlZ2VyXzEuaW50KShjb25maWcudGltZW91dCwgeyBjZWlsRmxvYXQ6IHRydWUgfSk7XG4gICAgICAgIGlmICh0aW1lb3V0LmlzTmVnYXRpdmUoKSkge1xuICAgICAgICAgICAgdGhyb3cgKDAsIGVycm9yXzEubmV3RXJyb3IpKCdUcmFuc2FjdGlvbiB0aW1lb3V0IHNob3VsZCBub3QgYmUgbmVnYXRpdmUnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGltZW91dDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBpc1RpbWVvdXRGbG9hdChjb25maWcpIHtcbiAgICByZXR1cm4gdHlwZW9mIGNvbmZpZy50aW1lb3V0ID09PSAnbnVtYmVyJyAmJiAhTnVtYmVyLmlzSW50ZWdlcihjb25maWcudGltZW91dCk7XG59XG4vKipcbiAqIEByZXR1cm4ge29iamVjdHxudWxsfVxuICovXG5mdW5jdGlvbiBleHRyYWN0TWV0YWRhdGEoY29uZmlnKSB7XG4gICAgaWYgKHV0aWwuaXNPYmplY3QoY29uZmlnKSAmJiBjb25maWcubWV0YWRhdGEgIT0gbnVsbCkge1xuICAgICAgICB2YXIgbWV0YWRhdGEgPSBjb25maWcubWV0YWRhdGE7XG4gICAgICAgIHV0aWwuYXNzZXJ0T2JqZWN0KG1ldGFkYXRhLCAnY29uZmlnLm1ldGFkYXRhJyk7XG4gICAgICAgIGlmIChPYmplY3Qua2V5cyhtZXRhZGF0YSkubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAvLyBub3QgYW4gZW1wdHkgb2JqZWN0XG4gICAgICAgICAgICByZXR1cm4gbWV0YWRhdGE7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5mdW5jdGlvbiBhc3NlcnRWYWxpZENvbmZpZyhjb25maWcpIHtcbiAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgdXRpbC5hc3NlcnRPYmplY3QoY29uZmlnLCAnVHJhbnNhY3Rpb24gY29uZmlnJyk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/tx-config.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/url-util.js":
/*!*****************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/url-util.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Url = exports.formatIPv6Address = exports.formatIPv4Address = exports.defaultPortForScheme = exports.parseDatabaseUrl = void 0;\nvar util_1 = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\");\nvar DEFAULT_BOLT_PORT = 7687;\nvar DEFAULT_HTTP_PORT = 7474;\nvar DEFAULT_HTTPS_PORT = 7473;\nvar Url = /** @class */ (function () {\n    function Url(scheme, host, port, hostAndPort, query) {\n        /**\n         * Nullable scheme (protocol) of the URL.\n         * Example: 'bolt', 'neo4j', 'http', 'https', etc.\n         * @type {string}\n         */\n        this.scheme = scheme;\n        /**\n         * Nonnull host name or IP address. IPv6 not wrapped in square brackets.\n         * Example: 'neo4j.com', 'localhost', '127.0.0.1', '192.168.10.15', '::1', '2001:4860:4860::8844', etc.\n         * @type {string}\n         */\n        this.host = host;\n        /**\n         * Nonnull number representing port. Default port for the given scheme is used if given URL string\n         * does not contain port. Example: 7687 for bolt, 7474 for HTTP and 7473 for HTTPS.\n         * @type {number}\n         */\n        this.port = port;\n        /**\n         * Nonnull host name or IP address plus port, separated by ':'. IPv6 wrapped in square brackets.\n         * Example: 'neo4j.com', 'neo4j.com:7687', '127.0.0.1', '127.0.0.1:8080', '[2001:4860:4860::8844]',\n         * '[2001:4860:4860::8844]:9090', etc.\n         * @type {string}\n         */\n        this.hostAndPort = hostAndPort;\n        /**\n         * Nonnull object representing parsed query string key-value pairs. Duplicated keys not supported.\n         * Example: '{}', '{'key1': 'value1', 'key2': 'value2'}', etc.\n         * @type {Object}\n         */\n        this.query = query;\n    }\n    return Url;\n}());\nexports.Url = Url;\nfunction parseDatabaseUrl(url) {\n    var _a;\n    (0, util_1.assertString)(url, 'URL');\n    var sanitized = sanitizeUrl(url);\n    var parsedUrl = uriJsParse(sanitized.url);\n    var scheme = sanitized.schemeMissing\n        ? null\n        : extractScheme(parsedUrl.scheme);\n    var host = extractHost(parsedUrl.host); // no square brackets for IPv6\n    var formattedHost = formatHost(host); // has square brackets for IPv6\n    var port = extractPort(parsedUrl.port, scheme);\n    var hostAndPort = \"\".concat(formattedHost, \":\").concat(port);\n    var query = extractQuery(\n    // @ts-expect-error\n    (_a = parsedUrl.query) !== null && _a !== void 0 ? _a : extractResourceQueryString(parsedUrl.resourceName), url);\n    return new Url(scheme, host, port, hostAndPort, query);\n}\nexports.parseDatabaseUrl = parseDatabaseUrl;\nfunction extractResourceQueryString(resource) {\n    if (typeof resource !== 'string') {\n        return null;\n    }\n    var _a = __read(resource.split('?'), 2), query = _a[1];\n    return query;\n}\nfunction sanitizeUrl(url) {\n    url = url.trim();\n    if (!url.includes('://')) {\n        // url does not contain scheme, add dummy 'none://' to make parser work correctly\n        return { schemeMissing: true, url: \"none://\".concat(url) };\n    }\n    return { schemeMissing: false, url: url };\n}\nfunction extractScheme(scheme) {\n    if (scheme != null) {\n        scheme = scheme.trim();\n        if (scheme.charAt(scheme.length - 1) === ':') {\n            scheme = scheme.substring(0, scheme.length - 1);\n        }\n        return scheme;\n    }\n    return null;\n}\nfunction extractHost(host, url) {\n    if (host == null) {\n        throw new Error('Unable to extract host from null or undefined URL');\n    }\n    return host.trim();\n}\nfunction extractPort(portString, scheme) {\n    var port = typeof portString === 'string' ? parseInt(portString, 10) : portString;\n    return port != null && !isNaN(port) ? port : defaultPortForScheme(scheme);\n}\nfunction extractQuery(queryString, url) {\n    var query = queryString != null ? trimAndSanitizeQuery(queryString) : null;\n    var context = {};\n    if (query != null) {\n        query.split('&').forEach(function (pair) {\n            var keyValue = pair.split('=');\n            if (keyValue.length !== 2) {\n                throw new Error(\"Invalid parameters: '\".concat(keyValue.toString(), \"' in URL '\").concat(url, \"'.\"));\n            }\n            var key = trimAndVerifyQueryElement(keyValue[0], 'key', url);\n            var value = trimAndVerifyQueryElement(keyValue[1], 'value', url);\n            if (context[key] !== undefined) {\n                throw new Error(\"Duplicated query parameters with key '\".concat(key, \"' in URL '\").concat(url, \"'\"));\n            }\n            context[key] = value;\n        });\n    }\n    return context;\n}\nfunction trimAndSanitizeQuery(query) {\n    query = (query !== null && query !== void 0 ? query : '').trim();\n    if ((query === null || query === void 0 ? void 0 : query.charAt(0)) === '?') {\n        query = query.substring(1, query.length);\n    }\n    return query;\n}\nfunction trimAndVerifyQueryElement(element, name, url) {\n    element = (element !== null && element !== void 0 ? element : '').trim();\n    if (element === '') {\n        throw new Error(\"Illegal empty \".concat(name, \" in URL query '\").concat(url, \"'\"));\n    }\n    return element;\n}\nfunction escapeIPv6Address(address) {\n    var startsWithSquareBracket = address.charAt(0) === '[';\n    var endsWithSquareBracket = address.charAt(address.length - 1) === ']';\n    if (!startsWithSquareBracket && !endsWithSquareBracket) {\n        return \"[\".concat(address, \"]\");\n    }\n    else if (startsWithSquareBracket && endsWithSquareBracket) {\n        return address;\n    }\n    else {\n        throw new Error(\"Illegal IPv6 address \".concat(address));\n    }\n}\nfunction formatHost(host) {\n    if (host === '' || host == null) {\n        throw new Error(\"Illegal host \".concat(host));\n    }\n    var isIPv6Address = host.includes(':');\n    return isIPv6Address ? escapeIPv6Address(host) : host;\n}\nfunction formatIPv4Address(address, port) {\n    return \"\".concat(address, \":\").concat(port);\n}\nexports.formatIPv4Address = formatIPv4Address;\nfunction formatIPv6Address(address, port) {\n    var escapedAddress = escapeIPv6Address(address);\n    return \"\".concat(escapedAddress, \":\").concat(port);\n}\nexports.formatIPv6Address = formatIPv6Address;\nfunction defaultPortForScheme(scheme) {\n    if (scheme === 'http') {\n        return DEFAULT_HTTP_PORT;\n    }\n    else if (scheme === 'https') {\n        return DEFAULT_HTTPS_PORT;\n    }\n    else {\n        return DEFAULT_BOLT_PORT;\n    }\n}\nexports.defaultPortForScheme = defaultPortForScheme;\nfunction uriJsParse(value) {\n    // JS version of Python partition function\n    function partition(s, delimiter) {\n        var i = s.indexOf(delimiter);\n        if (i >= 0)\n            return [s.substring(0, i), s[i], s.substring(i + 1)];\n        else\n            return [s, '', ''];\n    }\n    // JS version of Python rpartition function\n    function rpartition(s, delimiter) {\n        var i = s.lastIndexOf(delimiter);\n        if (i >= 0)\n            return [s.substring(0, i), s[i], s.substring(i + 1)];\n        else\n            return ['', '', s];\n    }\n    function between(s, ldelimiter, rdelimiter) {\n        var lpartition = partition(s, ldelimiter);\n        var rpartition = partition(lpartition[2], rdelimiter);\n        return [rpartition[0], rpartition[2]];\n    }\n    // Parse an authority string into an object\n    // with the following keys:\n    // - userInfo (optional, might contain both user name and password)\n    // - host\n    // - port (optional, included only as a string)\n    function parseAuthority(value) {\n        var parsed = {};\n        var parts;\n        // Parse user info\n        parts = rpartition(value, '@');\n        if (parts[1] === '@') {\n            parsed.userInfo = decodeURIComponent(parts[0]);\n            value = parts[2];\n        }\n        // Parse host and port\n        var _a = __read(between(value, '[', ']'), 2), ipv6Host = _a[0], rest = _a[1];\n        if (ipv6Host !== '') {\n            parsed.host = ipv6Host;\n            parts = partition(rest, ':');\n        }\n        else {\n            parts = partition(value, ':');\n            parsed.host = parts[0];\n        }\n        if (parts[1] === ':') {\n            parsed.port = parts[2];\n        }\n        return parsed;\n    }\n    var parsed = {};\n    var parts;\n    // Parse scheme\n    parts = partition(value, ':');\n    if (parts[1] === ':') {\n        parsed.scheme = decodeURIComponent(parts[0]);\n        value = parts[2];\n    }\n    // Parse fragment\n    parts = partition(value, '#');\n    if (parts[1] === '#') {\n        parsed.fragment = decodeURIComponent(parts[2]);\n        value = parts[0];\n    }\n    // Parse query\n    parts = partition(value, '?');\n    if (parts[1] === '?') {\n        parsed.query = parts[2];\n        value = parts[0];\n    }\n    // Parse authority and path\n    if (value.startsWith('//')) {\n        parts = partition(value.substr(2), '/');\n        parsed = __assign(__assign({}, parsed), parseAuthority(parts[0]));\n        parsed.path = parts[1] + parts[2];\n    }\n    else {\n        parsed.path = value;\n    }\n    return parsed;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/url-util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js":
/*!*************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/internal/util.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ENCRYPTION_OFF = exports.ENCRYPTION_ON = exports.equals = exports.validateQueryAndParameters = exports.toNumber = exports.assertValidDate = exports.assertNumberOrInteger = exports.assertNumber = exports.assertString = exports.assertObject = exports.isString = exports.isObject = exports.isEmptyObjectOrNull = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nvar integer_1 = __importStar(__webpack_require__(/*! ../integer */ \"(ssr)/./node_modules/neo4j-driver-core/lib/integer.js\"));\nvar json_1 = __webpack_require__(/*! ../json */ \"(ssr)/./node_modules/neo4j-driver-core/lib/json.js\");\nvar ENCRYPTION_ON = 'ENCRYPTION_ON';\nexports.ENCRYPTION_ON = ENCRYPTION_ON;\nvar ENCRYPTION_OFF = 'ENCRYPTION_OFF';\nexports.ENCRYPTION_OFF = ENCRYPTION_OFF;\n/**\n * Verifies if the object is null or empty\n * @param obj The subject object\n * @returns {boolean} True if it's empty object or null\n */\nfunction isEmptyObjectOrNull(obj) {\n    if (obj === null) {\n        return true;\n    }\n    if (!isObject(obj)) {\n        return false;\n    }\n    for (var prop in obj) {\n        if (obj[prop] !== undefined) {\n            return false;\n        }\n    }\n    return true;\n}\nexports.isEmptyObjectOrNull = isEmptyObjectOrNull;\n/**\n * Verify if it's an object\n * @param obj The subject\n * @returns {boolean} True if it's an object\n */\nfunction isObject(obj) {\n    return typeof obj === 'object' && !Array.isArray(obj) && obj !== null;\n}\nexports.isObject = isObject;\n/**\n * Check and normalize given query and parameters.\n * @param {string|{text: string, parameters: Object}} query the query to check.\n * @param {Object} parameters\n * @return {{validatedQuery: string|{text: string, parameters: Object}, params: Object}} the normalized query with parameters.\n * @throws TypeError when either given query or parameters are invalid.\n */\nfunction validateQueryAndParameters(query, parameters, opt) {\n    var _a, _b;\n    var validatedQuery = '';\n    var params = parameters !== null && parameters !== void 0 ? parameters : {};\n    var skipAsserts = (_a = opt === null || opt === void 0 ? void 0 : opt.skipAsserts) !== null && _a !== void 0 ? _a : false;\n    if (typeof query === 'string') {\n        validatedQuery = query;\n    }\n    else if (query instanceof String) {\n        validatedQuery = query.toString();\n    }\n    else if (typeof query === 'object' && query.text != null) {\n        validatedQuery = query.text;\n        params = (_b = query.parameters) !== null && _b !== void 0 ? _b : {};\n    }\n    if (!skipAsserts) {\n        assertCypherQuery(validatedQuery);\n        assertQueryParameters(params);\n    }\n    return { validatedQuery: validatedQuery, params: params };\n}\nexports.validateQueryAndParameters = validateQueryAndParameters;\n/**\n * Assert it's a object\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {object} The subject object\n * @throws {TypeError} when the supplied param is not an object\n */\nfunction assertObject(obj, objName) {\n    if (!isObject(obj)) {\n        throw new TypeError(objName + ' expected to be an object but was: ' + (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertObject = assertObject;\n/**\n * Assert it's a string\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {string} The subject string\n * @throws {TypeError} when the supplied param is not a string\n */\nfunction assertString(obj, objName) {\n    if (!isString(obj)) {\n        throw new TypeError((0, json_1.stringify)(objName) + ' expected to be string but was: ' + (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertString = assertString;\n/**\n * Assert it's a number\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {number} The number\n * @throws {TypeError} when the supplied param is not a number\n */\nfunction assertNumber(obj, objName) {\n    if (typeof obj !== 'number') {\n        throw new TypeError(objName + ' expected to be a number but was: ' + (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertNumber = assertNumber;\n/**\n * Assert it's a number or integer\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {number|Integer} The subject object\n * @throws {TypeError} when the supplied param is not a number or integer\n */\nfunction assertNumberOrInteger(obj, objName) {\n    if (typeof obj !== 'number' && typeof obj !== 'bigint' && !(0, integer_1.isInt)(obj)) {\n        throw new TypeError(objName +\n            ' expected to be either a number or an Integer object but was: ' +\n            (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertNumberOrInteger = assertNumberOrInteger;\n/**\n * Assert it's a valid datae\n * @param {any} obj The subject\n * @param {string} objName The object name\n * @returns {Date} The valida date\n * @throws {TypeError} when the supplied param is not a valid date\n */\nfunction assertValidDate(obj, objName) {\n    if (Object.prototype.toString.call(obj) !== '[object Date]') {\n        throw new TypeError(objName +\n            ' expected to be a standard JavaScript Date but was: ' +\n            (0, json_1.stringify)(obj));\n    }\n    if (Number.isNaN(obj.getTime())) {\n        throw new TypeError(objName +\n            ' expected to be valid JavaScript Date but its time was NaN: ' +\n            (0, json_1.stringify)(obj));\n    }\n    return obj;\n}\nexports.assertValidDate = assertValidDate;\n/**\n * Validates a cypher query string\n * @param {any} obj The query\n * @returns {void}\n * @throws {TypeError} if the query is not valid\n */\nfunction assertCypherQuery(obj) {\n    assertString(obj, 'Cypher query');\n    if (obj.trim().length === 0) {\n        throw new TypeError('Cypher query is expected to be a non-empty string.');\n    }\n}\n/**\n * Validates if the query parameters is an object\n * @param {any} obj The parameters\n * @returns {void}\n * @throws {TypeError} if the parameters is not valid\n */\nfunction assertQueryParameters(obj) {\n    if (!isObject(obj)) {\n        // objects created with `Object.create(null)` do not have a constructor property\n        // eslint-disable-next-line @typescript-eslint/restrict-plus-operands\n        var constructor = obj.constructor != null ? ' ' + obj.constructor.name : '';\n        throw new TypeError(\"Query parameters are expected to either be undefined/null or an object, given:\".concat(constructor, \" \").concat(JSON.stringify(obj)));\n    }\n}\n/**\n * Verify if the supplied object is a string\n *\n * @param str The string\n * @returns {boolean} True if the supplied object is an string\n */\nfunction isString(str) {\n    return Object.prototype.toString.call(str) === '[object String]';\n}\nexports.isString = isString;\n/**\n * Verifies if object are the equals\n * @param {unknown} a\n * @param {unknown} b\n * @returns {boolean}\n */\nfunction equals(a, b) {\n    var e_1, _a;\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null) {\n        return false;\n    }\n    if (typeof a === 'object' && typeof b === 'object') {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        if (keysA.length !== keysB.length) {\n            return false;\n        }\n        try {\n            for (var keysA_1 = __values(keysA), keysA_1_1 = keysA_1.next(); !keysA_1_1.done; keysA_1_1 = keysA_1.next()) {\n                var key = keysA_1_1.value;\n                if (!equals(a[key], b[key])) {\n                    return false;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (keysA_1_1 && !keysA_1_1.done && (_a = keysA_1.return)) _a.call(keysA_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return true;\n    }\n    return false;\n}\nexports.equals = equals;\n/**\n * Converts (Integer | bigint) to number.\n *\n * @private\n * @param {NumberOrInteger} value The number or integer\n * @returns {number} The number\n */\nfunction toNumber(value) {\n    if (value instanceof integer_1.default) {\n        return value.toNumber();\n    }\n    else if (typeof value === 'bigint') {\n        return (0, integer_1.int)(value).toNumber();\n    }\n    else {\n        return value;\n    }\n}\nexports.toNumber = toNumber;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/json.js":
/*!****************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/json.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.stringify = void 0;\nvar object_util_1 = __webpack_require__(/*! ./internal/object-util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/object-util.js\");\n/**\n * Custom version on JSON.stringify that can handle values that normally don't support serialization, such as BigInt.\n * @private\n * @param val A JavaScript value, usually an object or array, to be converted.\n * @returns A JSON string representing the given value.\n */\nfunction stringify(val, opts) {\n    return JSON.stringify(val, function (_, value) {\n        if ((0, object_util_1.isBrokenObject)(value)) {\n            return {\n                __isBrokenObject__: true,\n                __reason__: (0, object_util_1.getBrokenObjectReason)(value)\n            };\n        }\n        if (typeof value === 'bigint') {\n            return \"\".concat(value, \"n\");\n        }\n        if ((opts === null || opts === void 0 ? void 0 : opts.useCustomToString) === true &&\n            typeof value === 'object' &&\n            !Array.isArray(value) &&\n            typeof value.toString === 'function' &&\n            value.toString !== Object.prototype.toString) {\n            return value === null || value === void 0 ? void 0 : value.toString();\n        }\n        return value;\n    });\n}\nexports.stringify = stringify;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL2pzb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxpQkFBaUI7QUFDakIsb0JBQW9CLG1CQUFPLENBQUMsa0dBQXdCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsaUJBQWlCIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvanNvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBcIk5lbzRqXCJcbiAqIE5lbzRqIFN3ZWRlbiBBQiBbaHR0cHM6Ly9uZW80ai5jb21dXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnN0cmluZ2lmeSA9IHZvaWQgMDtcbnZhciBvYmplY3RfdXRpbF8xID0gcmVxdWlyZShcIi4vaW50ZXJuYWwvb2JqZWN0LXV0aWxcIik7XG4vKipcbiAqIEN1c3RvbSB2ZXJzaW9uIG9uIEpTT04uc3RyaW5naWZ5IHRoYXQgY2FuIGhhbmRsZSB2YWx1ZXMgdGhhdCBub3JtYWxseSBkb24ndCBzdXBwb3J0IHNlcmlhbGl6YXRpb24sIHN1Y2ggYXMgQmlnSW50LlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB2YWwgQSBKYXZhU2NyaXB0IHZhbHVlLCB1c3VhbGx5IGFuIG9iamVjdCBvciBhcnJheSwgdG8gYmUgY29udmVydGVkLlxuICogQHJldHVybnMgQSBKU09OIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGdpdmVuIHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdHJpbmdpZnkodmFsLCBvcHRzKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbCwgZnVuY3Rpb24gKF8sIHZhbHVlKSB7XG4gICAgICAgIGlmICgoMCwgb2JqZWN0X3V0aWxfMS5pc0Jyb2tlbk9iamVjdCkodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIF9faXNCcm9rZW5PYmplY3RfXzogdHJ1ZSxcbiAgICAgICAgICAgICAgICBfX3JlYXNvbl9fOiAoMCwgb2JqZWN0X3V0aWxfMS5nZXRCcm9rZW5PYmplY3RSZWFzb24pKHZhbHVlKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnYmlnaW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KHZhbHVlLCBcIm5cIik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChvcHRzID09PSBudWxsIHx8IG9wdHMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdHMudXNlQ3VzdG9tVG9TdHJpbmcpID09PSB0cnVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiZcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgICAgICAgdmFsdWUudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG59XG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeTtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/json.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/notification-filter.js":
/*!*******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/notification-filter.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.notificationFilterDisabledClassification = exports.notificationFilterDisabledCategory = exports.notificationFilterMinimumSeverityLevel = void 0;\n/**\n * @typedef {'WARNING' | 'INFORMATION' | 'OFF'} NotificationFilterMinimumSeverityLevel\n */\n/**\n * Constants that represents the minimum Severity level in the {@link NotificationFilter}\n */\nvar notificationFilterMinimumSeverityLevel = {\n    OFF: 'OFF',\n    WARNING: 'WARNING',\n    INFORMATION: 'INFORMATION'\n};\nexports.notificationFilterMinimumSeverityLevel = notificationFilterMinimumSeverityLevel;\nObject.freeze(notificationFilterMinimumSeverityLevel);\n/**\n * @typedef {'HINT' | 'UNRECOGNIZED' | 'UNSUPPORTED' |'PERFORMANCE' | 'TOPOLOGY' | 'SECURITY' | 'DEPRECATION' | 'GENERIC' | 'SCHEMA'} NotificationFilterDisabledCategory\n */\n/**\n * Constants that represents the disabled categories in the {@link NotificationFilter}\n */\nvar notificationFilterDisabledCategory = {\n    HINT: 'HINT',\n    UNRECOGNIZED: 'UNRECOGNIZED',\n    UNSUPPORTED: 'UNSUPPORTED',\n    PERFORMANCE: 'PERFORMANCE',\n    TOPOLOGY: 'TOPOLOGY',\n    SECURITY: 'SECURITY',\n    DEPRECATION: 'DEPRECATION',\n    GENERIC: 'GENERIC',\n    SCHEMA: 'SCHEMA'\n};\nexports.notificationFilterDisabledCategory = notificationFilterDisabledCategory;\nObject.freeze(notificationFilterDisabledCategory);\n/**\n * @typedef {NotificationFilterDisabledCategory} NotificationFilterDisabledClassification\n * @experimental\n */\n/**\n * Constants that represents the disabled classifications in the {@link NotificationFilter}\n *\n * @type {notificationFilterDisabledCategory}\n * @experimental\n */\nvar notificationFilterDisabledClassification = notificationFilterDisabledCategory;\nexports.notificationFilterDisabledClassification = notificationFilterDisabledClassification;\n/**\n * The notification filter object which can be configured in\n * the session and driver creation.\n *\n * Values not defined are interpreted as default.\n *\n * @interface\n */\nvar NotificationFilter = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function NotificationFilter() {\n        /**\n         * The minimum level of all notifications to receive.\n         *\n         * @public\n         * @type {?NotificationFilterMinimumSeverityLevel}\n         */\n        this.minimumSeverityLevel = undefined;\n        /**\n         * Categories the user would like to opt-out of receiving.\n         *\n         *\n         * This property is equivalent to {@link NotificationFilter#disabledClassifications}\n         * and it must not be enabled at same time.\n         *\n         * @type {?NotificationFilterDisabledCategory[]}\n         */\n        this.disabledCategories = undefined;\n        /**\n         * Classifications the user would like to opt-out of receiving.\n         *\n         * This property is equivalent to {@link NotificationFilter#disabledCategories}\n         * and it must not be enabled at same time.\n         *\n         * @type {?NotificationFilterDisabledClassification[]}\n         * @experimental\n         */\n        this.disabledClassifications = undefined;\n        throw new Error('Not implemented');\n    }\n    return NotificationFilter;\n}());\nexports[\"default\"] = NotificationFilter;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL25vdGlmaWNhdGlvbi1maWx0ZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0RBQWdELEdBQUcsMENBQTBDLEdBQUcsOENBQThDO0FBQzlJO0FBQ0EsYUFBYSxtQ0FBbUM7QUFDaEQ7QUFDQTtBQUNBLGdFQUFnRTtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBLGFBQWEseUhBQXlIO0FBQ3RJO0FBQ0E7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQSxhQUFhLG9DQUFvQztBQUNqRDtBQUNBO0FBQ0E7QUFDQSxrRUFBa0U7QUFDbEU7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdEO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELGtCQUFlIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvbm90aWZpY2F0aW9uLWZpbHRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubm90aWZpY2F0aW9uRmlsdGVyRGlzYWJsZWRDbGFzc2lmaWNhdGlvbiA9IGV4cG9ydHMubm90aWZpY2F0aW9uRmlsdGVyRGlzYWJsZWRDYXRlZ29yeSA9IGV4cG9ydHMubm90aWZpY2F0aW9uRmlsdGVyTWluaW11bVNldmVyaXR5TGV2ZWwgPSB2b2lkIDA7XG4vKipcbiAqIEB0eXBlZGVmIHsnV0FSTklORycgfCAnSU5GT1JNQVRJT04nIHwgJ09GRid9IE5vdGlmaWNhdGlvbkZpbHRlck1pbmltdW1TZXZlcml0eUxldmVsXG4gKi9cbi8qKlxuICogQ29uc3RhbnRzIHRoYXQgcmVwcmVzZW50cyB0aGUgbWluaW11bSBTZXZlcml0eSBsZXZlbCBpbiB0aGUge0BsaW5rIE5vdGlmaWNhdGlvbkZpbHRlcn1cbiAqL1xudmFyIG5vdGlmaWNhdGlvbkZpbHRlck1pbmltdW1TZXZlcml0eUxldmVsID0ge1xuICAgIE9GRjogJ09GRicsXG4gICAgV0FSTklORzogJ1dBUk5JTkcnLFxuICAgIElORk9STUFUSU9OOiAnSU5GT1JNQVRJT04nXG59O1xuZXhwb3J0cy5ub3RpZmljYXRpb25GaWx0ZXJNaW5pbXVtU2V2ZXJpdHlMZXZlbCA9IG5vdGlmaWNhdGlvbkZpbHRlck1pbmltdW1TZXZlcml0eUxldmVsO1xuT2JqZWN0LmZyZWV6ZShub3RpZmljYXRpb25GaWx0ZXJNaW5pbXVtU2V2ZXJpdHlMZXZlbCk7XG4vKipcbiAqIEB0eXBlZGVmIHsnSElOVCcgfCAnVU5SRUNPR05JWkVEJyB8ICdVTlNVUFBPUlRFRCcgfCdQRVJGT1JNQU5DRScgfCAnVE9QT0xPR1knIHwgJ1NFQ1VSSVRZJyB8ICdERVBSRUNBVElPTicgfCAnR0VORVJJQycgfCAnU0NIRU1BJ30gTm90aWZpY2F0aW9uRmlsdGVyRGlzYWJsZWRDYXRlZ29yeVxuICovXG4vKipcbiAqIENvbnN0YW50cyB0aGF0IHJlcHJlc2VudHMgdGhlIGRpc2FibGVkIGNhdGVnb3JpZXMgaW4gdGhlIHtAbGluayBOb3RpZmljYXRpb25GaWx0ZXJ9XG4gKi9cbnZhciBub3RpZmljYXRpb25GaWx0ZXJEaXNhYmxlZENhdGVnb3J5ID0ge1xuICAgIEhJTlQ6ICdISU5UJyxcbiAgICBVTlJFQ09HTklaRUQ6ICdVTlJFQ09HTklaRUQnLFxuICAgIFVOU1VQUE9SVEVEOiAnVU5TVVBQT1JURUQnLFxuICAgIFBFUkZPUk1BTkNFOiAnUEVSRk9STUFOQ0UnLFxuICAgIFRPUE9MT0dZOiAnVE9QT0xPR1knLFxuICAgIFNFQ1VSSVRZOiAnU0VDVVJJVFknLFxuICAgIERFUFJFQ0FUSU9OOiAnREVQUkVDQVRJT04nLFxuICAgIEdFTkVSSUM6ICdHRU5FUklDJyxcbiAgICBTQ0hFTUE6ICdTQ0hFTUEnXG59O1xuZXhwb3J0cy5ub3RpZmljYXRpb25GaWx0ZXJEaXNhYmxlZENhdGVnb3J5ID0gbm90aWZpY2F0aW9uRmlsdGVyRGlzYWJsZWRDYXRlZ29yeTtcbk9iamVjdC5mcmVlemUobm90aWZpY2F0aW9uRmlsdGVyRGlzYWJsZWRDYXRlZ29yeSk7XG4vKipcbiAqIEB0eXBlZGVmIHtOb3RpZmljYXRpb25GaWx0ZXJEaXNhYmxlZENhdGVnb3J5fSBOb3RpZmljYXRpb25GaWx0ZXJEaXNhYmxlZENsYXNzaWZpY2F0aW9uXG4gKiBAZXhwZXJpbWVudGFsXG4gKi9cbi8qKlxuICogQ29uc3RhbnRzIHRoYXQgcmVwcmVzZW50cyB0aGUgZGlzYWJsZWQgY2xhc3NpZmljYXRpb25zIGluIHRoZSB7QGxpbmsgTm90aWZpY2F0aW9uRmlsdGVyfVxuICpcbiAqIEB0eXBlIHtub3RpZmljYXRpb25GaWx0ZXJEaXNhYmxlZENhdGVnb3J5fVxuICogQGV4cGVyaW1lbnRhbFxuICovXG52YXIgbm90aWZpY2F0aW9uRmlsdGVyRGlzYWJsZWRDbGFzc2lmaWNhdGlvbiA9IG5vdGlmaWNhdGlvbkZpbHRlckRpc2FibGVkQ2F0ZWdvcnk7XG5leHBvcnRzLm5vdGlmaWNhdGlvbkZpbHRlckRpc2FibGVkQ2xhc3NpZmljYXRpb24gPSBub3RpZmljYXRpb25GaWx0ZXJEaXNhYmxlZENsYXNzaWZpY2F0aW9uO1xuLyoqXG4gKiBUaGUgbm90aWZpY2F0aW9uIGZpbHRlciBvYmplY3Qgd2hpY2ggY2FuIGJlIGNvbmZpZ3VyZWQgaW5cbiAqIHRoZSBzZXNzaW9uIGFuZCBkcml2ZXIgY3JlYXRpb24uXG4gKlxuICogVmFsdWVzIG5vdCBkZWZpbmVkIGFyZSBpbnRlcnByZXRlZCBhcyBkZWZhdWx0LlxuICpcbiAqIEBpbnRlcmZhY2VcbiAqL1xudmFyIE5vdGlmaWNhdGlvbkZpbHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICAvKipcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE5vdGlmaWNhdGlvbkZpbHRlcigpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBtaW5pbXVtIGxldmVsIG9mIGFsbCBub3RpZmljYXRpb25zIHRvIHJlY2VpdmUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBwdWJsaWNcbiAgICAgICAgICogQHR5cGUgez9Ob3RpZmljYXRpb25GaWx0ZXJNaW5pbXVtU2V2ZXJpdHlMZXZlbH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubWluaW11bVNldmVyaXR5TGV2ZWwgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYXRlZ29yaWVzIHRoZSB1c2VyIHdvdWxkIGxpa2UgdG8gb3B0LW91dCBvZiByZWNlaXZpbmcuXG4gICAgICAgICAqXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgcHJvcGVydHkgaXMgZXF1aXZhbGVudCB0byB7QGxpbmsgTm90aWZpY2F0aW9uRmlsdGVyI2Rpc2FibGVkQ2xhc3NpZmljYXRpb25zfVxuICAgICAgICAgKiBhbmQgaXQgbXVzdCBub3QgYmUgZW5hYmxlZCBhdCBzYW1lIHRpbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHs/Tm90aWZpY2F0aW9uRmlsdGVyRGlzYWJsZWRDYXRlZ29yeVtdfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5kaXNhYmxlZENhdGVnb3JpZXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDbGFzc2lmaWNhdGlvbnMgdGhlIHVzZXIgd291bGQgbGlrZSB0byBvcHQtb3V0IG9mIHJlY2VpdmluZy5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBwcm9wZXJ0eSBpcyBlcXVpdmFsZW50IHRvIHtAbGluayBOb3RpZmljYXRpb25GaWx0ZXIjZGlzYWJsZWRDYXRlZ29yaWVzfVxuICAgICAgICAgKiBhbmQgaXQgbXVzdCBub3QgYmUgZW5hYmxlZCBhdCBzYW1lIHRpbWUuXG4gICAgICAgICAqXG4gICAgICAgICAqIEB0eXBlIHs/Tm90aWZpY2F0aW9uRmlsdGVyRGlzYWJsZWRDbGFzc2lmaWNhdGlvbltdfVxuICAgICAgICAgKiBAZXhwZXJpbWVudGFsXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmRpc2FibGVkQ2xhc3NpZmljYXRpb25zID0gdW5kZWZpbmVkO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCcpO1xuICAgIH1cbiAgICByZXR1cm4gTm90aWZpY2F0aW9uRmlsdGVyO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE5vdGlmaWNhdGlvbkZpbHRlcjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/notification-filter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/notification.js":
/*!************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/notification.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.buildNotificationsFromMetadata = exports.buildGqlStatusObjectFromMetadata = exports.polyfillNotification = exports.polyfillGqlStatusObject = exports.GqlStatusObject = exports.Notification = exports.notificationClassification = exports.notificationCategory = exports.notificationSeverityLevel = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar json = __importStar(__webpack_require__(/*! ./json */ \"(ssr)/./node_modules/neo4j-driver-core/lib/json.js\"));\nvar internal_1 = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/index.js\");\nvar gql_constants_1 = __webpack_require__(/*! ./gql-constants */ \"(ssr)/./node_modules/neo4j-driver-core/lib/gql-constants.js\");\nvar unknownGqlStatus = {\n    WARNING: {\n        gql_status: '01N42',\n        status_description: 'warn: unknown warning'\n    },\n    NO_DATA: {\n        gql_status: '02N42',\n        status_description: 'note: no data - unknown subcondition'\n    },\n    INFORMATION: {\n        gql_status: '03N42',\n        status_description: 'info: unknown notification'\n    },\n    ERROR: {\n        gql_status: '50N42',\n        status_description: 'error: general processing exception - unexpected error'\n    }\n};\n/**\n * @typedef {'WARNING' | 'INFORMATION' | 'UNKNOWN'} NotificationSeverityLevel\n */\n/**\n * Constants that represents the Severity level in the {@link Notification}\n */\nvar notificationSeverityLevel = {\n    WARNING: 'WARNING',\n    INFORMATION: 'INFORMATION',\n    UNKNOWN: 'UNKNOWN'\n};\nexports.notificationSeverityLevel = notificationSeverityLevel;\nObject.freeze(notificationSeverityLevel);\nvar severityLevels = Object.values(notificationSeverityLevel);\n/**\n * @typedef {'HINT' | 'UNRECOGNIZED' | 'UNSUPPORTED' |'PERFORMANCE' | 'TOPOLOGY' | 'SECURITY' | 'DEPRECATION' | 'GENERIC' | 'SCHEMA' | 'UNKNOWN' } NotificationCategory\n */\n/**\n * Constants that represents the Category in the {@link Notification}\n */\nvar notificationCategory = {\n    HINT: 'HINT',\n    UNRECOGNIZED: 'UNRECOGNIZED',\n    UNSUPPORTED: 'UNSUPPORTED',\n    PERFORMANCE: 'PERFORMANCE',\n    DEPRECATION: 'DEPRECATION',\n    TOPOLOGY: 'TOPOLOGY',\n    SECURITY: 'SECURITY',\n    GENERIC: 'GENERIC',\n    SCHEMA: 'SCHEMA',\n    UNKNOWN: 'UNKNOWN'\n};\nexports.notificationCategory = notificationCategory;\nObject.freeze(notificationCategory);\nvar categories = Object.values(notificationCategory);\n/**\n * @typedef {NotificationCategory} NotificationClassification\n * @experimental\n */\n/**\n * Constants that represents the Classification in the {@link GqlStatusObject}\n * @type {notificationCategory}\n * @experimental\n */\nvar notificationClassification = notificationCategory;\nexports.notificationClassification = notificationClassification;\n/**\n * Class for Cypher notifications\n * @access public\n */\nvar Notification = /** @class */ (function () {\n    /**\n     * Create a Notification instance\n     * @constructor\n     * @param {Object} notification - Object with notification data\n     */\n    function Notification(notification) {\n        /**\n         * The code\n         * @type {string}\n         * @public\n         */\n        this.code = notification.code;\n        /**\n         * The title\n         * @type {string}\n         * @public\n         */\n        this.title = notification.title;\n        /**\n         * The description\n         * @type {string}\n         * @public\n         */\n        this.description = notification.description;\n        /**\n         * The raw severity\n         *\n         * Use {@link Notification#rawSeverityLevel} for the raw value or {@link Notification#severityLevel} for an enumerated value.\n         *\n         * @type {string}\n         * @public\n         * @deprecated This property will be removed in 6.0.\n         */\n        this.severity = notification.severity;\n        /**\n         * The position which the notification had occur.\n         *\n         * @type {NotificationPosition}\n         * @public\n         */\n        this.position = _constructPosition(notification.position);\n        /**\n         * The severity level\n         *\n         * @type {NotificationSeverityLevel}\n         * @public\n         * @example\n         * const { summary } = await session.run(\"RETURN 1\")\n         *\n         * for (const notification of summary.notifications) {\n         *     switch(notification.severityLevel) {\n         *         case neo4j.notificationSeverityLevel.INFORMATION: // or simply 'INFORMATION'\n         *             console.info(`${notification.title} - ${notification.description}`)\n         *             break\n         *         case neo4j.notificationSeverityLevel.WARNING: // or simply 'WARNING'\n         *             console.warn(`${notification.title} - ${notification.description}`)\n         *             break\n         *         case neo4j.notificationSeverityLevel.UNKNOWN: // or simply 'UNKNOWN'\n         *         default:\n         *             // the raw info came from the server could be found at notification.rawSeverityLevel\n         *             console.log(`${notification.title} - ${notification.description}`)\n         *             break\n         *     }\n         * }\n         */\n        this.severityLevel = _asEnumerableSeverity(notification.severity);\n        /**\n         * The severity level returned by the server without any validation.\n         *\n         * @type {string}\n         * @public\n         */\n        this.rawSeverityLevel = notification.severity;\n        /**\n         * The category\n         *\n         * @type {NotificationCategory}\n         * @public\n         * @example\n         * const { summary } = await session.run(\"RETURN 1\")\n         *\n         * for (const notification of summary.notifications) {\n         *     switch(notification.category) {\n         *         case neo4j.notificationCategory.QUERY: // or simply 'QUERY'\n         *             console.info(`${notification.title} - ${notification.description}`)\n         *             break\n         *         case neo4j.notificationCategory.PERFORMANCE: // or simply 'PERFORMANCE'\n         *             console.warn(`${notification.title} - ${notification.description}`)\n         *             break\n         *         case neo4j.notificationCategory.UNKNOWN: // or simply 'UNKNOWN'\n         *         default:\n         *             // the raw info came from the server could be found at notification.rawCategory\n         *             console.log(`${notification.title} - ${notification.description}`)\n         *             break\n         *     }\n         * }\n         */\n        this.category = _asEnumerableClassification(notification.category);\n        /**\n         * The category returned by the server without any validation.\n         *\n         * @type {string|undefined}\n         * @public\n         */\n        this.rawCategory = notification.category;\n    }\n    return Notification;\n}());\nexports.Notification = Notification;\n/**\n * Representation for GqlStatusObject found when executing a query.\n * <p>\n * This object represents a status of query execution.\n * This status is a superset of {@link Notification}.\n *\n * @experimental\n * @public\n */\nvar GqlStatusObject = /** @class */ (function () {\n    /**\n     *\n     * @param rawGqlStatusObject\n     * @private\n     */\n    function GqlStatusObject(rawGqlStatusObject) {\n        var _a;\n        /**\n         * The GQLSTATUS\n         *\n         * @type {string}\n         * @public\n         */\n        this.gqlStatus = rawGqlStatusObject.gql_status;\n        /**\n         * The GQLSTATUS description\n         *\n         * @type {string}\n         * @public\n         */\n        this.statusDescription = rawGqlStatusObject.status_description;\n        /**\n         * The diagnostic record as it is.\n         *\n         * @type {object}\n         * @public\n         */\n        this.diagnosticRecord = (_a = rawGqlStatusObject.diagnostic_record) !== null && _a !== void 0 ? _a : {};\n        /**\n         * The position at which the notification had occurred.\n         *\n         * @type {NotificationPosition | undefined}\n         * @public\n         */\n        this.position = this.diagnosticRecord._position != null ? _constructPosition(this.diagnosticRecord._position) : undefined;\n        /**\n         * The severity\n         *\n         * @type {NotificationSeverityLevel}\n         * @public\n         * @example\n         * const { summary } = await session.run(\"RETURN 1\")\n         *\n         * for (const gqlStatusObject of summary.gqlStatusObjects) {\n         *     switch(gqlStatusObject.severity) {\n         *         case neo4j.notificationSeverityLevel.INFORMATION: // or simply 'INFORMATION'\n         *             console.info(gqlStatusObject.statusDescription)\n         *             break\n         *         case neo4j.notificationSeverityLevel.WARNING: // or simply 'WARNING'\n         *             console.warn(gqlStatusObject.statusDescription)\n         *             break\n         *         case neo4j.notificationSeverityLevel.UNKNOWN: // or simply 'UNKNOWN'\n         *         default:\n         *             // the raw info came from the server could be found at gqlStatusObject.rawSeverity\n         *             console.log(gqlStatusObject.statusDescription)\n         *             break\n         *     }\n         * }\n         */\n        this.severity = _asEnumerableSeverity(this.diagnosticRecord._severity);\n        /**\n         * The severity returned in the diagnostic record from the server without any validation.\n         *\n         * @type {string | undefined}\n         * @public\n         */\n        this.rawSeverity = this.diagnosticRecord._severity;\n        /**\n         * The classification\n         *\n         * @type {NotificationClassification}\n         * @public\n         * @example\n         * const { summary } = await session.run(\"RETURN 1\")\n         *\n         * for (const gqlStatusObject of summary.gqlStatusObjects) {\n         *     switch(gqlStatusObject.classification) {\n         *         case neo4j.notificationClassification.QUERY: // or simply 'QUERY'\n         *             console.info(gqlStatusObject.statusDescription)\n         *             break\n         *         case neo4j.notificationClassification.PERFORMANCE: // or simply 'PERFORMANCE'\n         *             console.warn(gqlStatusObject.statusDescription)\n         *             break\n         *         case neo4j.notificationClassification.UNKNOWN: // or simply 'UNKNOWN'\n         *         default:\n         *             // the raw info came from the server can be found at notification.rawCategory\n         *             console.log(gqlStatusObject.statusDescription)\n         *             break\n         *     }\n         * }\n         */\n        this.classification = _asEnumerableClassification(this.diagnosticRecord._classification);\n        /**\n         * The category returned by the server without any validation.\n         *\n         * @type {string|undefined}\n         * @public\n         */\n        this.rawClassification = this.diagnosticRecord._classification;\n        /**\n         * Indicates if this object represents a notification and it can be filtered using\n         * NotificationFilter.\n         *\n         * Only GqlStatusObject which is Notification has meaningful position, severity and\n         * classification.\n         *\n         * @type {boolean}\n         * @public\n         */\n        this.isNotification = rawGqlStatusObject.neo4j_code != null;\n        Object.freeze(this);\n    }\n    Object.defineProperty(GqlStatusObject.prototype, \"diagnosticRecordAsJsonString\", {\n        /**\n         * The json string representation of the diagnostic record.\n         * The goal of this method is provide a serialized object for human inspection.\n         *\n         * @type {string}\n         * @public\n         */\n        get: function () {\n            return json.stringify(this.diagnosticRecord, { useCustomToString: true });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return GqlStatusObject;\n}());\nexports.GqlStatusObject = GqlStatusObject;\n/**\n *\n * @private\n * @param status\n * @returns {Notification|undefined}\n */\nfunction polyfillNotification(status) {\n    var _a, _b, _c;\n    // Non notification status should have neo4j_code\n    if (status.neo4j_code == null) {\n        return undefined;\n    }\n    return new Notification({\n        code: status.neo4j_code,\n        title: status.title,\n        description: status.description,\n        severity: (_a = status.diagnostic_record) === null || _a === void 0 ? void 0 : _a._severity,\n        category: (_b = status.diagnostic_record) === null || _b === void 0 ? void 0 : _b._classification,\n        position: (_c = status.diagnostic_record) === null || _c === void 0 ? void 0 : _c._position\n    });\n}\nexports.polyfillNotification = polyfillNotification;\n/**\n * @private\n * @param notification\n * @returns {GqlStatusObject}\n */\nfunction polyfillGqlStatusObject(notification) {\n    var _a;\n    var defaultStatus = notification.severity === notificationSeverityLevel.WARNING ? unknownGqlStatus.WARNING : unknownGqlStatus.INFORMATION;\n    var polyfilledRawObj = {\n        gql_status: defaultStatus.gql_status,\n        status_description: (_a = notification.description) !== null && _a !== void 0 ? _a : defaultStatus.status_description,\n        neo4j_code: notification.code,\n        title: notification.title,\n        diagnostic_record: __assign({}, gql_constants_1.rawPolyfilledDiagnosticRecord)\n    };\n    if (notification.severity != null) {\n        polyfilledRawObj.diagnostic_record._severity = notification.severity;\n    }\n    if (notification.category != null) {\n        polyfilledRawObj.diagnostic_record._classification = notification.category;\n    }\n    if (notification.position != null) {\n        polyfilledRawObj.diagnostic_record._position = notification.position;\n    }\n    return new GqlStatusObject(polyfilledRawObj);\n}\nexports.polyfillGqlStatusObject = polyfillGqlStatusObject;\n/**\n * This objects are used for polyfilling the first status on the status list\n *\n * @private\n */\nvar staticGqlStatusObjects = {\n    SUCCESS: new GqlStatusObject({\n        gql_status: '00000',\n        status_description: 'note: successful completion',\n        diagnostic_record: gql_constants_1.rawPolyfilledDiagnosticRecord\n    }),\n    NO_DATA: new GqlStatusObject({\n        gql_status: '02000',\n        status_description: 'note: no data',\n        diagnostic_record: gql_constants_1.rawPolyfilledDiagnosticRecord\n    }),\n    NO_DATA_UNKNOWN_SUBCONDITION: new GqlStatusObject(__assign(__assign({}, unknownGqlStatus.NO_DATA), { diagnostic_record: gql_constants_1.rawPolyfilledDiagnosticRecord })),\n    OMITTED_RESULT: new GqlStatusObject({\n        gql_status: '00001',\n        status_description: 'note: successful completion - omitted result',\n        diagnostic_record: gql_constants_1.rawPolyfilledDiagnosticRecord\n    })\n};\nObject.freeze(staticGqlStatusObjects);\n/**\n *\n * @private\n * @param metadata\n * @returns\n */\nfunction buildGqlStatusObjectFromMetadata(metadata) {\n    var _a, _b;\n    function getGqlStatusObjectFromStreamSummary(summary) {\n        if ((summary === null || summary === void 0 ? void 0 : summary.have_records_streamed) === true) {\n            return staticGqlStatusObjects.SUCCESS;\n        }\n        if ((summary === null || summary === void 0 ? void 0 : summary.has_keys) === false) {\n            return staticGqlStatusObjects.OMITTED_RESULT;\n        }\n        if ((summary === null || summary === void 0 ? void 0 : summary.pulled) === true) {\n            return staticGqlStatusObjects.NO_DATA;\n        }\n        return staticGqlStatusObjects.NO_DATA_UNKNOWN_SUBCONDITION;\n    }\n    if (metadata.statuses != null) {\n        return metadata.statuses.map(function (status) { return new GqlStatusObject(status); });\n    }\n    var clientGenerated = getGqlStatusObjectFromStreamSummary(metadata.stream_summary);\n    var polyfilledObjects = __spreadArray([clientGenerated], __read(((_b = (_a = metadata.notifications) === null || _a === void 0 ? void 0 : _a.map(polyfillGqlStatusObject)) !== null && _b !== void 0 ? _b : [])), false);\n    return polyfilledObjects.sort(function (a, b) { return calculateWeight(a) - calculateWeight(b); });\n}\nexports.buildGqlStatusObjectFromMetadata = buildGqlStatusObjectFromMetadata;\nvar gqlStatusWeightByClass = Object.freeze({\n    '02': 0,\n    '01': 1,\n    '00': 2\n});\n/**\n * GqlStatus weight\n *\n * @private\n */\nfunction calculateWeight(gqlStatusObject) {\n    var _a, _b;\n    var gqlClass = (_a = gqlStatusObject.gqlStatus) === null || _a === void 0 ? void 0 : _a.slice(0, 2);\n    // @ts-expect-error\n    return (_b = gqlStatusWeightByClass[gqlClass]) !== null && _b !== void 0 ? _b : 9999;\n}\n/**\n *\n * @private\n * @param metadata\n * @returns\n */\nfunction buildNotificationsFromMetadata(metadata) {\n    if (metadata.notifications != null) {\n        return metadata.notifications.map(function (n) { return new Notification(n); });\n    }\n    if (metadata.statuses != null) {\n        return metadata.statuses.map(polyfillNotification).filter(function (n) { return n != null; });\n    }\n    return [];\n}\nexports.buildNotificationsFromMetadata = buildNotificationsFromMetadata;\n/**\n *\n * @private\n * @param pos\n * @returns {NotificationPosition}\n */\nfunction _constructPosition(pos) {\n    if (pos == null) {\n        return {};\n    }\n    /* eslint-disable @typescript-eslint/no-non-null-assertion */\n    return {\n        offset: internal_1.util.toNumber(pos.offset),\n        line: internal_1.util.toNumber(pos.line),\n        column: internal_1.util.toNumber(pos.column)\n    };\n    /* eslint-enable @typescript-eslint/no-non-null-assertion */\n}\nfunction _asEnumerableSeverity(severity) {\n    return severityLevels.includes(severity)\n        ? severity\n        : notificationSeverityLevel.UNKNOWN;\n}\nfunction _asEnumerableClassification(classification) {\n    return categories.includes(classification)\n        ? classification\n        : notificationClassification.UNKNOWN;\n}\nexports[\"default\"] = Notification;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/notification.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/record.js":
/*!******************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/record.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nfunction generateFieldLookup(keys) {\n    var lookup = {};\n    keys.forEach(function (name, idx) {\n        lookup[name] = idx;\n    });\n    return lookup;\n}\n/**\n * Records make up the contents of the {@link Result}, and is how you access\n * the output of a query. A simple query might yield a result stream\n * with a single record, for instance:\n *\n *     MATCH (u:User) RETURN u.name, u.age\n *\n * This returns a stream of records with two fields, named `u.name` and `u.age`,\n * each record represents one user found by the query above. You can access\n * the values of each field either by name:\n *\n *     record.get(\"u.name\")\n *\n * Or by it's position:\n *\n *     record.get(0)\n *\n * @access public\n */\nvar Record = /** @class */ (function () {\n    /**\n     * Create a new record object.\n     * @constructor\n     * @protected\n     * @param {string[]} keys An array of field keys, in the order the fields appear in the record\n     * @param {Array} fields An array of field values\n     * @param {Object} fieldLookup An object of fieldName -> value index, used to map\n     *                            field names to values. If this is null, one will be\n     *                            generated.\n     */\n    function Record(keys, fields, fieldLookup) {\n        /**\n         * Field keys, in the order the fields appear in the record.\n         * @type {string[]}\n         */\n        this.keys = keys;\n        /**\n         * Number of fields\n         * @type {Number}\n         */\n        this.length = keys.length;\n        this._fields = fields;\n        this._fieldLookup = fieldLookup !== null && fieldLookup !== void 0 ? fieldLookup : generateFieldLookup(keys);\n    }\n    /**\n     * Run the given function for each field in this record. The function\n     * will get three arguments - the value, the key and this record, in that\n     * order.\n     *\n     * @param {function(value: Object, key: string, record: Record)} visitor the function to apply to each field.\n     * @returns {void} Nothing\n     */\n    Record.prototype.forEach = function (visitor) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\n                visitor(value, key, this);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Run the given function for each field in this record. The function\n     * will get three arguments - the value, the key and this record, in that\n     * order.\n     *\n     * @param {function(value: Object, key: string, record: Record)} visitor the function to apply on each field\n     * and return a value that is saved to the returned Array.\n     *\n     * @returns {Array}\n     */\n    Record.prototype.map = function (visitor) {\n        var e_2, _a;\n        var resultArray = [];\n        try {\n            for (var _b = __values(this.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\n                resultArray.push(visitor(value, key, this));\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return resultArray;\n    };\n    /**\n     * Iterate over results. Each iteration will yield an array\n     * of exactly two items - the key, and the value (in order).\n     *\n     * @generator\n     * @returns {IterableIterator<Array>}\n     */\n    Record.prototype.entries = function () {\n        var i;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < this.keys.length)) return [3 /*break*/, 4];\n                    return [4 /*yield*/, [this.keys[i], this._fields[i]]];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3:\n                    i++;\n                    return [3 /*break*/, 1];\n                case 4: return [2 /*return*/];\n            }\n        });\n    };\n    /**\n     * Iterate over values.\n     *\n     * @generator\n     * @returns {IterableIterator<Object>}\n     */\n    Record.prototype.values = function () {\n        var i;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < this.keys.length)) return [3 /*break*/, 4];\n                    return [4 /*yield*/, this._fields[i]];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3:\n                    i++;\n                    return [3 /*break*/, 1];\n                case 4: return [2 /*return*/];\n            }\n        });\n    };\n    /**\n     * Iterate over values. Delegates to {@link Record#values}\n     *\n     * @generator\n     * @returns {IterableIterator<Object>}\n     */\n    Record.prototype[Symbol.iterator] = function () {\n        var i;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    i = 0;\n                    _a.label = 1;\n                case 1:\n                    if (!(i < this.keys.length)) return [3 /*break*/, 4];\n                    return [4 /*yield*/, this._fields[i]];\n                case 2:\n                    _a.sent();\n                    _a.label = 3;\n                case 3:\n                    i++;\n                    return [3 /*break*/, 1];\n                case 4: return [2 /*return*/];\n            }\n        });\n    };\n    /**\n     * Generates an object out of the current Record\n     *\n     * @returns {Object}\n     */\n    Record.prototype.toObject = function () {\n        var e_3, _a;\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        var obj = {};\n        try {\n            for (var _b = __values(this.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];\n                obj[key] = value;\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n        return obj;\n    };\n    /**\n     * Get a value from this record, either by index or by field key.\n     *\n     * @param {string|Number} key Field key, or the index of the field.\n     * @returns {*}\n     */\n    Record.prototype.get = function (key) {\n        var index;\n        if (!(typeof key === 'number')) {\n            index = this._fieldLookup[key];\n            if (index === undefined) {\n                throw (0, error_1.newError)(\"This record has no field with key '\".concat(key.toString(), \"', available keys are: [\") +\n                    this.keys.toString() +\n                    '].');\n            }\n        }\n        else {\n            index = key;\n        }\n        if (index > this._fields.length - 1 || index < 0) {\n            throw (0, error_1.newError)(\"This record has no field with index '\" +\n                index.toString() +\n                \"'. Remember that indexes start at `0`, \" +\n                'and make sure your query returns records in the shape you meant it to.');\n        }\n        return this._fields[index];\n    };\n    /**\n     * Check if a value from this record, either by index or by field key, exists.\n     *\n     * @param {string|Number} key Field key, or the index of the field.\n     * @returns {boolean}\n     */\n    Record.prototype.has = function (key) {\n        // if key is a number, we check if it is in the _fields array\n        if (typeof key === 'number') {\n            return key >= 0 && key < this._fields.length;\n        }\n        // if it's not a number, we check _fieldLookup dictionary directly\n        return this._fieldLookup[key] !== undefined;\n    };\n    return Record;\n}());\nexports[\"default\"] = Record;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/record.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/result-eager.js":
/*!************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/result-eager.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Represents the fully streamed result\n */\nvar EagerResult = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     * @param {string[]} keys The records keys\n     * @param {Record[]} records The resulted records\n     * @param {ResultSummary[]} summary The result Summary\n     */\n    function EagerResult(keys, records, summary) {\n        /**\n         * Field keys, in the order the fields appear in the records.\n         * @type {string[]}\n         */\n        this.keys = keys;\n        /**\n         * Field records, in the order the records arrived from the server.\n         * @type {Record[]}\n         */\n        this.records = records;\n        /**\n         * Field summary\n         * @type {ResultSummary}\n         */\n        this.summary = summary;\n    }\n    return EagerResult;\n}());\nexports[\"default\"] = EagerResult;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL3Jlc3VsdC1lYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxVQUFVO0FBQ3pCLGVBQWUsVUFBVTtBQUN6QixlQUFlLGlCQUFpQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxrQkFBZSIsInNvdXJjZXMiOlsiL2hvbWUvanBpY2M4NjgxL3Byb2Qtc3lzdGVtL2RvY2tlci1kZXYvbGVnYWwtcGxhdGZvcm0tYmFja2VuZC9sZWdhbC1zb2Z0d2FyZS1wbGF0Zm9ybS9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL3Jlc3VsdC1lYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogQ29weXJpZ2h0IChjKSBcIk5lbzRqXCJcbiAqIE5lbzRqIFN3ZWRlbiBBQiBbaHR0cHM6Ly9uZW80ai5jb21dXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIGZ1bGx5IHN0cmVhbWVkIHJlc3VsdFxuICovXG52YXIgRWFnZXJSZXN1bHQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBrZXlzIFRoZSByZWNvcmRzIGtleXNcbiAgICAgKiBAcGFyYW0ge1JlY29yZFtdfSByZWNvcmRzIFRoZSByZXN1bHRlZCByZWNvcmRzXG4gICAgICogQHBhcmFtIHtSZXN1bHRTdW1tYXJ5W119IHN1bW1hcnkgVGhlIHJlc3VsdCBTdW1tYXJ5XG4gICAgICovXG4gICAgZnVuY3Rpb24gRWFnZXJSZXN1bHQoa2V5cywgcmVjb3Jkcywgc3VtbWFyeSkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmllbGQga2V5cywgaW4gdGhlIG9yZGVyIHRoZSBmaWVsZHMgYXBwZWFyIGluIHRoZSByZWNvcmRzLlxuICAgICAgICAgKiBAdHlwZSB7c3RyaW5nW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmtleXMgPSBrZXlzO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmllbGQgcmVjb3JkcywgaW4gdGhlIG9yZGVyIHRoZSByZWNvcmRzIGFycml2ZWQgZnJvbSB0aGUgc2VydmVyLlxuICAgICAgICAgKiBAdHlwZSB7UmVjb3JkW119XG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLnJlY29yZHMgPSByZWNvcmRzO1xuICAgICAgICAvKipcbiAgICAgICAgICogRmllbGQgc3VtbWFyeVxuICAgICAgICAgKiBAdHlwZSB7UmVzdWx0U3VtbWFyeX1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3VtbWFyeSA9IHN1bW1hcnk7XG4gICAgfVxuICAgIHJldHVybiBFYWdlclJlc3VsdDtcbn0oKSk7XG5leHBvcnRzLmRlZmF1bHQgPSBFYWdlclJlc3VsdDtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/result-eager.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/result-summary.js":
/*!**************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/result-summary.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Stats = exports.QueryStatistics = exports.ProfiledPlan = exports.Plan = exports.ServerInfo = exports.queryType = void 0;\nvar internal_1 = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/index.js\");\nvar notification_1 = __webpack_require__(/*! ./notification */ \"(ssr)/./node_modules/neo4j-driver-core/lib/notification.js\");\n/**\n * A ResultSummary instance contains structured metadata for a {@link Result}.\n * @access public\n */\nvar ResultSummary = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {string} query - The query this summary is for\n     * @param {Object} parameters - Parameters for the query\n     * @param {Object} metadata - Query metadata\n     * @param {number|undefined} protocolVersion - Bolt Protocol Version\n     */\n    function ResultSummary(query, parameters, metadata, protocolVersion) {\n        var _a, _b, _c;\n        /**\n         * The query and parameters this summary is for.\n         * @type {{text: string, parameters: Object}}\n         * @public\n         */\n        this.query = { text: query, parameters: parameters };\n        /**\n         * The type of query executed. Can be \"r\" for read-only query, \"rw\" for read-write query,\n         * \"w\" for write-only query and \"s\" for schema-write query.\n         * String constants are available in {@link queryType} object.\n         * @type {string}\n         * @public\n         */\n        this.queryType = metadata.type;\n        /**\n         * Counters for operations the query triggered.\n         * @type {QueryStatistics}\n         * @public\n         */\n        this.counters = new QueryStatistics((_a = metadata.stats) !== null && _a !== void 0 ? _a : {});\n        // for backwards compatibility, remove in future version\n        /**\n         * Use {@link ResultSummary.counters} instead.\n         * @type {QueryStatistics}\n         * @deprecated\n         */\n        this.updateStatistics = this.counters;\n        /**\n         * This describes how the database will execute the query.\n         * Query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"EXPLAIN\".\n         * @type {Plan|false}\n         * @public\n         */\n        this.plan =\n            metadata.plan != null || metadata.profile != null\n                ? new Plan((_b = metadata.plan) !== null && _b !== void 0 ? _b : metadata.profile)\n                : false;\n        /**\n         * This describes how the database did execute your query. This will contain detailed information about what\n         * each step of the plan did. Profiled query plan for the executed query if available, otherwise undefined.\n         * Will only be populated for queries that start with \"PROFILE\".\n         * @type {ProfiledPlan}\n         * @public\n         */\n        this.profile = metadata.profile != null ? new ProfiledPlan(metadata.profile) : false;\n        /**\n         * An array of notifications that might arise when executing the query. Notifications can be warnings about\n         * problematic queries or other valuable information that can be presented in a client. Unlike failures\n         * or errors, notifications do not affect the execution of a query.\n         * @type {Array<Notification>}\n         * @public\n         */\n        this.notifications = (0, notification_1.buildNotificationsFromMetadata)(metadata);\n        /**\n         * A list of GqlStatusObjects that arise when executing the query.\n         *\n         * The list always contains at least 1 status representing the Success, No Data or Omitted Result.\n         *\n         * When discarding records while connected to a non-gql aware server and using a RxSession,\n         * the driver might not be able to tell apart Success and No Data.\n         *\n         * All other status are notifications like warnings about problematic queries or other valuable\n         * information that can be presented in a client.\n         *\n         * The GqlStatusObjects will be presented in the following order:\n         *\n         * - A “no data” (02xxx) has precedence over a warning;\n         * - A warning (01xxx) has precedence over a success.\n         * - A success (00xxx) has precedence over anything informational (03xxx)\n         *\n         * @type {Array<GqlStatusObject>}\n         * @public\n         * @experimental\n         */\n        this.gqlStatusObjects = (0, notification_1.buildGqlStatusObjectFromMetadata)(metadata);\n        /**\n         * The basic information of the server where the result is obtained from.\n         * @type {ServerInfo}\n         * @public\n         */\n        this.server = new ServerInfo(metadata.server, protocolVersion);\n        /**\n         * The time it took the server to consume the result.\n         * @type {number}\n         * @public\n         */\n        this.resultConsumedAfter = metadata.result_consumed_after;\n        /**\n         * The time it took the server to make the result available for consumption in milliseconds.\n         * @type {number}\n         * @public\n         */\n        this.resultAvailableAfter = metadata.result_available_after;\n        /**\n         * The database name where this summary is obtained from.\n         * @type {{name: string}}\n         * @public\n         */\n        this.database = { name: (_c = metadata.db) !== null && _c !== void 0 ? _c : null };\n    }\n    /**\n     * Check if the result summary has a plan\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasPlan = function () {\n        return this.plan instanceof Plan;\n    };\n    /**\n     * Check if the result summary has a profile\n     * @return {boolean}\n     */\n    ResultSummary.prototype.hasProfile = function () {\n        return this.profile instanceof ProfiledPlan;\n    };\n    return ResultSummary;\n}());\n/**\n * Class for execution plan received by prepending Cypher with EXPLAIN.\n * @access public\n */\nvar Plan = /** @class */ (function () {\n    /**\n     * Create a Plan instance\n     * @constructor\n     * @param {Object} plan - Object with plan data\n     */\n    function Plan(plan) {\n        this.operatorType = plan.operatorType;\n        this.identifiers = plan.identifiers;\n        this.arguments = plan.args;\n        this.children = plan.children != null\n            ? plan.children.map(function (child) { return new Plan(child); })\n            : [];\n    }\n    return Plan;\n}());\nexports.Plan = Plan;\n/**\n * Class for execution plan received by prepending Cypher with PROFILE.\n * @access public\n */\nvar ProfiledPlan = /** @class */ (function () {\n    /**\n     * Create a ProfiledPlan instance\n     * @constructor\n     * @param {Object} profile - Object with profile data\n     */\n    function ProfiledPlan(profile) {\n        this.operatorType = profile.operatorType;\n        this.identifiers = profile.identifiers;\n        this.arguments = profile.args;\n        this.dbHits = valueOrDefault('dbHits', profile);\n        this.rows = valueOrDefault('rows', profile);\n        this.pageCacheMisses = valueOrDefault('pageCacheMisses', profile);\n        this.pageCacheHits = valueOrDefault('pageCacheHits', profile);\n        this.pageCacheHitRatio = valueOrDefault('pageCacheHitRatio', profile);\n        this.time = valueOrDefault('time', profile);\n        this.children = profile.children != null\n            ? profile.children.map(function (child) { return new ProfiledPlan(child); })\n            : [];\n    }\n    ProfiledPlan.prototype.hasPageCacheStats = function () {\n        return (this.pageCacheMisses > 0 ||\n            this.pageCacheHits > 0 ||\n            this.pageCacheHitRatio > 0);\n    };\n    return ProfiledPlan;\n}());\nexports.ProfiledPlan = ProfiledPlan;\n/**\n * Stats Query statistics dictionary for a {@link QueryStatistics}\n * @public\n */\nvar Stats = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function Stats() {\n        /**\n         * nodes created\n         * @type {number}\n         * @public\n         */\n        this.nodesCreated = 0;\n        /**\n         * nodes deleted\n         * @type {number}\n         * @public\n         */\n        this.nodesDeleted = 0;\n        /**\n         * relationships created\n         * @type {number}\n         * @public\n         */\n        this.relationshipsCreated = 0;\n        /**\n         * relationships deleted\n         * @type {number}\n         * @public\n         */\n        this.relationshipsDeleted = 0;\n        /**\n         * properties set\n         * @type {number}\n         * @public\n         */\n        this.propertiesSet = 0;\n        /**\n         * labels added\n         * @type {number}\n         * @public\n         */\n        this.labelsAdded = 0;\n        /**\n         * labels removed\n         * @type {number}\n         * @public\n         */\n        this.labelsRemoved = 0;\n        /**\n         * indexes added\n         * @type {number}\n         * @public\n         */\n        this.indexesAdded = 0;\n        /**\n         * indexes removed\n         * @type {number}\n         * @public\n         */\n        this.indexesRemoved = 0;\n        /**\n         * constraints added\n         * @type {number}\n         * @public\n         */\n        this.constraintsAdded = 0;\n        /**\n         * constraints removed\n         * @type {number}\n         * @public\n         */\n        this.constraintsRemoved = 0;\n    }\n    return Stats;\n}());\nexports.Stats = Stats;\n/**\n * Get statistical information for a {@link Result}.\n * @access public\n */\nvar QueryStatistics = /** @class */ (function () {\n    /**\n     * Structurize the statistics\n     * @constructor\n     * @param {Object} statistics - Result statistics\n     */\n    function QueryStatistics(statistics) {\n        var _this = this;\n        this._stats = {\n            nodesCreated: 0,\n            nodesDeleted: 0,\n            relationshipsCreated: 0,\n            relationshipsDeleted: 0,\n            propertiesSet: 0,\n            labelsAdded: 0,\n            labelsRemoved: 0,\n            indexesAdded: 0,\n            indexesRemoved: 0,\n            constraintsAdded: 0,\n            constraintsRemoved: 0\n        };\n        this._systemUpdates = 0;\n        Object.keys(statistics).forEach(function (index) {\n            // To camelCase\n            var camelCaseIndex = index.replace(/(-\\w)/g, function (m) { return m[1].toUpperCase(); });\n            if (camelCaseIndex in _this._stats) {\n                _this._stats[camelCaseIndex] = internal_1.util.toNumber(statistics[index]);\n            }\n            else if (camelCaseIndex === 'systemUpdates') {\n                _this._systemUpdates = internal_1.util.toNumber(statistics[index]);\n            }\n            else if (camelCaseIndex === 'containsSystemUpdates') {\n                _this._containsSystemUpdates = statistics[index];\n            }\n            else if (camelCaseIndex === 'containsUpdates') {\n                _this._containsUpdates = statistics[index];\n            }\n        });\n        this._stats = Object.freeze(this._stats);\n    }\n    /**\n     * Did the database get updated?\n     * @return {boolean}\n     */\n    QueryStatistics.prototype.containsUpdates = function () {\n        var _this = this;\n        return this._containsUpdates !== undefined\n            ? this._containsUpdates\n            : (Object.keys(this._stats).reduce(function (last, current) {\n                return last + _this._stats[current];\n            }, 0) > 0);\n    };\n    /**\n     * Returns the query statistics updates in a dictionary.\n     * @returns {Stats}\n     */\n    QueryStatistics.prototype.updates = function () {\n        return this._stats;\n    };\n    /**\n     * Return true if the system database get updated, otherwise false\n     * @returns {boolean} - If the system database get updated or not.\n     */\n    QueryStatistics.prototype.containsSystemUpdates = function () {\n        return this._containsSystemUpdates !== undefined\n            ? this._containsSystemUpdates\n            : this._systemUpdates > 0;\n    };\n    /**\n     * @returns {number} - Number of system updates\n     */\n    QueryStatistics.prototype.systemUpdates = function () {\n        return this._systemUpdates;\n    };\n    return QueryStatistics;\n}());\nexports.QueryStatistics = QueryStatistics;\n/**\n * Class for exposing server info from a result.\n * @access public\n */\nvar ServerInfo = /** @class */ (function () {\n    /**\n     * Create a ServerInfo instance\n     * @constructor\n     * @param {Object} serverMeta - Object with serverMeta data\n     * @param {Object} connectionInfo - Bolt connection info\n     * @param {number} protocolVersion - Bolt Protocol Version\n     */\n    function ServerInfo(serverMeta, protocolVersion) {\n        if (serverMeta != null) {\n            /**\n             * The server adress\n             * @type {string}\n             * @public\n             */\n            this.address = serverMeta.address;\n            /**\n             * The server user agent string\n             * @type {string}\n             * @public\n             */\n            this.agent = serverMeta.version;\n        }\n        /**\n         * The protocol version used by the connection\n         * @type {number}\n         * @public\n         */\n        this.protocolVersion = protocolVersion;\n    }\n    return ServerInfo;\n}());\nexports.ServerInfo = ServerInfo;\nfunction valueOrDefault(key, values, defaultValue) {\n    if (defaultValue === void 0) { defaultValue = 0; }\n    if (values !== false && key in values) {\n        var value = values[key];\n        return internal_1.util.toNumber(value);\n    }\n    else {\n        return defaultValue;\n    }\n}\n/**\n * The constants for query types\n * @type {{SCHEMA_WRITE: string, WRITE_ONLY: string, READ_ONLY: string, READ_WRITE: string}}\n */\nvar queryType = {\n    READ_ONLY: 'r',\n    READ_WRITE: 'rw',\n    WRITE_ONLY: 'w',\n    SCHEMA_WRITE: 's'\n};\nexports.queryType = queryType;\nexports[\"default\"] = ResultSummary;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/result-summary.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/result-transformers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/result-transformers.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nvar result_eager_1 = __importDefault(__webpack_require__(/*! ./result-eager */ \"(ssr)/./node_modules/neo4j-driver-core/lib/result-eager.js\"));\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\n/**\n * Protocol for transforming {@link Result}.\n *\n * @typedef {function<T>(result:Result):Promise<T>} ResultTransformer\n * @interface\n *\n * @see {@link resultTransformers} for provided implementations.\n * @see {@link Driver#executeQuery} for usage.\n */\n/**\n * Defines the object which holds the common {@link ResultTransformer} used with {@link Driver#executeQuery}.\n */\nvar ResultTransformers = /** @class */ (function () {\n    function ResultTransformers() {\n    }\n    /**\n     * Creates a {@link ResultTransformer} which transforms {@link Result} to {@link EagerResult}\n     * by consuming the whole stream.\n     *\n     * This is the default implementation used in {@link Driver#executeQuery}\n     *\n     * @example\n     * // This:\n     * const { keys, records, summary } = await driver.executeQuery('CREATE (p:Person{ name: $name }) RETURN p', { name: 'Person1'}, {\n     *   resultTransformer: neo4j.resultTransformers.eagerResultTransformer()\n     * })\n     * // is equivalent to:\n     * const { keys, records, summary } = await driver.executeQuery('CREATE (p:Person{ name: $name }) RETURN p', { name: 'Person1'})\n     *\n     * @returns {ResultTransformer<EagerResult<Entries>>} The result transformer\n     * @alias {@link ResultTransformers#eager}\n     */\n    ResultTransformers.prototype.eagerResultTransformer = function () {\n        return createEagerResultFromResult;\n    };\n    /**\n     * Creates a {@link ResultTransformer} which transforms {@link Result} to {@link EagerResult}\n     * by consuming the whole stream.\n     *\n     * This is the default implementation used in {@link Driver#executeQuery} and a alias to\n     * {@link resultTransformers.eagerResultTransformer}\n     *\n     * @example\n     * // This:\n     * const { keys, records, summary } = await driver.executeQuery('CREATE (p:Person{ name: $name }) RETURN p', { name: 'Person1'}, {\n     *   resultTransformer: neo4j.resultTransformers.eager()\n     * })\n     * // is equivalent to:\n     * const { keys, records, summary } = await driver.executeQuery('CREATE (p:Person{ name: $name }) RETURN p', { name: 'Person1'})\n     *\n     * @returns {ResultTransformer<EagerResult<Entries>>} The result transformer\n     * @experimental this is a preview\n     * @since 5.22.0\n     * @alias {@link ResultTransformers#eagerResultTransformer}\n     */\n    ResultTransformers.prototype.eager = function () {\n        return createEagerResultFromResult;\n    };\n    /**\n     * Creates a {@link ResultTransformer} which maps the {@link Record} in the result and collects it\n     * along with the {@link ResultSummary} and {@link Result#keys}.\n     *\n     * NOTE: The config object requires map or/and collect to be valid.\n     *\n     * @example\n     * // Mapping the records\n     * const { keys, records, summary } = await driver.executeQuery('MATCH (p:Person{ age: $age }) RETURN p.name as name', { age: 25 }, {\n     *   resultTransformer: neo4j.resultTransformers.mappedResultTransformer({\n     *     map(record) {\n     *        return record.get('name')\n     *     }\n     *   })\n     * })\n     *\n     * records.forEach(name => console.log(`${name} has 25`))\n     *\n     * @example\n     * // Mapping records and collect result\n     * const names = await driver.executeQuery('MATCH (p:Person{ age: $age }) RETURN p.name as name', { age: 25 }, {\n     *   resultTransformer: neo4j.resultTransformers.mappedResultTransformer({\n     *     map(record) {\n     *        return record.get('name')\n     *     },\n     *     collect(records, summary, keys) {\n     *        return records\n     *     }\n     *   })\n     * })\n     *\n     * names.forEach(name => console.log(`${name} has 25`))\n     *\n     * @example\n     * // The transformer can be defined one and used everywhere\n     * const getRecordsAsObjects = neo4j.resultTransformers.mappedResultTransformer({\n     *   map(record) {\n     *      return record.toObject()\n     *   },\n     *   collect(objects) {\n     *      return objects\n     *   }\n     * })\n     *\n     * // The usage in a driver.executeQuery\n     * const objects = await driver.executeQuery('MATCH (p:Person{ age: $age }) RETURN p.name as name', { age: 25 }, {\n     *   resultTransformer: getRecordsAsObjects\n     * })\n     * objects.forEach(object => console.log(`${object.name} has 25`))\n     *\n     *\n     * // The usage in session.executeRead\n     * const objects = await session.executeRead(tx => getRecordsAsObjects(tx.run('MATCH (p:Person{ age: $age }) RETURN p.name as name')))\n     * objects.forEach(object => console.log(`${object.name} has 25`))\n     *\n     * @param {object} config The result transformer configuration\n     * @param {function(record:Record):R} [config.map=function(record) {  return record }] Method called for mapping each record\n     * @param {function(records:R[], summary:ResultSummary, keys:string[]):T} [config.collect=function(records, summary, keys) { return { records, summary, keys }}] Method called for mapping\n     * the result data to the transformer output.\n     * @returns {ResultTransformer<T>} The result transformer\n     * @see {@link Driver#executeQuery}\n     */\n    ResultTransformers.prototype.mappedResultTransformer = function (config) {\n        return createMappedResultTransformer(config);\n    };\n    /**\n     * Creates a {@link ResultTransformer} which maps the {@link Record} in the result and collects it\n     * along with the {@link ResultSummary} and {@link Result#keys}.\n     *\n     * NOTE: The config object requires map or/and collect to be valid.\n     *\n     * This method is a alias to {@link ResultTransformers#mappedResultTransformer}\n     *\n     *\n     * @example\n     * // Mapping the records\n     * const { keys, records, summary } = await driver.executeQuery('MATCH (p:Person{ age: $age }) RETURN p.name as name', { age: 25 }, {\n     *   resultTransformer: neo4j.resultTransformers.mapped({\n     *     map(record) {\n     *        return record.get('name')\n     *     }\n     *   })\n     * })\n     *\n     * records.forEach(name => console.log(`${name} has 25`))\n     *\n     * @example\n     * // Mapping records and collect result\n     * const names = await driver.executeQuery('MATCH (p:Person{ age: $age }) RETURN p.name as name', { age: 25 }, {\n     *   resultTransformer: neo4j.resultTransformers.mapped({\n     *     map(record) {\n     *        return record.get('name')\n     *     },\n     *     collect(records, summary, keys) {\n     *        return records\n     *     }\n     *   })\n     * })\n     *\n     * names.forEach(name => console.log(`${name} has 25`))\n     *\n     * @example\n     * // The transformer can be defined one and used everywhere\n     * const getRecordsAsObjects = neo4j.resultTransformers.mapped({\n     *   map(record) {\n     *      return record.toObject()\n     *   },\n     *   collect(objects) {\n     *      return objects\n     *   }\n     * })\n     *\n     * // The usage in a driver.executeQuery\n     * const objects = await driver.executeQuery('MATCH (p:Person{ age: $age }) RETURN p.name as name', { age: 25 }, {\n     *   resultTransformer: getRecordsAsObjects\n     * })\n     * objects.forEach(object => console.log(`${object.name} has 25`))\n     *\n     *\n     * // The usage in session.executeRead\n     * const objects = await session.executeRead(tx => getRecordsAsObjects(tx.run('MATCH (p:Person{ age: $age }) RETURN p.name as name')))\n     * objects.forEach(object => console.log(`${object.name} has 25`))\n     *\n     * @param {object} config The result transformer configuration\n     * @param {function(record:Record):R} [config.map=function(record) {  return record }] Method called for mapping each record\n     * @param {function(records:R[], summary:ResultSummary, keys:string[]):T} [config.collect=function(records, summary, keys) { return { records, summary, keys }}] Method called for mapping\n     * the result data to the transformer output.\n     * @returns {ResultTransformer<T>} The result transformer\n     * @experimental This is a preview feature\n     * @alias {@link ResultTransformers#mappedResultTransformer}\n     * @since 5.22.0\n     * @see {@link Driver#executeQuery}\n     */\n    ResultTransformers.prototype.mapped = function (config) {\n        return createMappedResultTransformer(config);\n    };\n    /**\n     * Creates a {@link ResultTransformer} which collects the first record {@link Record} of {@link Result}\n     * and discard the rest of the records, if existent.\n     *\n     * @example\n     * // Using in executeQuery\n     * const maybeFirstRecord = await driver.executeQuery('MATCH (p:Person{ age: $age }) RETURN p.name as name', { age: 25 }, {\n     *   resultTransformer: neo4j.resultTransformers.first()\n     * })\n     *\n     * @example\n     * // Using in other results\n     * const record = await neo4j.resultTransformers.first()(result)\n     *\n     *\n     * @template Entries The shape of the record.\n     * @returns {ResultTransformer<Record<Entries>|undefined>} The result transformer\n     * @see {@link Driver#executeQuery}\n     * @experimental This is a preview feature.\n     * @since 5.22.0\n     */\n    ResultTransformers.prototype.first = function () {\n        return first;\n    };\n    /**\n     * Creates a {@link ResultTransformer} which consumes the result and returns the {@link ResultSummary}.\n     *\n     * This result transformer is a shortcut to `(result) => result.summary()`.\n     *\n     * @example\n     * const summary = await driver.executeQuery('CREATE (p:Person{ name: $name }) RETURN p', { name: 'Person1'}, {\n     *   resultTransformer: neo4j.resultTransformers.summary()\n     * })\n     *\n     * @returns {ResultTransformer<ResultSummary<T>>} The result transformer\n     * @see {@link Driver#executeQuery}\n     * @experimental This is a preview feature\n     */\n    ResultTransformers.prototype.summary = function () {\n        return summary;\n    };\n    return ResultTransformers;\n}());\n/**\n * Holds the common {@link ResultTransformer} used with {@link Driver#executeQuery}.\n */\nvar resultTransformers = new ResultTransformers();\nObject.freeze(resultTransformers);\nexports[\"default\"] = resultTransformers;\nfunction createEagerResultFromResult(result) {\n    return __awaiter(this, void 0, void 0, function () {\n        var _a, summary, records, keys;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0: return [4 /*yield*/, result];\n                case 1:\n                    _a = _b.sent(), summary = _a.summary, records = _a.records;\n                    return [4 /*yield*/, result.keys()];\n                case 2:\n                    keys = _b.sent();\n                    return [2 /*return*/, new result_eager_1.default(keys, records, summary)];\n            }\n        });\n    });\n}\nfunction createMappedResultTransformer(config) {\n    var _this = this;\n    if (config == null || (config.collect == null && config.map == null)) {\n        throw (0, error_1.newError)('Requires a map or/and a collect functions.');\n    }\n    return function (result) { return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {\n                        var state = { records: [], keys: [] };\n                        result.subscribe({\n                            onKeys: function (keys) {\n                                state.keys = keys;\n                            },\n                            onNext: function (record) {\n                                if (config.map != null) {\n                                    var mappedRecord = config.map(record);\n                                    if (mappedRecord !== undefined) {\n                                        state.records.push(mappedRecord);\n                                    }\n                                }\n                                else {\n                                    state.records.push(record);\n                                }\n                            },\n                            onCompleted: function (summary) {\n                                if (config.collect != null) {\n                                    resolve(config.collect(state.records, summary, state.keys));\n                                }\n                                else {\n                                    var obj = { records: state.records, summary: summary, keys: state.keys };\n                                    resolve(obj);\n                                }\n                            },\n                            onError: function (error) {\n                                reject(error);\n                            }\n                        });\n                    })];\n                case 1: return [2 /*return*/, _a.sent()];\n            }\n        });\n    }); };\n}\nfunction first(result) {\n    return __awaiter(this, void 0, void 0, function () {\n        var it, _a, value, done;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    it = result[Symbol.asyncIterator]();\n                    return [4 /*yield*/, it.next()];\n                case 1:\n                    _a = _b.sent(), value = _a.value, done = _a.done;\n                    _b.label = 2;\n                case 2:\n                    _b.trys.push([2, , 3, 6]);\n                    if (done === true) {\n                        return [2 /*return*/, undefined];\n                    }\n                    return [2 /*return*/, value];\n                case 3:\n                    if (!(it.return != null)) return [3 /*break*/, 5];\n                    return [4 /*yield*/, it.return()];\n                case 4:\n                    _b.sent();\n                    _b.label = 5;\n                case 5: return [7 /*endfinally*/];\n                case 6: return [2 /*return*/];\n            }\n        });\n    });\n}\nfunction summary(result) {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0: return [4 /*yield*/, result.summary()];\n                case 1: return [2 /*return*/, _a.sent()];\n            }\n        });\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/result-transformers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/result.js":
/*!******************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/result.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar result_summary_1 = __importDefault(__webpack_require__(/*! ./result-summary */ \"(ssr)/./node_modules/neo4j-driver-core/lib/result-summary.js\"));\nvar internal_1 = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/index.js\");\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar EMPTY_CONNECTION_HOLDER = internal_1.connectionHolder.EMPTY_CONNECTION_HOLDER;\n/**\n * @private\n * @param {Error} error The error\n * @returns {void}\n */\nvar DEFAULT_ON_ERROR = function (error) {\n    // eslint-disable-next-line @typescript-eslint/restrict-plus-operands, @typescript-eslint/no-base-to-string\n    console.log('Uncaught error when processing result: ' + error);\n};\n/**\n * @private\n * @param {ResultSummary} summary\n * @returns {void}\n */\nvar DEFAULT_ON_COMPLETED = function (summary) { };\n/**\n * @private\n * @param {string[]} keys List of keys of the record in the result\n * @return {void}\n */\nvar DEFAULT_ON_KEYS = function (keys) { };\n/**\n * A stream of {@link Record} representing the result of a query.\n * Can be consumed eagerly as {@link Promise} resolved with array of records and {@link ResultSummary}\n * summary, or rejected with error that contains {@link string} code and {@link string} message.\n * Alternatively can be consumed lazily using {@link Result#subscribe} function.\n * @access public\n */\nvar Result = /** @class */ (function () {\n    /**\n     * Inject the observer to be used.\n     * @constructor\n     * @access private\n     * @param {Promise<observer.ResultStreamObserver>} streamObserverPromise\n     * @param {mixed} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in query\n     * @param {ConnectionHolder} connectionHolder - to be notified when result is either fully consumed or error happened.\n     */\n    function Result(streamObserverPromise, query, parameters, connectionHolder, watermarks) {\n        if (watermarks === void 0) { watermarks = { high: Number.MAX_VALUE, low: Number.MAX_VALUE }; }\n        /**\n         * Called when finally the result is done\n         *\n         * *Should not be combined with {@link Result#subscribe} function.*\n         * @param {function()|null} onfinally - function when the promise finished\n         * @return {Promise} promise.\n         */\n        this[_a] = 'Result';\n        this._stack = captureStacktrace();\n        this._streamObserverPromise = streamObserverPromise;\n        this._p = null;\n        this._query = query;\n        this._parameters = parameters !== null && parameters !== void 0 ? parameters : {};\n        this._connectionHolder = connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : EMPTY_CONNECTION_HOLDER;\n        this._keys = null;\n        this._summary = null;\n        this._error = null;\n        this._watermarks = watermarks;\n    }\n    /**\n     * Returns a promise for the field keys.\n     *\n     * *Should not be combined with {@link Result#subscribe} function.*\n     *\n     * @public\n     * @returns {Promise<string[]>} - Field keys, in the order they will appear in records.\n     }\n     */\n    Result.prototype.keys = function () {\n        var _this = this;\n        if (this._keys !== null) {\n            return Promise.resolve(this._keys);\n        }\n        else if (this._error !== null) {\n            return Promise.reject(this._error);\n        }\n        return new Promise(function (resolve, reject) {\n            _this._streamObserverPromise\n                .then(function (observer) {\n                return observer.subscribe(_this._decorateObserver({\n                    onKeys: function (keys) { return resolve(keys); },\n                    onError: function (err) { return reject(err); }\n                }));\n            })\n                .catch(reject);\n        });\n    };\n    /**\n     * Returns a promise for the result summary.\n     *\n     * *Should not be combined with {@link Result#subscribe} function.*\n     *\n     * @public\n     * @returns {Promise<ResultSummary<T>>} - Result summary.\n     *\n     */\n    Result.prototype.summary = function () {\n        var _this = this;\n        if (this._summary !== null) {\n            // This type casting is needed since we are defining the number type of\n            // summary in Result template\n            return Promise.resolve(this._summary);\n        }\n        else if (this._error !== null) {\n            return Promise.reject(this._error);\n        }\n        return new Promise(function (resolve, reject) {\n            _this._streamObserverPromise\n                .then(function (o) {\n                o.cancel();\n                o.subscribe(_this._decorateObserver({\n                    // This type casting is needed since we are defining the number type of\n                    // summary in Result template\n                    onCompleted: function (summary) { return resolve(summary); },\n                    onError: function (err) { return reject(err); }\n                }));\n            })\n                .catch(reject);\n        });\n    };\n    /**\n     * Create and return new Promise\n     *\n     * @private\n     * @return {Promise} new Promise.\n     */\n    Result.prototype._getOrCreatePromise = function () {\n        var _this = this;\n        if (this._p == null) {\n            this._p = new Promise(function (resolve, reject) {\n                var records = [];\n                var observer = {\n                    onNext: function (record) {\n                        records.push(record);\n                    },\n                    onCompleted: function (summary) {\n                        resolve({ records: records, summary: summary });\n                    },\n                    onError: function (error) {\n                        reject(error);\n                    }\n                };\n                _this.subscribe(observer);\n            });\n        }\n        return this._p;\n    };\n    /**\n     * Provides a async iterator over the records in the result.\n     *\n     * *Should not be combined with {@link Result#subscribe} or ${@link Result#then} functions.*\n     *\n     * @public\n     * @returns {PeekableAsyncIterator<Record<R>, ResultSummary>} The async iterator for the Results\n     */\n    Result.prototype[Symbol.asyncIterator] = function () {\n        var _this = this;\n        if (!this.isOpen()) {\n            var error_2 = (0, error_1.newError)('Result is already consumed');\n            return {\n                next: function () { return Promise.reject(error_2); },\n                peek: function () { return Promise.reject(error_2); }\n            };\n        }\n        var state = { paused: true, firstRun: true, finished: false };\n        var controlFlow = function () {\n            var _b, _c;\n            if (state.streaming == null) {\n                return;\n            }\n            var size = (_c = (_b = state.queuedObserver) === null || _b === void 0 ? void 0 : _b.size) !== null && _c !== void 0 ? _c : 0;\n            var queueSizeIsOverHighOrEqualWatermark = size >= _this._watermarks.high;\n            var queueSizeIsBellowOrEqualLowWatermark = size <= _this._watermarks.low;\n            if (queueSizeIsOverHighOrEqualWatermark && !state.paused) {\n                state.paused = true;\n                state.streaming.pause();\n            }\n            else if ((queueSizeIsBellowOrEqualLowWatermark && state.paused) || (state.firstRun && !queueSizeIsOverHighOrEqualWatermark)) {\n                state.firstRun = false;\n                state.paused = false;\n                state.streaming.resume();\n            }\n        };\n        var initializeObserver = function () { return __awaiter(_this, void 0, void 0, function () {\n            var _b;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        if (!(state.queuedObserver === undefined)) return [3 /*break*/, 2];\n                        state.queuedObserver = this._createQueuedResultObserver(controlFlow);\n                        _b = state;\n                        return [4 /*yield*/, this._subscribe(state.queuedObserver, true).catch(function () { return undefined; })];\n                    case 1:\n                        _b.streaming = _c.sent();\n                        controlFlow();\n                        _c.label = 2;\n                    case 2: return [2 /*return*/, state.queuedObserver];\n                }\n            });\n        }); };\n        var assertSummary = function (summary) {\n            if (summary === undefined) {\n                throw (0, error_1.newError)('InvalidState: Result stream finished without Summary', error_1.PROTOCOL_ERROR);\n            }\n            return true;\n        };\n        return {\n            next: function () { return __awaiter(_this, void 0, void 0, function () {\n                var queuedObserver, next;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            if (state.finished) {\n                                if (assertSummary(state.summary)) {\n                                    return [2 /*return*/, { done: true, value: state.summary }];\n                                }\n                            }\n                            return [4 /*yield*/, initializeObserver()];\n                        case 1:\n                            queuedObserver = _b.sent();\n                            return [4 /*yield*/, queuedObserver.dequeue()];\n                        case 2:\n                            next = _b.sent();\n                            if (next.done === true) {\n                                state.finished = next.done;\n                                state.summary = next.value;\n                            }\n                            return [2 /*return*/, next];\n                    }\n                });\n            }); },\n            return: function (value) { return __awaiter(_this, void 0, void 0, function () {\n                var queuedObserver, last;\n                var _b;\n                return __generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            if (state.finished) {\n                                if (assertSummary(state.summary)) {\n                                    return [2 /*return*/, { done: true, value: value !== null && value !== void 0 ? value : state.summary }];\n                                }\n                            }\n                            (_b = state.streaming) === null || _b === void 0 ? void 0 : _b.cancel();\n                            return [4 /*yield*/, initializeObserver()];\n                        case 1:\n                            queuedObserver = _c.sent();\n                            return [4 /*yield*/, queuedObserver.dequeueUntilDone()];\n                        case 2:\n                            last = _c.sent();\n                            state.finished = true;\n                            last.value = value !== null && value !== void 0 ? value : last.value;\n                            state.summary = last.value;\n                            return [2 /*return*/, last];\n                    }\n                });\n            }); },\n            peek: function () { return __awaiter(_this, void 0, void 0, function () {\n                var queuedObserver;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            if (state.finished) {\n                                if (assertSummary(state.summary)) {\n                                    return [2 /*return*/, { done: true, value: state.summary }];\n                                }\n                            }\n                            return [4 /*yield*/, initializeObserver()];\n                        case 1:\n                            queuedObserver = _b.sent();\n                            return [4 /*yield*/, queuedObserver.head()];\n                        case 2: return [2 /*return*/, _b.sent()];\n                    }\n                });\n            }); }\n        };\n    };\n    /**\n     * Waits for all results and calls the passed in function with the results.\n     *\n     * *Should not be combined with {@link Result#subscribe} function.*\n     *\n     * @param {function(result: {records:Array<Record>, summary: ResultSummary})} onFulfilled - function to be called\n     * when finished.\n     * @param {function(error: {message:string, code:string})} onRejected - function to be called upon errors.\n     * @return {Promise} promise.\n     */\n    Result.prototype.then = function (onFulfilled, onRejected) {\n        return this._getOrCreatePromise().then(onFulfilled, onRejected);\n    };\n    /**\n     * Catch errors when using promises.\n     *\n     * *Should not be combined with {@link Result#subscribe} function.*\n     *\n     * @param {function(error: Neo4jError)} onRejected - Function to be called upon errors.\n     * @return {Promise} promise.\n     */\n    Result.prototype.catch = function (onRejected) {\n        return this._getOrCreatePromise().catch(onRejected);\n    };\n    Result.prototype.finally = function (onfinally) {\n        return this._getOrCreatePromise().finally(onfinally);\n    };\n    /**\n     * Stream records to observer as they come in, this is a more efficient method\n     * of handling the results, and allows you to handle arbitrarily large results.\n     *\n     * @param {Object} observer - Observer object\n     * @param {function(keys: string[])} observer.onKeys - handle stream head, the field keys.\n     * @param {function(record: Record)} observer.onNext - handle records, one by one.\n     * @param {function(summary: ResultSummary)} observer.onCompleted - handle stream tail, the result summary.\n     * @param {function(error: {message:string, code:string})} observer.onError - handle errors.\n     * @return {void}\n     */\n    Result.prototype.subscribe = function (observer) {\n        this._subscribe(observer)\n            .catch(function () { });\n    };\n    /**\n     * Check if this result is active, i.e., neither a summary nor an error has been received by the result.\n     * @return {boolean} `true` when neither a summary or nor an error has been received by the result.\n     */\n    Result.prototype.isOpen = function () {\n        return this._summary === null && this._error === null;\n    };\n    /**\n     * Stream records to observer as they come in, this is a more efficient method\n     * of handling the results, and allows you to handle arbitrarily large results.\n     *\n     * @access private\n     * @param {ResultObserver} observer The observer to send records to.\n     * @param {boolean} paused The flag to indicate if the stream should be started paused\n     * @returns {Promise<observer.ResultStreamObserver>} The result stream observer.\n     */\n    Result.prototype._subscribe = function (observer, paused) {\n        if (paused === void 0) { paused = false; }\n        var _observer = this._decorateObserver(observer);\n        return this._streamObserverPromise\n            .then(function (o) {\n            if (paused) {\n                o.pause();\n            }\n            o.subscribe(_observer);\n            return o;\n        })\n            .catch(function (error) {\n            if (_observer.onError != null) {\n                _observer.onError(error);\n            }\n            return Promise.reject(error);\n        });\n    };\n    /**\n     * Decorates the ResultObserver with the necessary methods.\n     *\n     * @access private\n     * @param {ResultObserver} observer The ResultObserver to decorate.\n     * @returns The decorated result observer\n     */\n    Result.prototype._decorateObserver = function (observer) {\n        var _this = this;\n        var _b, _c, _d;\n        var onCompletedOriginal = (_b = observer.onCompleted) !== null && _b !== void 0 ? _b : DEFAULT_ON_COMPLETED;\n        var onErrorOriginal = (_c = observer.onError) !== null && _c !== void 0 ? _c : DEFAULT_ON_ERROR;\n        var onKeysOriginal = (_d = observer.onKeys) !== null && _d !== void 0 ? _d : DEFAULT_ON_KEYS;\n        var onCompletedWrapper = function (metadata) {\n            _this._releaseConnectionAndGetSummary(metadata).then(function (summary) {\n                if (_this._summary !== null) {\n                    return onCompletedOriginal.call(observer, _this._summary);\n                }\n                _this._summary = summary;\n                return onCompletedOriginal.call(observer, summary);\n            }).catch(onErrorOriginal);\n        };\n        var onErrorWrapper = function (error) {\n            // notify connection holder that the used connection is not needed any more because error happened\n            // and result can't bee consumed any further; call the original onError callback after that\n            _this._connectionHolder.releaseConnection().then(function () {\n                replaceStacktrace(error, _this._stack);\n                _this._error = error;\n                onErrorOriginal.call(observer, error);\n            }).catch(onErrorOriginal);\n        };\n        var onKeysWrapper = function (keys) {\n            _this._keys = keys;\n            return onKeysOriginal.call(observer, keys);\n        };\n        return {\n            onNext: (observer.onNext != null) ? observer.onNext.bind(observer) : undefined,\n            onKeys: onKeysWrapper,\n            onCompleted: onCompletedWrapper,\n            onError: onErrorWrapper\n        };\n    };\n    /**\n     * Signals the stream observer that the future records should be discarded on the server.\n     *\n     * @protected\n     * @since 4.0.0\n     * @returns {void}\n     */\n    Result.prototype._cancel = function () {\n        if (this._summary === null && this._error === null) {\n            this._streamObserverPromise.then(function (o) { return o.cancel(); })\n                .catch(function () { });\n        }\n    };\n    /**\n     * @access private\n     * @param metadata\n     * @returns\n     */\n    Result.prototype._releaseConnectionAndGetSummary = function (metadata) {\n        var _b = internal_1.util.validateQueryAndParameters(this._query, this._parameters, {\n            skipAsserts: true\n        }), query = _b.validatedQuery, parameters = _b.params;\n        var connectionHolder = this._connectionHolder;\n        return connectionHolder\n            .getConnection()\n            .then(\n        // onFulfilled:\n        function (connection) {\n            return connectionHolder\n                .releaseConnection()\n                .then(function () {\n                return connection === null || connection === void 0 ? void 0 : connection.getProtocolVersion();\n            });\n        }, \n        // onRejected:\n        function (_) { return undefined; })\n            .then(function (protocolVersion) {\n            return new result_summary_1.default(query, parameters, metadata, protocolVersion);\n        });\n    };\n    /**\n     * @access private\n     */\n    Result.prototype._createQueuedResultObserver = function (onQueueSizeChanged) {\n        var _this = this;\n        function createResolvablePromise() {\n            var resolvablePromise = {};\n            resolvablePromise.promise = new Promise(function (resolve, reject) {\n                resolvablePromise.resolve = resolve;\n                resolvablePromise.reject = reject;\n            });\n            return resolvablePromise;\n        }\n        function isError(elementOrError) {\n            return elementOrError instanceof Error;\n        }\n        function dequeue() {\n            var _b;\n            return __awaiter(this, void 0, void 0, function () {\n                var element;\n                return __generator(this, function (_c) {\n                    switch (_c.label) {\n                        case 0:\n                            if (buffer.length > 0) {\n                                element = (_b = buffer.shift()) !== null && _b !== void 0 ? _b : (0, error_1.newError)('Unexpected empty buffer', error_1.PROTOCOL_ERROR);\n                                onQueueSizeChanged();\n                                if (isError(element)) {\n                                    throw element;\n                                }\n                                return [2 /*return*/, element];\n                            }\n                            promiseHolder.resolvable = createResolvablePromise();\n                            return [4 /*yield*/, promiseHolder.resolvable.promise];\n                        case 1: return [2 /*return*/, _c.sent()];\n                    }\n                });\n            });\n        }\n        var buffer = [];\n        var promiseHolder = { resolvable: null };\n        var observer = {\n            onNext: function (record) {\n                observer._push({ done: false, value: record });\n            },\n            onCompleted: function (summary) {\n                observer._push({ done: true, value: summary });\n            },\n            onError: function (error) {\n                observer._push(error);\n            },\n            _push: function (element) {\n                if (promiseHolder.resolvable !== null) {\n                    var resolvable = promiseHolder.resolvable;\n                    promiseHolder.resolvable = null;\n                    if (isError(element)) {\n                        resolvable.reject(element);\n                    }\n                    else {\n                        resolvable.resolve(element);\n                    }\n                }\n                else {\n                    buffer.push(element);\n                    onQueueSizeChanged();\n                }\n            },\n            dequeue: dequeue,\n            dequeueUntilDone: function () { return __awaiter(_this, void 0, void 0, function () {\n                var element;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            if (false) {}\n                            return [4 /*yield*/, dequeue()];\n                        case 1:\n                            element = _b.sent();\n                            if (element.done === true) {\n                                return [2 /*return*/, element];\n                            }\n                            return [3 /*break*/, 0];\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            }); },\n            head: function () { return __awaiter(_this, void 0, void 0, function () {\n                var element, element, error_3;\n                return __generator(this, function (_b) {\n                    switch (_b.label) {\n                        case 0:\n                            if (buffer.length > 0) {\n                                element = buffer[0];\n                                if (isError(element)) {\n                                    throw element;\n                                }\n                                return [2 /*return*/, element];\n                            }\n                            promiseHolder.resolvable = createResolvablePromise();\n                            _b.label = 1;\n                        case 1:\n                            _b.trys.push([1, 3, 4, 5]);\n                            return [4 /*yield*/, promiseHolder.resolvable.promise];\n                        case 2:\n                            element = _b.sent();\n                            buffer.unshift(element);\n                            return [2 /*return*/, element];\n                        case 3:\n                            error_3 = _b.sent();\n                            buffer.unshift(error_3);\n                            throw error_3;\n                        case 4:\n                            onQueueSizeChanged();\n                            return [7 /*endfinally*/];\n                        case 5: return [2 /*return*/];\n                    }\n                });\n            }); },\n            get size() {\n                return buffer.length;\n            }\n        };\n        return observer;\n    };\n    return Result;\n}());\n_a = Symbol.toStringTag;\nfunction captureStacktrace() {\n    var error = new Error('');\n    if (error.stack != null) {\n        return error.stack.replace(/^Error(\\n\\r)*/, ''); // we don't need the 'Error\\n' part, if only it exists\n    }\n    return null;\n}\n/**\n * @private\n * @param {Error} error The error\n * @param {string| null} newStack The newStack\n * @returns {void}\n */\nfunction replaceStacktrace(error, newStack) {\n    if (newStack != null) {\n        // Error.prototype.toString() concatenates error.name and error.message nicely\n        // then we add the rest of the stack trace\n        // eslint-disable-next-line @typescript-eslint/no-base-to-string\n        error.stack = error.toString() + '\\n' + newStack;\n    }\n}\nexports[\"default\"] = Result;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/result.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/session.js":
/*!*******************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/session.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar observers_1 = __webpack_require__(/*! ./internal/observers */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/observers.js\");\nvar util_1 = __webpack_require__(/*! ./internal/util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\");\nvar constants_1 = __webpack_require__(/*! ./internal/constants */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/constants.js\");\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar result_1 = __importDefault(__webpack_require__(/*! ./result */ \"(ssr)/./node_modules/neo4j-driver-core/lib/result.js\"));\nvar connection_holder_1 = __webpack_require__(/*! ./internal/connection-holder */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/connection-holder.js\");\nvar transaction_executor_1 = __webpack_require__(/*! ./internal/transaction-executor */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/transaction-executor.js\");\nvar bookmarks_1 = __webpack_require__(/*! ./internal/bookmarks */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/bookmarks.js\");\nvar tx_config_1 = __webpack_require__(/*! ./internal/tx-config */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/tx-config.js\");\nvar transaction_promise_1 = __importDefault(__webpack_require__(/*! ./transaction-promise */ \"(ssr)/./node_modules/neo4j-driver-core/lib/transaction-promise.js\"));\nvar transaction_managed_1 = __importDefault(__webpack_require__(/*! ./transaction-managed */ \"(ssr)/./node_modules/neo4j-driver-core/lib/transaction-managed.js\"));\n/**\n * A Session instance is used for handling the connection and\n * sending queries through the connection.\n * In a single session, multiple queries will be executed serially.\n * In order to execute parallel queries, multiple sessions are required.\n * @access public\n */\nvar Session = /** @class */ (function () {\n    /**\n     * @constructor\n     * @protected\n     * @param {Object} args\n     * @param {string} args.mode the default access mode for this session.\n     * @param {ConnectionProvider} args.connectionProvider - The connection provider to acquire connections from.\n     * @param {Bookmarks} args.bookmarks - The initial bookmarks for this session.\n     * @param {string} args.database the database name\n     * @param {Object} args.config={} - This driver configuration.\n     * @param {boolean} args.reactive - Whether this session should create reactive streams\n     * @param {number} args.fetchSize - Defines how many records is pulled in each pulling batch\n     * @param {string} args.impersonatedUser - The username which the user wants to impersonate for the duration of the session.\n     * @param {AuthToken} args.auth - the target auth for the to-be-acquired connection\n     * @param {NotificationFilter} args.notificationFilter - The notification filter used for this session.\n     */\n    function Session(_a) {\n        var mode = _a.mode, connectionProvider = _a.connectionProvider, bookmarks = _a.bookmarks, database = _a.database, config = _a.config, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser, bookmarkManager = _a.bookmarkManager, notificationFilter = _a.notificationFilter, auth = _a.auth, log = _a.log;\n        this._mode = mode;\n        this._database = database;\n        this._reactive = reactive;\n        this._fetchSize = fetchSize;\n        this._onDatabaseNameResolved = this._onDatabaseNameResolved.bind(this);\n        this._getConnectionAcquistionBookmarks = this._getConnectionAcquistionBookmarks.bind(this);\n        this._readConnectionHolder = new connection_holder_1.ConnectionHolder({\n            mode: constants_1.ACCESS_MODE_READ,\n            auth: auth,\n            database: database,\n            bookmarks: bookmarks,\n            connectionProvider: connectionProvider,\n            impersonatedUser: impersonatedUser,\n            onDatabaseNameResolved: this._onDatabaseNameResolved,\n            getConnectionAcquistionBookmarks: this._getConnectionAcquistionBookmarks,\n            log: log\n        });\n        this._writeConnectionHolder = new connection_holder_1.ConnectionHolder({\n            mode: constants_1.ACCESS_MODE_WRITE,\n            auth: auth,\n            database: database,\n            bookmarks: bookmarks,\n            connectionProvider: connectionProvider,\n            impersonatedUser: impersonatedUser,\n            onDatabaseNameResolved: this._onDatabaseNameResolved,\n            getConnectionAcquistionBookmarks: this._getConnectionAcquistionBookmarks,\n            log: log\n        });\n        this._open = true;\n        this._hasTx = false;\n        this._impersonatedUser = impersonatedUser;\n        this._lastBookmarks = bookmarks !== null && bookmarks !== void 0 ? bookmarks : bookmarks_1.Bookmarks.empty();\n        this._configuredBookmarks = this._lastBookmarks;\n        this._transactionExecutor = _createTransactionExecutor(config);\n        this._databaseNameResolved = this._database !== '';\n        var calculatedWatermaks = this._calculateWatermaks();\n        this._lowRecordWatermark = calculatedWatermaks.low;\n        this._highRecordWatermark = calculatedWatermaks.high;\n        this._results = [];\n        this._bookmarkManager = bookmarkManager;\n        this._notificationFilter = notificationFilter;\n        this._log = log;\n    }\n    /**\n     * Run Cypher query\n     * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n     * or with the query and parameters as separate arguments.\n     *\n     * @public\n     * @param {mixed} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in query\n     * @param {TransactionConfig} [transactionConfig] - Configuration for the new auto-commit transaction.\n     * @return {Result} New Result.\n     */\n    Session.prototype.run = function (query, parameters, transactionConfig) {\n        var _this = this;\n        var _a = (0, util_1.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;\n        var autoCommitTxConfig = (transactionConfig != null)\n            ? new tx_config_1.TxConfig(transactionConfig, this._log)\n            : tx_config_1.TxConfig.empty();\n        var result = this._run(validatedQuery, params, function (connection) { return __awaiter(_this, void 0, void 0, function () {\n            var bookmarks;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this._bookmarks()];\n                    case 1:\n                        bookmarks = _a.sent();\n                        this._assertSessionIsOpen();\n                        return [2 /*return*/, connection.run(validatedQuery, params, {\n                                bookmarks: bookmarks,\n                                txConfig: autoCommitTxConfig,\n                                mode: this._mode,\n                                database: this._database,\n                                apiTelemetryConfig: {\n                                    api: constants_1.TELEMETRY_APIS.AUTO_COMMIT_TRANSACTION\n                                },\n                                impersonatedUser: this._impersonatedUser,\n                                afterComplete: function (meta) { return _this._onCompleteCallback(meta, bookmarks); },\n                                reactive: this._reactive,\n                                fetchSize: this._fetchSize,\n                                lowRecordWatermark: this._lowRecordWatermark,\n                                highRecordWatermark: this._highRecordWatermark,\n                                notificationFilter: this._notificationFilter\n                            })];\n                }\n            });\n        }); });\n        this._results.push(result);\n        return result;\n    };\n    Session.prototype._run = function (query, parameters, customRunner) {\n        var _a = this._acquireAndConsumeConnection(customRunner), connectionHolder = _a.connectionHolder, resultPromise = _a.resultPromise;\n        var observerPromise = resultPromise.catch(function (error) { return Promise.resolve(new observers_1.FailedObserver({ error: error })); });\n        var watermarks = { high: this._highRecordWatermark, low: this._lowRecordWatermark };\n        return new result_1.default(observerPromise, query, parameters, connectionHolder, watermarks);\n    };\n    /**\n     * This method is used by Rediscovery on the neo4j-driver-bolt-protocol package.\n     *\n     * @private\n     * @param {function()} connectionConsumer The method which will use the connection\n     * @returns {Promise<T>} A connection promise\n     */\n    Session.prototype._acquireConnection = function (connectionConsumer) {\n        var _this = this;\n        var _a = this._acquireAndConsumeConnection(connectionConsumer), connectionHolder = _a.connectionHolder, resultPromise = _a.resultPromise;\n        return resultPromise.then(function (result) { return __awaiter(_this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, connectionHolder.releaseConnection()];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        }); });\n    };\n    /**\n     * Acquires a {@link Connection}, consume it and return a promise of the result along with\n     * the {@link ConnectionHolder} used in the process.\n     *\n     * @private\n     * @param connectionConsumer\n     * @returns {object} The connection holder and connection promise.\n     */\n    Session.prototype._acquireAndConsumeConnection = function (connectionConsumer) {\n        var resultPromise;\n        var connectionHolder = this._connectionHolderWithMode(this._mode);\n        if (!this._open) {\n            resultPromise = Promise.reject((0, error_1.newError)('Cannot run query in a closed session.'));\n        }\n        else if (!this._hasTx && connectionHolder.initializeConnection()) {\n            resultPromise = connectionHolder\n                .getConnection()\n                // Connection won't be null at this point since the initialize method\n                // return\n                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n                .then(function (connection) { return connectionConsumer(connection); });\n        }\n        else {\n            resultPromise = Promise.reject((0, error_1.newError)('Queries cannot be run directly on a ' +\n                'session with an open transaction; either run from within the ' +\n                'transaction or use a different session.'));\n        }\n        return { connectionHolder: connectionHolder, resultPromise: resultPromise };\n    };\n    /**\n     * Begin a new transaction in this session. A session can have at most one transaction running at a time, if you\n     * want to run multiple concurrent transactions, you should use multiple concurrent sessions.\n     *\n     * While a transaction is open the session cannot be used to run queries outside the transaction.\n     *\n     * @param {TransactionConfig} [transactionConfig] - Configuration for the new auto-commit transaction.\n     * @returns {TransactionPromise} New Transaction.\n     */\n    Session.prototype.beginTransaction = function (transactionConfig) {\n        // this function needs to support bookmarks parameter for backwards compatibility\n        // parameter was of type {string|string[]} and represented either a single or multiple bookmarks\n        // that's why we need to check parameter type and decide how to interpret the value\n        var arg = transactionConfig;\n        var txConfig = tx_config_1.TxConfig.empty();\n        if (arg != null) {\n            txConfig = new tx_config_1.TxConfig(arg, this._log);\n        }\n        return this._beginTransaction(this._mode, txConfig, { api: constants_1.TELEMETRY_APIS.UNMANAGED_TRANSACTION });\n    };\n    Session.prototype._beginTransaction = function (accessMode, txConfig, apiTelemetryConfig) {\n        var _this = this;\n        if (!this._open) {\n            throw (0, error_1.newError)('Cannot begin a transaction on a closed session.');\n        }\n        if (this._hasTx) {\n            throw (0, error_1.newError)('You cannot begin a transaction on a session with an open transaction; ' +\n                'either run from within the transaction or use a different session.');\n        }\n        var mode = Session._validateSessionMode(accessMode);\n        var connectionHolder = this._connectionHolderWithMode(mode);\n        connectionHolder.initializeConnection();\n        this._hasTx = true;\n        var tx = new transaction_promise_1.default({\n            connectionHolder: connectionHolder,\n            impersonatedUser: this._impersonatedUser,\n            onClose: this._transactionClosed.bind(this),\n            onBookmarks: function (newBm, oldBm, db) { return _this._updateBookmarks(newBm, oldBm, db); },\n            onConnection: this._assertSessionIsOpen.bind(this),\n            reactive: this._reactive,\n            fetchSize: this._fetchSize,\n            lowRecordWatermark: this._lowRecordWatermark,\n            highRecordWatermark: this._highRecordWatermark,\n            notificationFilter: this._notificationFilter,\n            apiTelemetryConfig: apiTelemetryConfig\n        });\n        tx._begin(function () { return _this._bookmarks(); }, txConfig);\n        return tx;\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Session.prototype._assertSessionIsOpen = function () {\n        if (!this._open) {\n            throw (0, error_1.newError)('You cannot run more transactions on a closed session.');\n        }\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Session.prototype._transactionClosed = function () {\n        this._hasTx = false;\n    };\n    /**\n     * Return the bookmarks received following the last completed {@link Transaction}.\n     *\n     * @deprecated This method will be removed in version 6.0. Please, use Session#lastBookmarks instead.\n     *\n     * @return {string[]} A reference to a previous transaction.\n     * @see {@link Session#lastBookmarks}\n     */\n    Session.prototype.lastBookmark = function () {\n        return this.lastBookmarks();\n    };\n    /**\n     * Return the bookmarks received following the last completed {@link Transaction}.\n     *\n     * @return {string[]} A reference to a previous transaction.\n     */\n    Session.prototype.lastBookmarks = function () {\n        return this._lastBookmarks.values();\n    };\n    Session.prototype._bookmarks = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var bookmarks;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, ((_a = this._bookmarkManager) === null || _a === void 0 ? void 0 : _a.getBookmarks())];\n                    case 1:\n                        bookmarks = _b.sent();\n                        if (bookmarks === undefined) {\n                            return [2 /*return*/, this._lastBookmarks];\n                        }\n                        return [2 /*return*/, new bookmarks_1.Bookmarks(__spreadArray(__spreadArray([], __read(bookmarks), false), __read(this._configuredBookmarks), false))];\n                }\n            });\n        });\n    };\n    /**\n     * Execute given unit of work in a {@link READ} transaction.\n     *\n     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.\n     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial\n     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's\n     * `maxTransactionRetryTime` property in milliseconds.\n     *\n     * @deprecated This method will be removed in version 6.0. Please, use Session#executeRead instead.\n     *\n     * @param {function(tx: Transaction): Promise} transactionWork - Callback that executes operations against\n     * a given {@link Transaction}.\n     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.\n     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given\n     * function or commit fails.\n     * @see {@link Session#executeRead}\n     */\n    Session.prototype.readTransaction = function (transactionWork, transactionConfig) {\n        var config = new tx_config_1.TxConfig(transactionConfig, this._log);\n        return this._runTransaction(constants_1.ACCESS_MODE_READ, config, transactionWork);\n    };\n    /**\n     * Execute given unit of work in a {@link WRITE} transaction.\n     *\n     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.\n     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial\n     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's\n     * `maxTransactionRetryTime` property in milliseconds.\n     *\n     * @deprecated This method will be removed in version 6.0. Please, use Session#executeWrite instead.\n     *\n     * @param {function(tx: Transaction): Promise} transactionWork - Callback that executes operations against\n     * a given {@link Transaction}.\n     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.\n     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given\n     * function or commit fails.\n     * @see {@link Session#executeWrite}\n     */\n    Session.prototype.writeTransaction = function (transactionWork, transactionConfig) {\n        var config = new tx_config_1.TxConfig(transactionConfig, this._log);\n        return this._runTransaction(constants_1.ACCESS_MODE_WRITE, config, transactionWork);\n    };\n    Session.prototype._runTransaction = function (accessMode, transactionConfig, transactionWork) {\n        var _this = this;\n        return this._transactionExecutor.execute(function (apiTelemetryConfig) { return _this._beginTransaction(accessMode, transactionConfig, apiTelemetryConfig); }, transactionWork);\n    };\n    /**\n     * Execute given unit of work in a {@link READ} transaction.\n     *\n     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.\n     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial\n     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's\n     * `maxTransactionRetryTime` property in milliseconds.\n     *\n     * @param {function(tx: ManagedTransaction): Promise} transactionWork - Callback that executes operations against\n     * a given {@link Transaction}.\n     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.\n     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given\n     * function or commit fails.\n     */\n    Session.prototype.executeRead = function (transactionWork, transactionConfig) {\n        var config = new tx_config_1.TxConfig(transactionConfig, this._log);\n        return this._executeInTransaction(constants_1.ACCESS_MODE_READ, config, transactionWork);\n    };\n    /**\n     * Execute given unit of work in a {@link WRITE} transaction.\n     *\n     * Transaction will automatically be committed unless the given function throws or returns a rejected promise.\n     * Some failures of the given function or the commit itself will be retried with exponential backoff with initial\n     * delay of 1 second and maximum retry time of 30 seconds. Maximum retry time is configurable via driver config's\n     * `maxTransactionRetryTime` property in milliseconds.\n     *\n     * @param {function(tx: ManagedTransaction): Promise} transactionWork - Callback that executes operations against\n     * a given {@link Transaction}.\n     * @param {TransactionConfig} [transactionConfig] - Configuration for all transactions started to execute the unit of work.\n     * @return {Promise} Resolved promise as returned by the given function or rejected promise when given\n     * function or commit fails.\n     */\n    Session.prototype.executeWrite = function (transactionWork, transactionConfig) {\n        var config = new tx_config_1.TxConfig(transactionConfig, this._log);\n        return this._executeInTransaction(constants_1.ACCESS_MODE_WRITE, config, transactionWork);\n    };\n    /**\n     * @private\n     * @param {SessionMode} accessMode\n     * @param {TxConfig} transactionConfig\n     * @param {ManagedTransactionWork} transactionWork\n     * @returns {Promise}\n     */\n    Session.prototype._executeInTransaction = function (accessMode, transactionConfig, transactionWork) {\n        var _this = this;\n        return this._transactionExecutor.execute(function (apiTelemetryConfig) { return _this._beginTransaction(accessMode, transactionConfig, apiTelemetryConfig); }, transactionWork, transaction_managed_1.default.fromTransaction);\n    };\n    /**\n     * Sets the resolved database name in the session context.\n     * @private\n     * @param {string|undefined} database The resolved database name\n     * @returns {void}\n     */\n    Session.prototype._onDatabaseNameResolved = function (database) {\n        if (!this._databaseNameResolved) {\n            var normalizedDatabase = database !== null && database !== void 0 ? database : '';\n            this._database = normalizedDatabase;\n            this._readConnectionHolder.setDatabase(normalizedDatabase);\n            this._writeConnectionHolder.setDatabase(normalizedDatabase);\n            this._databaseNameResolved = true;\n        }\n    };\n    Session.prototype._getConnectionAcquistionBookmarks = function () {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var bookmarks;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, ((_a = this._bookmarkManager) === null || _a === void 0 ? void 0 : _a.getBookmarks())];\n                    case 1:\n                        bookmarks = _b.sent();\n                        if (bookmarks === undefined) {\n                            return [2 /*return*/, this._lastBookmarks];\n                        }\n                        return [2 /*return*/, new bookmarks_1.Bookmarks(__spreadArray(__spreadArray([], __read(this._configuredBookmarks), false), __read(bookmarks), false))];\n                }\n            });\n        });\n    };\n    /**\n     * Update value of the last bookmarks.\n     * @private\n     * @param {Bookmarks} newBookmarks - The new bookmarks.\n     * @returns {void}\n     */\n    Session.prototype._updateBookmarks = function (newBookmarks, previousBookmarks, database) {\n        var _a, _b, _c;\n        if ((newBookmarks != null) && !newBookmarks.isEmpty()) {\n            (_a = this._bookmarkManager) === null || _a === void 0 ? void 0 : _a.updateBookmarks((_b = previousBookmarks === null || previousBookmarks === void 0 ? void 0 : previousBookmarks.values()) !== null && _b !== void 0 ? _b : [], (_c = newBookmarks === null || newBookmarks === void 0 ? void 0 : newBookmarks.values()) !== null && _c !== void 0 ? _c : []).catch(function () { });\n            this._lastBookmarks = newBookmarks;\n            this._configuredBookmarks = bookmarks_1.Bookmarks.empty();\n        }\n    };\n    /**\n     * Close this session.\n     * @return {Promise}\n     */\n    Session.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._open) return [3 /*break*/, 3];\n                        this._open = false;\n                        this._results.forEach(function (result) { return result._cancel(); });\n                        this._transactionExecutor.close();\n                        return [4 /*yield*/, this._readConnectionHolder.close(this._hasTx)];\n                    case 1:\n                        _a.sent();\n                        return [4 /*yield*/, this._writeConnectionHolder.close(this._hasTx)];\n                    case 2:\n                        _a.sent();\n                        _a.label = 3;\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // eslint-disable-next-line\n    // @ts-ignore\n    Session.prototype[Symbol.asyncDispose] = function () {\n        return this.close();\n    };\n    Session.prototype._connectionHolderWithMode = function (mode) {\n        if (mode === constants_1.ACCESS_MODE_READ) {\n            return this._readConnectionHolder;\n        }\n        else if (mode === constants_1.ACCESS_MODE_WRITE) {\n            return this._writeConnectionHolder;\n        }\n        else {\n            throw (0, error_1.newError)('Unknown access mode: ' + mode);\n        }\n    };\n    /**\n     * @private\n     * @param {Object} meta Connection metadatada\n     * @returns {void}\n     */\n    Session.prototype._onCompleteCallback = function (meta, previousBookmarks) {\n        this._updateBookmarks(new bookmarks_1.Bookmarks(meta.bookmark), previousBookmarks, meta.db);\n    };\n    /**\n     * @private\n     * @returns {void}\n     */\n    Session.prototype._calculateWatermaks = function () {\n        if (this._fetchSize === constants_1.FETCH_ALL) {\n            return {\n                low: Number.MAX_VALUE,\n                high: Number.MAX_VALUE // we shall never reach this number to disable auto pull\n            };\n        }\n        return {\n            low: 0.3 * this._fetchSize,\n            high: 0.7 * this._fetchSize\n        };\n    };\n    /**\n     * Configure the transaction executor\n     *\n     * This used by {@link Driver#executeQuery}\n     * @private\n     * @returns {void}\n     */\n    Session.prototype._configureTransactionExecutor = function (pipelined, telemetryApi) {\n        this._transactionExecutor.pipelineBegin = pipelined;\n        this._transactionExecutor.telemetryApi = telemetryApi;\n    };\n    /**\n     * @protected\n     */\n    Session._validateSessionMode = function (rawMode) {\n        var mode = rawMode !== null && rawMode !== void 0 ? rawMode : constants_1.ACCESS_MODE_WRITE;\n        if (mode !== constants_1.ACCESS_MODE_READ && mode !== constants_1.ACCESS_MODE_WRITE) {\n            throw (0, error_1.newError)('Illegal session mode ' + mode);\n        }\n        return mode;\n    };\n    return Session;\n}());\n/**\n * @private\n * @param {object} config\n * @returns {TransactionExecutor} The transaction executor\n */\nfunction _createTransactionExecutor(config) {\n    var _a;\n    var maxRetryTimeMs = (_a = config === null || config === void 0 ? void 0 : config.maxTransactionRetryTime) !== null && _a !== void 0 ? _a : null;\n    return new transaction_executor_1.TransactionExecutor(maxRetryTimeMs);\n}\nexports[\"default\"] = Session;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/session.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/spatial-types.js":
/*!*************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/spatial-types.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isPoint = exports.Point = void 0;\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar util_1 = __webpack_require__(/*! ./internal/util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\");\nvar POINT_IDENTIFIER_PROPERTY = '__isPoint__';\n/**\n * Represents a single two or three-dimensional point in a particular coordinate reference system.\n * Created `Point` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Point = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {T} srid - The coordinate reference system identifier.\n     * @param {number} x - The `x` coordinate of the point.\n     * @param {number} y - The `y` coordinate of the point.\n     * @param {number} [z=undefined] - The `z` coordinate of the point or `undefined` if point has 2 dimensions.\n     */\n    function Point(srid, x, y, z) {\n        /**\n         * The coordinate reference system identifier.\n         * @type {T}\n         */\n        this.srid = (0, util_1.assertNumberOrInteger)(srid, 'SRID');\n        /**\n         * The `x` coordinate of the point.\n         * @type {number}\n         */\n        this.x = (0, util_1.assertNumber)(x, 'X coordinate');\n        /**\n         * The `y` coordinate of the point.\n         * @type {number}\n         */\n        this.y = (0, util_1.assertNumber)(y, 'Y coordinate');\n        /**\n         * The `z` coordinate of the point or `undefined` if point is 2-dimensional.\n         * @type {number}\n         */\n        this.z = z === null || z === undefined ? z : (0, util_1.assertNumber)(z, 'Z coordinate');\n        Object.freeze(this);\n    }\n    /**\n     * @ignore\n     */\n    Point.prototype.toString = function () {\n        return this.z != null && !isNaN(this.z)\n            ? \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \", z=\").concat(formatAsFloat(this.z), \"}\")\n            : \"Point{srid=\".concat(formatAsFloat(this.srid), \", x=\").concat(formatAsFloat(this.x), \", y=\").concat(formatAsFloat(this.y), \"}\");\n    };\n    return Point;\n}());\nexports.Point = Point;\nfunction formatAsFloat(number) {\n    return Number.isInteger(number) ? number.toString() + '.0' : number.toString();\n}\nObject.defineProperty(Point.prototype, POINT_IDENTIFIER_PROPERTY, {\n    value: true,\n    enumerable: false,\n    configurable: false,\n    writable: false\n});\n/**\n * Test if given object is an instance of {@link Point} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Point}, `false` otherwise.\n */\nfunction isPoint(obj) {\n    var anyObj = obj;\n    return obj != null && anyObj[POINT_IDENTIFIER_PROPERTY] === true;\n}\nexports.isPoint = isPoint;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL3NwYXRpYWwtdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZSxHQUFHLGFBQWE7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG1CQUFPLENBQUMsb0ZBQWlCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLEdBQUc7QUFDbEIsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDRKQUE0SjtBQUNqTCxxQkFBcUIsc0hBQXNIO0FBQzNJO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwyQ0FBMkMsYUFBYTtBQUN4RCxXQUFXLFFBQVE7QUFDbkIsWUFBWSxTQUFTLDZCQUE2QixZQUFZO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlIiwic291cmNlcyI6WyIvaG9tZS9qcGljYzg2ODEvcHJvZC1zeXN0ZW0vZG9ja2VyLWRldi9sZWdhbC1wbGF0Zm9ybS1iYWNrZW5kL2xlZ2FsLXNvZnR3YXJlLXBsYXRmb3JtL25vZGVfbW9kdWxlcy9uZW80ai1kcml2ZXItY29yZS9saWIvc3BhdGlhbC10eXBlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaXNQb2ludCA9IGV4cG9ydHMuUG9pbnQgPSB2b2lkIDA7XG4vKipcbiAqIENvcHlyaWdodCAoYykgXCJOZW80alwiXG4gKiBOZW80aiBTd2VkZW4gQUIgW2h0dHBzOi8vbmVvNGouY29tXVxuICpcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqL1xudmFyIHV0aWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsL3V0aWxcIik7XG52YXIgUE9JTlRfSURFTlRJRklFUl9QUk9QRVJUWSA9ICdfX2lzUG9pbnRfXyc7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBzaW5nbGUgdHdvIG9yIHRocmVlLWRpbWVuc2lvbmFsIHBvaW50IGluIGEgcGFydGljdWxhciBjb29yZGluYXRlIHJlZmVyZW5jZSBzeXN0ZW0uXG4gKiBDcmVhdGVkIGBQb2ludGAgb2JqZWN0cyBhcmUgZnJvemVuIHdpdGggYE9iamVjdC5mcmVlemUoKWAgaW4gY29uc3RydWN0b3IgYW5kIHRodXMgaW1tdXRhYmxlLlxuICovXG52YXIgUG9pbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgLyoqXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtUfSBzcmlkIC0gVGhlIGNvb3JkaW5hdGUgcmVmZXJlbmNlIHN5c3RlbSBpZGVudGlmaWVyLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gVGhlIGB4YCBjb29yZGluYXRlIG9mIHRoZSBwb2ludC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0geSAtIFRoZSBgeWAgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt6PXVuZGVmaW5lZF0gLSBUaGUgYHpgIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50IG9yIGB1bmRlZmluZWRgIGlmIHBvaW50IGhhcyAyIGRpbWVuc2lvbnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gUG9pbnQoc3JpZCwgeCwgeSwgeikge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGNvb3JkaW5hdGUgcmVmZXJlbmNlIHN5c3RlbSBpZGVudGlmaWVyLlxuICAgICAgICAgKiBAdHlwZSB7VH1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuc3JpZCA9ICgwLCB1dGlsXzEuYXNzZXJ0TnVtYmVyT3JJbnRlZ2VyKShzcmlkLCAnU1JJRCcpO1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGB4YCBjb29yZGluYXRlIG9mIHRoZSBwb2ludC5cbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMueCA9ICgwLCB1dGlsXzEuYXNzZXJ0TnVtYmVyKSh4LCAnWCBjb29yZGluYXRlJyk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYHlgIGNvb3JkaW5hdGUgb2YgdGhlIHBvaW50LlxuICAgICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy55ID0gKDAsIHV0aWxfMS5hc3NlcnROdW1iZXIpKHksICdZIGNvb3JkaW5hdGUnKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBgemAgY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQgb3IgYHVuZGVmaW5lZGAgaWYgcG9pbnQgaXMgMi1kaW1lbnNpb25hbC5cbiAgICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMueiA9IHogPT09IG51bGwgfHwgeiA9PT0gdW5kZWZpbmVkID8geiA6ICgwLCB1dGlsXzEuYXNzZXJ0TnVtYmVyKSh6LCAnWiBjb29yZGluYXRlJyk7XG4gICAgICAgIE9iamVjdC5mcmVlemUodGhpcyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpZ25vcmVcbiAgICAgKi9cbiAgICBQb2ludC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnogIT0gbnVsbCAmJiAhaXNOYU4odGhpcy56KVxuICAgICAgICAgICAgPyBcIlBvaW50e3NyaWQ9XCIuY29uY2F0KGZvcm1hdEFzRmxvYXQodGhpcy5zcmlkKSwgXCIsIHg9XCIpLmNvbmNhdChmb3JtYXRBc0Zsb2F0KHRoaXMueCksIFwiLCB5PVwiKS5jb25jYXQoZm9ybWF0QXNGbG9hdCh0aGlzLnkpLCBcIiwgej1cIikuY29uY2F0KGZvcm1hdEFzRmxvYXQodGhpcy56KSwgXCJ9XCIpXG4gICAgICAgICAgICA6IFwiUG9pbnR7c3JpZD1cIi5jb25jYXQoZm9ybWF0QXNGbG9hdCh0aGlzLnNyaWQpLCBcIiwgeD1cIikuY29uY2F0KGZvcm1hdEFzRmxvYXQodGhpcy54KSwgXCIsIHk9XCIpLmNvbmNhdChmb3JtYXRBc0Zsb2F0KHRoaXMueSksIFwifVwiKTtcbiAgICB9O1xuICAgIHJldHVybiBQb2ludDtcbn0oKSk7XG5leHBvcnRzLlBvaW50ID0gUG9pbnQ7XG5mdW5jdGlvbiBmb3JtYXRBc0Zsb2F0KG51bWJlcikge1xuICAgIHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcikgPyBudW1iZXIudG9TdHJpbmcoKSArICcuMCcgOiBudW1iZXIudG9TdHJpbmcoKTtcbn1cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShQb2ludC5wcm90b3R5cGUsIFBPSU5UX0lERU5USUZJRVJfUFJPUEVSVFksIHtcbiAgICB2YWx1ZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICBjb25maWd1cmFibGU6IGZhbHNlLFxuICAgIHdyaXRhYmxlOiBmYWxzZVxufSk7XG4vKipcbiAqIFRlc3QgaWYgZ2l2ZW4gb2JqZWN0IGlzIGFuIGluc3RhbmNlIG9mIHtAbGluayBQb2ludH0gY2xhc3MuXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqIHRoZSBvYmplY3QgdG8gdGVzdC5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCBpZiBnaXZlbiBvYmplY3QgaXMgYSB7QGxpbmsgUG9pbnR9LCBgZmFsc2VgIG90aGVyd2lzZS5cbiAqL1xuZnVuY3Rpb24gaXNQb2ludChvYmopIHtcbiAgICB2YXIgYW55T2JqID0gb2JqO1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBhbnlPYmpbUE9JTlRfSURFTlRJRklFUl9QUk9QRVJUWV0gPT09IHRydWU7XG59XG5leHBvcnRzLmlzUG9pbnQgPSBpc1BvaW50O1xuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6WzBdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/spatial-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/temporal-types.js":
/*!**************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/temporal-types.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isDateTime = exports.DateTime = exports.isLocalDateTime = exports.LocalDateTime = exports.isDate = exports.Date = exports.isTime = exports.Time = exports.isLocalTime = exports.LocalTime = exports.isDuration = exports.Duration = void 0;\nvar util = __importStar(__webpack_require__(/*! ./internal/temporal-util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/temporal-util.js\"));\nvar util_1 = __webpack_require__(/*! ./internal/util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\");\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar integer_1 = __importStar(__webpack_require__(/*! ./integer */ \"(ssr)/./node_modules/neo4j-driver-core/lib/integer.js\"));\nvar IDENTIFIER_PROPERTY_ATTRIBUTES = {\n    value: true,\n    enumerable: false,\n    configurable: false,\n    writable: false\n};\nvar DURATION_IDENTIFIER_PROPERTY = '__isDuration__';\nvar LOCAL_TIME_IDENTIFIER_PROPERTY = '__isLocalTime__';\nvar TIME_IDENTIFIER_PROPERTY = '__isTime__';\nvar DATE_IDENTIFIER_PROPERTY = '__isDate__';\nvar LOCAL_DATE_TIME_IDENTIFIER_PROPERTY = '__isLocalDateTime__';\nvar DATE_TIME_IDENTIFIER_PROPERTY = '__isDateTime__';\n/**\n * Represents an ISO 8601 duration. Contains both date-based values (years, months, days) and time-based values (seconds, nanoseconds).\n * Created `Duration` objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Duration = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} months - The number of months for the new duration.\n     * @param {NumberOrInteger} days - The number of days for the new duration.\n     * @param {NumberOrInteger} seconds - The number of seconds for the new duration.\n     * @param {NumberOrInteger} nanoseconds - The number of nanoseconds for the new duration.\n     */\n    function Duration(months, days, seconds, nanoseconds) {\n        /**\n         * The number of months.\n         * @type {NumberOrInteger}\n         */\n        this.months = (0, util_1.assertNumberOrInteger)(months, 'Months');\n        /**\n         * The number of days.\n         * @type {NumberOrInteger}\n         */\n        this.days = (0, util_1.assertNumberOrInteger)(days, 'Days');\n        (0, util_1.assertNumberOrInteger)(seconds, 'Seconds');\n        (0, util_1.assertNumberOrInteger)(nanoseconds, 'Nanoseconds');\n        /**\n         * The number of seconds.\n         * @type {NumberOrInteger}\n         */\n        this.seconds = util.normalizeSecondsForDuration(seconds, nanoseconds);\n        /**\n         * The number of nanoseconds.\n         * @type {NumberOrInteger}\n         */\n        this.nanoseconds = util.normalizeNanosecondsForDuration(nanoseconds);\n        Object.freeze(this);\n    }\n    /**\n     * @ignore\n     */\n    Duration.prototype.toString = function () {\n        return util.durationToIsoString(this.months, this.days, this.seconds, this.nanoseconds);\n    };\n    return Duration;\n}());\nexports.Duration = Duration;\nObject.defineProperty(Duration.prototype, DURATION_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Duration} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Duration}, `false` otherwise.\n */\nfunction isDuration(obj) {\n    return hasIdentifierProperty(obj, DURATION_IDENTIFIER_PROPERTY);\n}\nexports.isDuration = isDuration;\n/**\n * Represents an instant capturing the time of day, but not the date, nor the timezone.\n * Created {@link LocalTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     */\n    function LocalTime(hour, minute, second, nanosecond) {\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link LocalTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Year, month, day and time zone offset components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {LocalTime<number>} New LocalTime.\n     */\n    LocalTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        var totalNanoseconds = util.totalNanoseconds(standardDate, nanosecond);\n        return new LocalTime(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), totalNanoseconds instanceof integer_1.default\n            ? totalNanoseconds.toInt()\n            : typeof totalNanoseconds === 'bigint'\n                ? (0, integer_1.int)(totalNanoseconds).toInt()\n                : totalNanoseconds);\n    };\n    /**\n     * @ignore\n     */\n    LocalTime.prototype.toString = function () {\n        return util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond);\n    };\n    return LocalTime;\n}());\nexports.LocalTime = LocalTime;\nObject.defineProperty(LocalTime.prototype, LOCAL_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalTime} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link LocalTime}, `false` otherwise.\n */\nfunction isLocalTime(obj) {\n    return hasIdentifierProperty(obj, LOCAL_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalTime = isLocalTime;\n/**\n * Represents an instant capturing the time of day, and the timezone offset in seconds, but not the date.\n * Created {@link Time} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Time = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Value represents the difference, in seconds, from UTC to local time.\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n     */\n    function Time(hour, minute, second, nanosecond, timeZoneOffsetSeconds) {\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        /**\n         * The time zone offset in seconds.\n         * @type {NumberOrInteger}\n         */\n        this.timeZoneOffsetSeconds = (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link Time} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Year, month and day components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {Time<number>} New Time.\n     */\n    Time.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new Time(standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate));\n    };\n    /**\n     * @ignore\n     */\n    Time.prototype.toString = function () {\n        return (util.timeToIsoString(this.hour, this.minute, this.second, this.nanosecond) + util.timeZoneOffsetToIsoString(this.timeZoneOffsetSeconds));\n    };\n    return Time;\n}());\nexports.Time = Time;\nObject.defineProperty(Time.prototype, TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Time} class.\n * @param {Object} obj the object to test.\n * @return {boolean} `true` if given object is a {@link Time}, `false` otherwise.\n */\nfunction isTime(obj) {\n    return hasIdentifierProperty(obj, TIME_IDENTIFIER_PROPERTY);\n}\nexports.isTime = isTime;\n/**\n * Represents an instant capturing the date, but not the time, nor the timezone.\n * Created {@link Date} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar Date = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new local date.\n     * @param {NumberOrInteger} month - The month for the new local date.\n     * @param {NumberOrInteger} day - The day for the new local date.\n     */\n    function Date(year, month, day) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link Date} object from the given standard JavaScript `Date`.\n     * Hour, minute, second, millisecond and time zone offset components of the given date are ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @return {Date} New Date.\n     */\n    Date.fromStandardDate = function (standardDate) {\n        verifyStandardDateAndNanos(standardDate);\n        return new Date(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate());\n    };\n    /**\n     * Convert date to standard JavaScript `Date`.\n     *\n     * The time component of the returned `Date` is set to midnight\n     * and the time zone is set to UTC.\n     *\n     * @returns {StandardDate} Standard JavaScript `Date` at `00:00:00.000` UTC.\n     */\n    Date.prototype.toStandardDate = function () {\n        return util.isoStringToStandardDate(this.toString());\n    };\n    /**\n     * @ignore\n     */\n    Date.prototype.toString = function () {\n        return util.dateToIsoString(this.year, this.month, this.day);\n    };\n    return Date;\n}());\nexports.Date = Date;\nObject.defineProperty(Date.prototype, DATE_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link Date} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link Date}, `false` otherwise.\n */\nfunction isDate(obj) {\n    return hasIdentifierProperty(obj, DATE_IDENTIFIER_PROPERTY);\n}\nexports.isDate = isDate;\n/**\n * Represents an instant capturing the date and the time, but not the timezone.\n * Created {@link LocalDateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar LocalDateTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new local date.\n     * @param {NumberOrInteger} month - The month for the new local date.\n     * @param {NumberOrInteger} day - The day for the new local date.\n     * @param {NumberOrInteger} hour - The hour for the new local time.\n     * @param {NumberOrInteger} minute - The minute for the new local time.\n     * @param {NumberOrInteger} second - The second for the new local time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new local time.\n     */\n    function LocalDateTime(year, month, day, hour, minute, second, nanosecond) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link LocalDateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * Time zone offset component of the given date is ignored.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {LocalDateTime} New LocalDateTime.\n     */\n    LocalDateTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new LocalDateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)));\n    };\n    /**\n     * Convert date to standard JavaScript `Date`.\n     *\n     * @returns {StandardDate} Standard JavaScript `Date` at the local timezone\n     */\n    LocalDateTime.prototype.toStandardDate = function () {\n        return util.isoStringToStandardDate(this.toString());\n    };\n    /**\n     * @ignore\n     */\n    LocalDateTime.prototype.toString = function () {\n        return localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n    };\n    return LocalDateTime;\n}());\nexports.LocalDateTime = LocalDateTime;\nObject.defineProperty(LocalDateTime.prototype, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link LocalDateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link LocalDateTime}, `false` otherwise.\n */\nfunction isLocalDateTime(obj) {\n    return hasIdentifierProperty(obj, LOCAL_DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isLocalDateTime = isLocalDateTime;\n/**\n * Represents an instant capturing the date, the time and the timezone identifier.\n * Created {@ DateTime} objects are frozen with `Object.freeze()` in constructor and thus immutable.\n */\nvar DateTime = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {NumberOrInteger} year - The year for the new date-time.\n     * @param {NumberOrInteger} month - The month for the new date-time.\n     * @param {NumberOrInteger} day - The day for the new date-time.\n     * @param {NumberOrInteger} hour - The hour for the new date-time.\n     * @param {NumberOrInteger} minute - The minute for the new date-time.\n     * @param {NumberOrInteger} second - The second for the new date-time.\n     * @param {NumberOrInteger} nanosecond - The nanosecond for the new date-time.\n     * @param {NumberOrInteger} timeZoneOffsetSeconds - The time zone offset in seconds. Either this argument or `timeZoneId` should be defined.\n     * Value represents the difference, in seconds, from UTC to local time.\n     * This is different from standard JavaScript `Date.getTimezoneOffset()` which is the difference, in minutes, from local time to UTC.\n     * @param {string|null} timeZoneId - The time zone id for the new date-time. Either this argument or `timeZoneOffsetSeconds` should be defined.\n     */\n    function DateTime(year, month, day, hour, minute, second, nanosecond, timeZoneOffsetSeconds, timeZoneId) {\n        /**\n         * The year.\n         * @type {NumberOrInteger}\n         */\n        this.year = util.assertValidYear(year);\n        /**\n         * The month.\n         * @type {NumberOrInteger}\n         */\n        this.month = util.assertValidMonth(month);\n        /**\n         * The day.\n         * @type {NumberOrInteger}\n         */\n        this.day = util.assertValidDay(day);\n        /**\n         * The hour.\n         * @type {NumberOrInteger}\n         */\n        this.hour = util.assertValidHour(hour);\n        /**\n         * The minute.\n         * @type {NumberOrInteger}\n         */\n        this.minute = util.assertValidMinute(minute);\n        /**\n         * The second.\n         * @type {NumberOrInteger}\n         */\n        this.second = util.assertValidSecond(second);\n        /**\n         * The nanosecond.\n         * @type {NumberOrInteger}\n         */\n        this.nanosecond = util.assertValidNanosecond(nanosecond);\n        var _a = __read(verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId), 2), offset = _a[0], id = _a[1];\n        /**\n         * The time zone offset in seconds.\n         *\n         * *Either this or {@link timeZoneId} is defined.*\n         *\n         * @type {NumberOrInteger}\n         */\n        this.timeZoneOffsetSeconds = offset;\n        /**\n         * The time zone id.\n         *\n         * *Either this or {@link timeZoneOffsetSeconds} is defined.*\n         *\n         * @type {string}\n         */\n        this.timeZoneId = id !== null && id !== void 0 ? id : undefined;\n        Object.freeze(this);\n    }\n    /**\n     * Create a {@link DateTime} object from the given standard JavaScript `Date` and optional nanoseconds.\n     * @param {global.Date} standardDate - The standard JavaScript date to convert.\n     * @param {NumberOrInteger|undefined} nanosecond - The optional amount of nanoseconds.\n     * @return {DateTime} New DateTime.\n     */\n    DateTime.fromStandardDate = function (standardDate, nanosecond) {\n        verifyStandardDateAndNanos(standardDate, nanosecond);\n        return new DateTime(standardDate.getFullYear(), standardDate.getMonth() + 1, standardDate.getDate(), standardDate.getHours(), standardDate.getMinutes(), standardDate.getSeconds(), (0, integer_1.toNumber)(util.totalNanoseconds(standardDate, nanosecond)), util.timeZoneOffsetInSeconds(standardDate), null /* no time zone id */);\n    };\n    /**\n     * Convert date to standard JavaScript `Date`.\n     *\n     * @returns {StandardDate} Standard JavaScript `Date` at the defined time zone offset\n     * @throws {Error} If the time zone offset is not defined in the object.\n     */\n    DateTime.prototype.toStandardDate = function () {\n        return util.toStandardDate(this._toUTC());\n    };\n    /**\n     * @ignore\n     */\n    DateTime.prototype.toString = function () {\n        var _a;\n        var localDateTimeStr = localDateTimeToString(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n        var timeOffset = this.timeZoneOffsetSeconds != null\n            ? util.timeZoneOffsetToIsoString((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0)\n            : '';\n        var timeZoneStr = this.timeZoneId != null\n            ? \"[\".concat(this.timeZoneId, \"]\")\n            : '';\n        return localDateTimeStr + timeOffset + timeZoneStr;\n    };\n    /**\n     * @private\n     * @returns {number}\n     */\n    DateTime.prototype._toUTC = function () {\n        var _a;\n        if (this.timeZoneOffsetSeconds === undefined) {\n            throw new Error('Requires DateTime created with time zone offset');\n        }\n        var epochSecond = util.localDateTimeToEpochSecond(this.year, this.month, this.day, this.hour, this.minute, this.second, this.nanosecond);\n        var utcSecond = epochSecond.subtract((_a = this.timeZoneOffsetSeconds) !== null && _a !== void 0 ? _a : 0);\n        return (0, integer_1.int)(utcSecond)\n            .multiply(1000)\n            .add((0, integer_1.int)(this.nanosecond).div(1000000))\n            .toNumber();\n    };\n    return DateTime;\n}());\nexports.DateTime = DateTime;\nObject.defineProperty(DateTime.prototype, DATE_TIME_IDENTIFIER_PROPERTY, IDENTIFIER_PROPERTY_ATTRIBUTES);\n/**\n * Test if given object is an instance of {@link DateTime} class.\n * @param {Object} obj - The object to test.\n * @return {boolean} `true` if given object is a {@link DateTime}, `false` otherwise.\n */\nfunction isDateTime(obj) {\n    return hasIdentifierProperty(obj, DATE_TIME_IDENTIFIER_PROPERTY);\n}\nexports.isDateTime = isDateTime;\nfunction hasIdentifierProperty(obj, property) {\n    return obj != null && obj[property] === true;\n}\nfunction localDateTimeToString(year, month, day, hour, minute, second, nanosecond) {\n    return (util.dateToIsoString(year, month, day) +\n        'T' +\n        util.timeToIsoString(hour, minute, second, nanosecond));\n}\n/**\n * @private\n * @param {NumberOrInteger} timeZoneOffsetSeconds\n * @param {string | null } timeZoneId\n * @returns {Array<NumberOrInteger | undefined | null, string | undefined | null>}\n */\nfunction verifyTimeZoneArguments(timeZoneOffsetSeconds, timeZoneId) {\n    var offsetDefined = timeZoneOffsetSeconds !== null && timeZoneOffsetSeconds !== undefined;\n    var idDefined = timeZoneId !== null && timeZoneId !== undefined && timeZoneId !== '';\n    if (!offsetDefined && !idDefined) {\n        throw (0, error_1.newError)(\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        \"Unable to create DateTime without either time zone offset or id. Please specify either of them. Given offset: \".concat(timeZoneOffsetSeconds, \" and id: \").concat(timeZoneId));\n    }\n    var result = [undefined, undefined];\n    if (offsetDefined) {\n        (0, util_1.assertNumberOrInteger)(timeZoneOffsetSeconds, 'Time zone offset in seconds');\n        result[0] = timeZoneOffsetSeconds;\n    }\n    if (idDefined) {\n        (0, util_1.assertString)(timeZoneId, 'Time zone ID');\n        util.assertValidZoneId('Time zone ID', timeZoneId);\n        result[1] = timeZoneId;\n    }\n    return result;\n}\n/**\n * @private\n * @param {StandardDate} standardDate\n * @param {NumberOrInteger} nanosecond\n * @returns {void}\n */\nfunction verifyStandardDateAndNanos(standardDate, nanosecond) {\n    (0, util_1.assertValidDate)(standardDate, 'Standard date');\n    if (nanosecond !== null && nanosecond !== undefined) {\n        (0, util_1.assertNumberOrInteger)(nanosecond, 'Nanosecond');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/temporal-types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/transaction-managed.js":
/*!*******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/transaction-managed.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * Represents a transaction that is managed by the transaction executor.\n *\n * @public\n */\nvar ManagedTransaction = /** @class */ (function () {\n    /**\n     * @private\n     */\n    function ManagedTransaction(_a) {\n        var run = _a.run;\n        /**\n         * @private\n         */\n        this._run = run;\n    }\n    /**\n     * @private\n     * @param {Transaction} tx - Transaction to wrap\n     * @returns {ManagedTransaction} the ManagedTransaction\n     */\n    ManagedTransaction.fromTransaction = function (tx) {\n        return new ManagedTransaction({\n            run: tx.run.bind(tx)\n        });\n    };\n    /**\n     * Run Cypher query\n     * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n     * or with the query and parameters as separate arguments.\n     * @param {mixed} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in query\n     * @return {Result} New Result\n     */\n    ManagedTransaction.prototype.run = function (query, parameters) {\n        return this._run(query, parameters);\n    };\n    return ManagedTransaction;\n}());\nexports[\"default\"] = ManagedTransaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbmVvNGotZHJpdmVyLWNvcmUvbGliL3RyYW5zYWN0aW9uLW1hbmFnZWQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGFBQWE7QUFDNUIsaUJBQWlCLG9CQUFvQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsZ0NBQWdDLFVBQVU7QUFDN0Y7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSxRQUFRO0FBQ3ZCLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsa0JBQWUiLCJzb3VyY2VzIjpbIi9ob21lL2pwaWNjODY4MS9wcm9kLXN5c3RlbS9kb2NrZXItZGV2L2xlZ2FsLXBsYXRmb3JtLWJhY2tlbmQvbGVnYWwtc29mdHdhcmUtcGxhdGZvcm0vbm9kZV9tb2R1bGVzL25lbzRqLWRyaXZlci1jb3JlL2xpYi90cmFuc2FjdGlvbi1tYW5hZ2VkLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIFwiTmVvNGpcIlxuICogTmVvNGogU3dlZGVuIEFCIFtodHRwczovL25lbzRqLmNvbV1cbiAqXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbi8qKlxuICogUmVwcmVzZW50cyBhIHRyYW5zYWN0aW9uIHRoYXQgaXMgbWFuYWdlZCBieSB0aGUgdHJhbnNhY3Rpb24gZXhlY3V0b3IuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgTWFuYWdlZFRyYW5zYWN0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFuYWdlZFRyYW5zYWN0aW9uKF9hKSB7XG4gICAgICAgIHZhciBydW4gPSBfYS5ydW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5fcnVuID0gcnVuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7VHJhbnNhY3Rpb259IHR4IC0gVHJhbnNhY3Rpb24gdG8gd3JhcFxuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VkVHJhbnNhY3Rpb259IHRoZSBNYW5hZ2VkVHJhbnNhY3Rpb25cbiAgICAgKi9cbiAgICBNYW5hZ2VkVHJhbnNhY3Rpb24uZnJvbVRyYW5zYWN0aW9uID0gZnVuY3Rpb24gKHR4KSB7XG4gICAgICAgIHJldHVybiBuZXcgTWFuYWdlZFRyYW5zYWN0aW9uKHtcbiAgICAgICAgICAgIHJ1bjogdHgucnVuLmJpbmQodHgpXG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUnVuIEN5cGhlciBxdWVyeVxuICAgICAqIENvdWxkIGJlIGNhbGxlZCB3aXRoIGEgcXVlcnkgb2JqZWN0IGkuZS46IGB7dGV4dDogXCJNQVRDSCAuLi5cIiwgcGFyYW1ldGVyczoge3BhcmFtOiAxfX1gXG4gICAgICogb3Igd2l0aCB0aGUgcXVlcnkgYW5kIHBhcmFtZXRlcnMgYXMgc2VwYXJhdGUgYXJndW1lbnRzLlxuICAgICAqIEBwYXJhbSB7bWl4ZWR9IHF1ZXJ5IC0gQ3lwaGVyIHF1ZXJ5IHRvIGV4ZWN1dGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1ldGVycyAtIE1hcCB3aXRoIHBhcmFtZXRlcnMgdG8gdXNlIGluIHF1ZXJ5XG4gICAgICogQHJldHVybiB7UmVzdWx0fSBOZXcgUmVzdWx0XG4gICAgICovXG4gICAgTWFuYWdlZFRyYW5zYWN0aW9uLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAocXVlcnksIHBhcmFtZXRlcnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3J1bihxdWVyeSwgcGFyYW1ldGVycyk7XG4gICAgfTtcbiAgICByZXR1cm4gTWFuYWdlZFRyYW5zYWN0aW9uO1xufSgpKTtcbmV4cG9ydHMuZGVmYXVsdCA9IE1hbmFnZWRUcmFuc2FjdGlvbjtcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/transaction-managed.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/transaction-promise.js":
/*!*******************************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/transaction-promise.js ***!
  \*******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar transaction_1 = __importDefault(__webpack_require__(/*! ./transaction */ \"(ssr)/./node_modules/neo4j-driver-core/lib/transaction.js\"));\n/**\n * Represents a {@link Promise<Transaction>} object and a {@link Transaction} object.\n *\n * Resolving this object promise verifies the result of the transaction begin and returns the {@link Transaction} object in case of success.\n *\n * The object can still also used as {@link Transaction} for convenience. The result of begin will be checked\n * during the next API calls in the object as it is in the transaction.\n *\n * @access public\n */\nvar TransactionPromise = /** @class */ (function (_super) {\n    __extends(TransactionPromise, _super);\n    /**\n     * @constructor\n     * @param {object} args\n     * @param {ConnectionHolder} args.connectionHolder - the connection holder to get connection from.\n     * @param {function()} args.onClose - Function to be called when transaction is committed or rolled back.\n     * @param {function(bookmarks: Bookmarks)} args.onBookmarks callback invoked when new bookmark is produced.\n     * @param {function()} args.onConnection - Function to be called when a connection is obtained to ensure the connection\n     * is not yet released.\n     * @param {boolean} args.reactive whether this transaction generates reactive streams\n     * @param {number} args.fetchSize - the record fetch size in each pulling batch.\n     * @param {string} args.impersonatedUser - The name of the user which should be impersonated for the duration of the session.\n     * @param {NotificationFilter} args.notificationFilter - The notification filter used for this transaction.\n     * @param {NonAutoCommitApiTelemetryConfig} args.apiTelemetryConfig - The api telemetry configuration. Empty/Null for disabling telemetry\n     */\n    function TransactionPromise(_b) {\n        var connectionHolder = _b.connectionHolder, onClose = _b.onClose, onBookmarks = _b.onBookmarks, onConnection = _b.onConnection, reactive = _b.reactive, fetchSize = _b.fetchSize, impersonatedUser = _b.impersonatedUser, highRecordWatermark = _b.highRecordWatermark, lowRecordWatermark = _b.lowRecordWatermark, notificationFilter = _b.notificationFilter, apiTelemetryConfig = _b.apiTelemetryConfig;\n        var _this = _super.call(this, {\n            connectionHolder: connectionHolder,\n            onClose: onClose,\n            onBookmarks: onBookmarks,\n            onConnection: onConnection,\n            reactive: reactive,\n            fetchSize: fetchSize,\n            impersonatedUser: impersonatedUser,\n            highRecordWatermark: highRecordWatermark,\n            lowRecordWatermark: lowRecordWatermark,\n            notificationFilter: notificationFilter,\n            apiTelemetryConfig: apiTelemetryConfig\n        }) || this;\n        _this[_a] = 'TransactionPromise';\n        return _this;\n    }\n    /**\n     * Waits for the begin to complete.\n     *\n     * @param {function(transaction: Transaction)} onFulfilled - function to be called when finished.\n     * @param {function(error: {message:string, code:string})} onRejected - function to be called upon errors.\n     * @return {Promise} promise.\n     */\n    TransactionPromise.prototype.then = function (onfulfilled, onrejected) {\n        return this._getOrCreateBeginPromise().then(onfulfilled, onrejected);\n    };\n    /**\n     * Catch errors when using promises.\n     *\n     * @param {function(error: Neo4jError)} onRejected - Function to be called upon errors.\n     * @return {Promise} promise.\n     */\n    TransactionPromise.prototype.catch = function (onrejected) {\n        return this._getOrCreateBeginPromise().catch(onrejected);\n    };\n    /**\n     * Called when finally the begin is done\n     *\n     * @param {function()|null} onfinally - function when the promise finished\n     * @return {Promise} promise.\n     */\n    TransactionPromise.prototype.finally = function (onfinally) {\n        return this._getOrCreateBeginPromise().finally(onfinally);\n    };\n    TransactionPromise.prototype._getOrCreateBeginPromise = function () {\n        var _this = this;\n        if (this._beginPromise == null) {\n            this._beginPromise = new Promise(function (resolve, reject) {\n                _this._resolve = resolve;\n                _this._reject = reject;\n                if (_this._beginError != null) {\n                    reject(_this._beginError);\n                }\n                if (_this._beginMetadata != null) {\n                    resolve(_this._toTransaction());\n                }\n            });\n        }\n        return this._beginPromise;\n    };\n    /**\n     * @access private\n     */\n    TransactionPromise.prototype._toTransaction = function () {\n        return __assign(__assign({}, this), { run: _super.prototype.run.bind(this), commit: _super.prototype.commit.bind(this), rollback: _super.prototype.rollback.bind(this), close: _super.prototype.close.bind(this), isOpen: _super.prototype.isOpen.bind(this), _begin: this._begin.bind(this) });\n    };\n    /**\n     * @access private\n     */\n    TransactionPromise.prototype._begin = function (bookmarks, txConfig) {\n        return _super.prototype._begin.call(this, bookmarks, txConfig, {\n            onError: this._onBeginError.bind(this),\n            onComplete: this._onBeginMetadata.bind(this)\n        });\n    };\n    /**\n     * @access private\n     * @returns {void}\n     */\n    TransactionPromise.prototype._onBeginError = function (error) {\n        this._beginError = error;\n        if (this._reject != null) {\n            this._reject(error);\n        }\n    };\n    /**\n     * @access private\n     * @returns {void}\n     */\n    TransactionPromise.prototype._onBeginMetadata = function (metadata) {\n        this._beginMetadata = metadata !== null && metadata !== void 0 ? metadata : {};\n        if (this._resolve != null) {\n            this._resolve(this._toTransaction());\n        }\n    };\n    return TransactionPromise;\n}(transaction_1.default));\n_a = Symbol.toStringTag;\nexports[\"default\"] = TransactionPromise;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/transaction-promise.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/transaction.js":
/*!***********************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/transaction.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (g && (g = 0, op[0] && (_ = 0)), _) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/* eslint-disable @typescript-eslint/promise-function-async */\nvar util_1 = __webpack_require__(/*! ./internal/util */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/util.js\");\nvar connection_holder_1 = __webpack_require__(/*! ./internal/connection-holder */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/connection-holder.js\");\nvar bookmarks_1 = __webpack_require__(/*! ./internal/bookmarks */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/bookmarks.js\");\nvar tx_config_1 = __webpack_require__(/*! ./internal/tx-config */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/tx-config.js\");\nvar observers_1 = __webpack_require__(/*! ./internal/observers */ \"(ssr)/./node_modules/neo4j-driver-core/lib/internal/observers.js\");\nvar error_1 = __webpack_require__(/*! ./error */ \"(ssr)/./node_modules/neo4j-driver-core/lib/error.js\");\nvar result_1 = __importDefault(__webpack_require__(/*! ./result */ \"(ssr)/./node_modules/neo4j-driver-core/lib/result.js\"));\n/**\n * Represents a transaction in the Neo4j database.\n *\n * @access public\n */\nvar Transaction = /** @class */ (function () {\n    /**\n     * @constructor\n     * @param {object} args\n     * @param {ConnectionHolder} args.connectionHolder - the connection holder to get connection from.\n     * @param {function()} args.onClose - Function to be called when transaction is committed or rolled back.\n     * @param {function(bookmarks: Bookmarks)} args.onBookmarks callback invoked when new bookmark is produced.\n     * @param {function()} args.onConnection - Function to be called when a connection is obtained to ensure the conneciton\n     * is not yet released.\n     * @param {boolean} args.reactive whether this transaction generates reactive streams\n     * @param {number} args.fetchSize - the record fetch size in each pulling batch.\n     * @param {string} args.impersonatedUser - The name of the user which should be impersonated for the duration of the session.\n     * @param {number} args.highRecordWatermark - The high watermark for the record buffer.\n     * @param {number} args.lowRecordWatermark - The low watermark for the record buffer.\n     * @param {NotificationFilter} args.notificationFilter - The notification filter used for this transaction.\n     * @param {NonAutoCommitApiTelemetryConfig} args.apiTelemetryConfig - The api telemetry configuration. Empty/Null for disabling telemetry\n     */\n    function Transaction(_a) {\n        var connectionHolder = _a.connectionHolder, onClose = _a.onClose, onBookmarks = _a.onBookmarks, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, impersonatedUser = _a.impersonatedUser, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark, notificationFilter = _a.notificationFilter, apiTelemetryConfig = _a.apiTelemetryConfig;\n        var _this = this;\n        this._connectionHolder = connectionHolder;\n        this._reactive = reactive;\n        this._state = _states.ACTIVE;\n        this._onClose = onClose;\n        this._onBookmarks = onBookmarks;\n        this._onConnection = onConnection;\n        this._onError = this._onErrorCallback.bind(this);\n        this._fetchSize = fetchSize;\n        this._onComplete = this._onCompleteCallback.bind(this);\n        this._results = [];\n        this._impersonatedUser = impersonatedUser;\n        this._lowRecordWatermak = lowRecordWatermark;\n        this._highRecordWatermark = highRecordWatermark;\n        this._bookmarks = bookmarks_1.Bookmarks.empty();\n        this._notificationFilter = notificationFilter;\n        this._apiTelemetryConfig = apiTelemetryConfig;\n        this._acceptActive = function () { }; // satisfy DenoJS\n        this._activePromise = new Promise(function (resolve, reject) {\n            _this._acceptActive = resolve;\n        });\n    }\n    /**\n     * @private\n     * @param {Bookmarks | string |  string []} bookmarks\n     * @param {TxConfig} txConfig\n     * @param {Object} events List of observers to events\n     * @returns {void}\n     */\n    Transaction.prototype._begin = function (getBookmarks, txConfig, events) {\n        var _this = this;\n        this._connectionHolder\n            .getConnection()\n            .then(function (connection) { return __awaiter(_this, void 0, void 0, function () {\n            var _a;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        this._onConnection();\n                        if (!(connection != null)) return [3 /*break*/, 2];\n                        _a = this;\n                        return [4 /*yield*/, getBookmarks()];\n                    case 1:\n                        _a._bookmarks = _b.sent();\n                        return [2 /*return*/, connection.beginTransaction({\n                                bookmarks: this._bookmarks,\n                                txConfig: txConfig,\n                                mode: this._connectionHolder.mode(),\n                                database: this._connectionHolder.database(),\n                                impersonatedUser: this._impersonatedUser,\n                                notificationFilter: this._notificationFilter,\n                                apiTelemetryConfig: this._apiTelemetryConfig,\n                                beforeError: function (error) {\n                                    if (events != null) {\n                                        events.onError(error);\n                                    }\n                                    _this._onError(error).catch(function () { });\n                                },\n                                afterComplete: function (metadata) {\n                                    if (events != null) {\n                                        events.onComplete(metadata);\n                                    }\n                                    _this._onComplete(metadata);\n                                }\n                            })];\n                    case 2: throw (0, error_1.newError)('No connection available');\n                }\n            });\n        }); })\n            .catch(function (error) {\n            if (events != null) {\n                events.onError(error);\n            }\n            _this._onError(error).catch(function () { });\n        })\n            // It should make the transaction active anyway\n            // further errors will be treated by the existing\n            // observers\n            .finally(function () { return _this._acceptActive(); });\n    };\n    /**\n     * Run Cypher query\n     * Could be called with a query object i.e.: `{text: \"MATCH ...\", parameters: {param: 1}}`\n     * or with the query and parameters as separate arguments.\n     * @param {mixed} query - Cypher query to execute\n     * @param {Object} parameters - Map with parameters to use in query\n     * @return {Result} New Result\n     */\n    Transaction.prototype.run = function (query, parameters) {\n        var _a = (0, util_1.validateQueryAndParameters)(query, parameters), validatedQuery = _a.validatedQuery, params = _a.params;\n        var result = this._state.run(validatedQuery, params, {\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: this._onComplete,\n            onConnection: this._onConnection,\n            reactive: this._reactive,\n            fetchSize: this._fetchSize,\n            highRecordWatermark: this._highRecordWatermark,\n            lowRecordWatermark: this._lowRecordWatermak,\n            preparationJob: this._activePromise\n        });\n        this._results.push(result);\n        return result;\n    };\n    /**\n     * Commits the transaction and returns the result.\n     *\n     * After committing the transaction can no longer be used.\n     *\n     * @returns {Promise<void>} An empty promise if committed successfully or error if any error happened during commit.\n     */\n    Transaction.prototype.commit = function () {\n        var _this = this;\n        var committed = this._state.commit({\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: function (meta) { return _this._onCompleteCallback(meta, _this._bookmarks); },\n            onConnection: this._onConnection,\n            pendingResults: this._results,\n            preparationJob: this._activePromise\n        });\n        this._state = committed.state;\n        // clean up\n        this._onClose();\n        return new Promise(function (resolve, reject) {\n            committed.result.subscribe({\n                onCompleted: function () { return resolve(); },\n                onError: function (error) { return reject(error); }\n            });\n        });\n    };\n    /**\n     * Rollbacks the transaction.\n     *\n     * After rolling back, the transaction can no longer be used.\n     *\n     * @returns {Promise<void>} An empty promise if rolled back successfully or error if any error happened during\n     * rollback.\n     */\n    Transaction.prototype.rollback = function () {\n        var rolledback = this._state.rollback({\n            connectionHolder: this._connectionHolder,\n            onError: this._onError,\n            onComplete: this._onComplete,\n            onConnection: this._onConnection,\n            pendingResults: this._results,\n            preparationJob: this._activePromise\n        });\n        this._state = rolledback.state;\n        // clean up\n        this._onClose();\n        return new Promise(function (resolve, reject) {\n            rolledback.result.subscribe({\n                onCompleted: function () { return resolve(); },\n                onError: function (error) { return reject(error); }\n            });\n        });\n    };\n    /**\n     * Check if this transaction is active, which means commit and rollback did not happen.\n     * @return {boolean} `true` when not committed and not rolled back, `false` otherwise.\n     */\n    Transaction.prototype.isOpen = function () {\n        return this._state === _states.ACTIVE;\n    };\n    /**\n     * Closes the transaction\n     *\n     * This method will roll back the transaction if it is not already committed or rolled back.\n     *\n     * @returns {Promise<void>} An empty promise if closed successfully or error if any error happened during\n     */\n    Transaction.prototype.close = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.isOpen()) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.rollback()];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    // eslint-disable-next-line\n    // @ts-ignore\n    Transaction.prototype[Symbol.asyncDispose] = function () {\n        return this.close();\n    };\n    Transaction.prototype._onErrorCallback = function (error) {\n        // error will be \"acknowledged\" by sending a RESET message\n        // database will then forget about this transaction and cleanup all corresponding resources\n        // it is thus safe to move this transaction to a FAILED state and disallow any further interactions with it\n        if (this._state === _states.FAILED) {\n            // already failed, nothing to do\n            // if we call onError for each result again, we might run into an infinite loop, that causes an OOM eventually\n            return Promise.resolve(null);\n        }\n        this._state = _states.FAILED;\n        this._onClose();\n        this._results.forEach(function (result) {\n            if (result.isOpen()) {\n                // @ts-expect-error\n                result._streamObserverPromise\n                    .then(function (resultStreamObserver) { return resultStreamObserver.onError(error); })\n                    // Nothing to do since we don't have a observer to notify the error\n                    // the result will be already broke in other ways.\n                    .catch(function (_) { });\n            }\n        });\n        // release connection back to the pool\n        return this._connectionHolder.releaseConnection();\n    };\n    /**\n     * @private\n     * @param {object} meta The meta with bookmarks\n     * @returns {void}\n     */\n    Transaction.prototype._onCompleteCallback = function (meta, previousBookmarks) {\n        this._onBookmarks(new bookmarks_1.Bookmarks(meta === null || meta === void 0 ? void 0 : meta.bookmark), previousBookmarks !== null && previousBookmarks !== void 0 ? previousBookmarks : bookmarks_1.Bookmarks.empty(), meta === null || meta === void 0 ? void 0 : meta.db);\n    };\n    return Transaction;\n}());\nvar _states = {\n    // The transaction is running with no explicit success or failure marked\n    ACTIVE: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;\n            return {\n                result: finishTransaction(true, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n                state: _states.SUCCEEDED\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, pendingResults = _a.pendingResults, preparationJob = _a.preparationJob;\n            return {\n                result: finishTransaction(false, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob),\n                state: _states.ROLLED_BACK\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete, onConnection = _a.onConnection, reactive = _a.reactive, fetchSize = _a.fetchSize, highRecordWatermark = _a.highRecordWatermark, lowRecordWatermark = _a.lowRecordWatermark, preparationJob = _a.preparationJob;\n            // RUN in explicit transaction can't contain bookmarks and transaction configuration\n            // No need to include mode and database name as it shall be included in begin\n            var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n            var observerPromise = connectionHolder.getConnection()\n                .then(function (conn) { return requirements.then(function () { return conn; }); })\n                .then(function (conn) {\n                onConnection();\n                if (conn != null) {\n                    return conn.run(query, parameters, {\n                        bookmarks: bookmarks_1.Bookmarks.empty(),\n                        txConfig: tx_config_1.TxConfig.empty(),\n                        beforeError: onError,\n                        afterComplete: onComplete,\n                        reactive: reactive,\n                        fetchSize: fetchSize,\n                        highRecordWatermark: highRecordWatermark,\n                        lowRecordWatermark: lowRecordWatermark\n                    });\n                }\n                else {\n                    throw (0, error_1.newError)('No connection available');\n                }\n            })\n                .catch(function (error) { return new observers_1.FailedObserver({ error: error, onError: onError }); });\n            return newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark);\n        }\n    },\n    // An error has occurred, transaction can no longer be used and no more messages will\n    // be sent for this transaction.\n    FAILED: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has been rolled back either because of an error or explicit termination.'),\n                    onError: onError\n                }), 'COMMIT', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.FAILED\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.CompletedObserver(), 'ROLLBACK', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.FAILED\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has been rolled back either because of an error or explicit termination.'),\n                onError: onError\n            }), query, parameters, connectionHolder, 0, // high watermark\n            0 // low watermark\n            );\n        }\n    },\n    // This transaction has successfully committed\n    SUCCEEDED: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has already been committed.'),\n                    onError: onError\n                }), 'COMMIT', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.SUCCEEDED,\n                connectionHolder: connectionHolder\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been committed.'),\n                    onError: onError\n                }), 'ROLLBACK', {}, connection_holder_1.EMPTY_CONNECTION_HOLDER, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.SUCCEEDED,\n                connectionHolder: connectionHolder\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been committed.'),\n                onError: onError\n            }), query, parameters, connectionHolder, 0, // high watermark\n            0 // low watermark\n            );\n        }\n    },\n    // This transaction has been rolled back\n    ROLLED_BACK: {\n        commit: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot commit this transaction, because it has already been rolled back.'),\n                    onError: onError\n                }), 'COMMIT', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.ROLLED_BACK\n            };\n        },\n        rollback: function (_a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return {\n                result: newCompletedResult(new observers_1.FailedObserver({\n                    error: (0, error_1.newError)('Cannot rollback this transaction, because it has already been rolled back.')\n                }), 'ROLLBACK', {}, connectionHolder, 0, // high watermark\n                0 // low watermark\n                ),\n                state: _states.ROLLED_BACK\n            };\n        },\n        run: function (query, parameters, _a) {\n            var connectionHolder = _a.connectionHolder, onError = _a.onError, onComplete = _a.onComplete;\n            return newCompletedResult(new observers_1.FailedObserver({\n                error: (0, error_1.newError)('Cannot run query in this transaction, because it has already been rolled back.'),\n                onError: onError\n            }), query, parameters, connectionHolder, 0, // high watermark\n            0 // low watermark\n            );\n        }\n    }\n};\n/**\n *\n * @param {boolean} commit\n * @param {ConnectionHolder} connectionHolder\n * @param {function(err:Error): any} onError\n * @param {function(metadata:object): any} onComplete\n * @param {function() : any} onConnection\n * @param {list<Result>>}pendingResults all run results in this transaction\n */\nfunction finishTransaction(commit, connectionHolder, onError, onComplete, onConnection, pendingResults, preparationJob) {\n    var requirements = preparationJob !== null && preparationJob !== void 0 ? preparationJob : Promise.resolve();\n    var observerPromise = connectionHolder.getConnection()\n        .then(function (conn) { return requirements.then(function () { return conn; }); })\n        .then(function (connection) {\n        onConnection();\n        pendingResults.forEach(function (r) { return r._cancel(); });\n        return Promise.all(pendingResults.map(function (result) { return result.summary(); })).then(function (results) {\n            if (connection != null) {\n                if (commit) {\n                    return connection.commitTransaction({\n                        beforeError: onError,\n                        afterComplete: onComplete\n                    });\n                }\n                else {\n                    return connection.rollbackTransaction({\n                        beforeError: onError,\n                        afterComplete: onComplete\n                    });\n                }\n            }\n            else {\n                throw (0, error_1.newError)('No connection available');\n            }\n        });\n    })\n        .catch(function (error) { return new observers_1.FailedObserver({ error: error, onError: onError }); });\n    // for commit & rollback we need result that uses real connection holder and notifies it when\n    // connection is not needed and can be safely released to the pool\n    return new result_1.default(observerPromise, commit ? 'COMMIT' : 'ROLLBACK', {}, connectionHolder, {\n        high: Number.MAX_VALUE,\n        low: Number.MAX_VALUE\n    });\n}\n/**\n * Creates a {@link Result} with empty connection holder.\n * For cases when result represents an intermediate or failed action, does not require any metadata and does not\n * need to influence real connection holder to release connections.\n * @param {ResultStreamObserver} observer - an observer for the created result.\n * @param {string} query - the cypher query that produced the result.\n * @param {Object} parameters - the parameters for cypher query that produced the result.\n * @param {ConnectionHolder} connectionHolder - the connection holder used to get the result\n * @return {Result} new result.\n * @private\n */\nfunction newCompletedResult(observerPromise, query, parameters, connectionHolder, highRecordWatermark, lowRecordWatermark) {\n    if (connectionHolder === void 0) { connectionHolder = connection_holder_1.EMPTY_CONNECTION_HOLDER; }\n    return new result_1.default(Promise.resolve(observerPromise), query, parameters, new connection_holder_1.ReadOnlyConnectionHolder(connectionHolder !== null && connectionHolder !== void 0 ? connectionHolder : connection_holder_1.EMPTY_CONNECTION_HOLDER), {\n        low: lowRecordWatermark,\n        high: highRecordWatermark\n    });\n}\nexports[\"default\"] = Transaction;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/transaction.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/neo4j-driver-core/lib/types.js":
/*!*****************************************************!*\
  !*** ./node_modules/neo4j-driver-core/lib/types.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports) {

eval("\n/**\n * Copyright (c) \"Neo4j\"\n * Neo4j Sweden AB [https://neo4j.com]\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InternalConfig = exports.Config = void 0;\n/**\n * The Neo4j Driver configuration.\n *\n * @interface\n */\nvar Config = /** @class */ (function () {\n    /**\n     * @constructor\n     * @private\n     */\n    function Config() {\n        /**\n         * Encryption level\n         *\n         * @type {'ENCRYPTION_ON'|'ENCRYPTION_OFF'|undefined}\n         */\n        this.encrypted = undefined;\n        /**\n         * Trust strategy to use if encryption is enabled.\n         *\n         * There is no mode to disable trust other than disabling encryption altogether. The reason for\n         * this is that if you don't know who you are talking to, it is easy for an\n         * attacker to hijack your encrypted connection, rendering encryption pointless.\n         *\n         * TRUST_SYSTEM_CA_SIGNED_CERTIFICATES is the default choice. For NodeJS environments, this\n         * means that you trust whatever certificates are in the default trusted certificate\n         * store of the underlying system. For Browser environments, the trusted certificate\n         * store is usually managed by the browser. Refer to your system or browser documentation\n         * if you want to explicitly add a certificate as trusted.\n         *\n         * TRUST_CUSTOM_CA_SIGNED_CERTIFICATES is another option for trust verification -\n         * whenever we establish an encrypted connection, we ensure the host is using\n         * an encryption certificate that is in, or is signed by, a certificate given\n         * as trusted through configuration. This option is only available for NodeJS environments.\n         *\n         * TRUST_ALL_CERTIFICATES means that you trust everything without any verifications\n         * steps carried out.  This option is only available for NodeJS environments and should not\n         * be used on production systems.\n         *\n         * @type {'TRUST_SYSTEM_CA_SIGNED_CERTIFICATES'|'TRUST_CUSTOM_CA_SIGNED_CERTIFICATES'|'TRUST_ALL_CERTIFICATES'|undefined}\n         */\n        this.trust = undefined;\n        /**\n         * List of one or more paths to trusted encryption certificates.\n         *\n         * This only works in the NodeJS bundle,\n         * and only matters if you use \"TRUST_CUSTOM_CA_SIGNED_CERTIFICATES\".\n         *\n         * The certificate files should be in regular X.509 PEM format.\n         *\n         * For instance, ['./trusted.pem']\n         *\n         * @type {?string[]}\n         * @see {@link Config#trust}\n         */\n        this.trustedCertificates = [];\n        /**\n         * The maximum total number of connections allowed to be managed by the connection pool, per host.\n         *\n         * This includes both in-use and idle connections.\n         *\n         * **Default**: ```100```\n         *\n         * @type {number|undefined}\n         */\n        this.maxConnectionPoolSize = 100;\n        /**\n         * The maximum allowed lifetime for a pooled connection in milliseconds.\n         *\n         * Pooled connections older than this\n         * threshold will be closed and removed from the pool. Such discarding happens during connection acquisition\n         * so that new session is never backed by an old connection. Setting this option to a low value will cause\n         * a high connection churn and might result in a performance hit. It is recommended to set maximum lifetime\n         * to a slightly smaller value than the one configured in network equipment (load balancer, proxy, firewall,\n         * etc. can also limit maximum connection lifetime). No maximum lifetime limit is imposed by default. Zero\n         * and negative values result in lifetime not being checked.\n         *\n         * **Default**: ```60 * 60 * 1000``` (1 hour)\n         *\n         * @type {number|undefined}\n         */\n        this.maxConnectionLifetime = 60 * 60 * 1000; // 1 hour\n        /**\n         * The maximum amount of time to wait to acquire a connection from the pool (to either create a new\n         * connection or borrow an existing one).\n         *\n         * **Default**: ```60000``` (1 minute)\n         *\n         * @type {number|undefined}\n         */\n        this.connectionAcquisitionTimeout = 60000; // 1 minute\n        /**\n         * Specify the maximum time in milliseconds transactions are allowed to retry via\n         * {@link Session#executeRead} and {@link Session#executeWrite} functions.\n         *\n         * These functions will retry the given unit of work on `ServiceUnavailable`, `SessionExpired` and transient\n         * errors with exponential backoff using an initial delay of 1 second.\n         *\n         * **Default**: ```30000``` (30 seconds)\n         *\n         * @type {number|undefined}\n         */\n        this.maxTransactionRetryTime = 30000; // 30 seconds\n        /**\n         * Specify the maximum time in milliseconds the connection can be idle without needing\n         * to perform a liveness check on acquire from the pool.\n         *\n         * Pooled connections that have been idle in the pool for longer than this\n         * timeout will be tested before they are used again, to ensure they are still live.\n         * If this option is set too low, an additional network call will be incurred\n         * when acquiring a connection, which causes a performance hit.\n         *\n         * If this is set high, you may receive sessions that are backed by no longer\n         * live connections, which will lead to exceptions in your application.\n         * Assuming the database is running, these exceptions will go away if you retry\n         * acquiring sessions.\n         *\n         * Hence, this parameter tunes a balance between the likelihood of your application\n         * seeing connection problems, and performance.\n         *\n         * You normally should not need to tune this parameter. No connection liveliness\n         * check is done by default. Value 0 means connections will always be tested for\n         * validity and negative values mean connections will never be tested.\n         *\n         * **Default**: ```undefined``` (Disabled)\n         *\n         * @type {number|undefined}\n         */\n        this.connectionLivenessCheckTimeout = undefined; // Disabled\n        /**\n         * Specify socket connection timeout in milliseconds.\n         *\n         * Negative and zero values result in no timeout being applied.\n         * Connection establishment will be then bound by the timeout configured\n         * on the operating system level.\n         *\n         * **Default**: ```30000``` (30 seconds)\n         *\n         * @type {number|undefined}\n         */\n        this.connectionTimeout = 30000; // 30 seconds\n        /**\n         * Make this driver always return native JavaScript numbers for integer values, instead of the\n         * dedicated {@link Integer} class.\n         *\n         * Values that do not fit in native number bit range will be represented as `Number.NEGATIVE_INFINITY` or `Number.POSITIVE_INFINITY`.\n         *\n         * **Warning:** {@link ResultSummary} It is not always safe to enable this setting when JavaScript applications are not the only ones\n         * interacting with the database. Stored numbers might in such case be not representable by native\n         * `Number` type and thus the driver will return lossy values. This might also happen when data was\n         * initially imported using neo4j import tool and contained numbers larger than\n         * `Number.MAX_SAFE_INTEGER`. Driver will then return positive infinity, which is lossy.\n         *\n         * **Default**: ```false```\n         *\n         * Default value for this option is `false` because native JavaScript numbers might result\n         * in loss of precision in the general case.\n         *\n         * @type {boolean|undefined}\n         */\n        this.disableLosslessIntegers = false;\n        /**\n         * Make this driver always return native Javascript `BigInt` for integer values,\n         * instead of the dedicated {@link Integer} class or `Number`.\n         *\n         * **Warning:** `BigInt` doesn't implement the method `toJSON`. To serialize it as `json`,\n         * it's needed to add a custom implementation of the `toJSON` on the\n         * `BigInt.prototype`. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt#use_within_json.\n         *\n         * **Default**: ```false``` (for backwards compatibility)\n         *\n         * @type {boolean|undefined}\n         */\n        this.useBigInt = false;\n        /**\n         * Specify the logging configuration for the driver. Object should have two properties `level` and `logger`.\n         *\n         * Property `level` represents the logging level which should be one of: 'error', 'warn', 'info' or 'debug'. This property is optional and\n         * its default value is 'info'. Levels have priorities: 'error': 0, 'warn': 1, 'info': 2, 'debug': 3. Enabling a certain level also enables all\n         * levels with lower priority. For example: 'error', 'warn' and 'info' will be logged when 'info' level is configured.\n         *\n         * Property `logger` represents the logging function which will be invoked for every log call with an acceptable level. The function should\n         * take two string arguments `level` and `message`. The function should not execute any blocking or long-running operations\n         * because it is often executed on a hot path.\n         *\n         * No logging is done by default. See `neo4j.logging` object that contains predefined logging implementations.\n         *\n         * @type {LoggingConfig|undefined}\n         * @see {@link logging}\n         */\n        this.logging = undefined;\n        /**\n         * Specify a custom server address resolver function used by the routing driver to resolve the initial address used to create the driver.\n         *\n         * Such resolution happens:\n         *   * during the very first rediscovery when driver is created\n         *   * when all the known routers from the current routing table have failed and driver needs to fallback to the initial address\n         *\n         *  In NodeJS environment driver defaults to performing a DNS resolution of the initial address using 'dns' module.\n         *  In browser environment driver uses the initial address as-is.\n         *  Value should be a function that takes a single string argument - the initial address. It should return an array of new addresses.\n         *  Address is a string of shape '<host>:<port>'. Provided function can return either a Promise resolved with an array of addresses\n         *  or array of addresses directly.\n         *\n         * @type {function(address: string) {} |undefined}\n         */\n        this.resolver = undefined;\n        /**\n         * Configure filter for Notification objects returned in {@Link ResultSummary#notifications}.\n         *\n         * See {@link SessionConfig#notificationFilter} for usage instructions.\n         *\n         * @type {NotificationFilter|undefined}\n         */\n        this.notificationFilter = undefined;\n        /**\n         * Optionally override the default user agent name.\n         *\n         * **Default**: ```'neo4j-javascript/<version>'```\n         *\n         * @type {string|undefined}\n         */\n        this.userAgent = undefined;\n        /**\n         * Specify if telemetry collection is disabled.\n         *\n         * By default, the driver will send anonymous usage statistics to the server it connects to if the server requests those.\n         * By setting ``telemetryDisabled=true``, the driver will not send any telemetry data.\n         *\n         * The driver transmits the following information:\n         *\n         * Every time one of the following APIs is used to execute a query (for the first time), the server is informed of this\n         * (without any further information like arguments, client identifiers, etc.):\n         *\n         * * {@link Driver#executeQuery}\n         * * {@link Session#run}\n         * * {@link Session#beginTransaction}\n         * * {@link Session#executeRead}\n         * * {@link Session#executeWrite}\n         * * {@link Session#writeTransaction}\n         * * {@link Session#readTransaction}\n         * * The reactive counterparts of methods above.\n         *\n         * Metrics are only collected when enabled both in server and driver instances.\n         *\n         * **Default**: ```false```\n         *\n         * @type {boolean}\n         */\n        this.telemetryDisabled = false;\n        /**\n         * Client Certificate used for mutual TLS.\n         *\n         * A {@link ClientCertificateProvider} can be configure for scenarios\n         * where the {@link ClientCertificate} might change over time.\n         *\n         * @type {ClientCertificate|ClientCertificateProvider|undefined}\n         * @experimental Exposed as preview feature.\n         * @since 5.19\n         */\n        this.clientCertificate = undefined;\n    }\n    return Config;\n}());\nexports.Config = Config;\nvar InternalConfig = /** @class */ (function (_super) {\n    __extends(InternalConfig, _super);\n    function InternalConfig() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return InternalConfig;\n}(Config));\nexports.InternalConfig = InternalConfig;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/neo4j-driver-core/lib/types.js\n");

/***/ })

};
;